This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-24T20:39:14.921Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
admin/
  tools/
    add-update.php
    ban-user.php
api/
  updates.php
assets/
  css/
    auth.css
    components.css
    CSS.md
    overrides.css
    README.md
    theme-additions.css
    theme.css
    variables.css
  js/
    passkey.js
    theme.js
auth/
  login.php
  logout.php
  RateLimiter.php
  register.php
config/
  db.php
  environment.php
db/
  stats.sql
  xrpg.sql
docs/
  README_cleanup.md
pages/
  demo-components.php
  landing.php
players/
  apply-class-job-change.php
  change-class-job.php
  character-creation.php
  character.php
  create-character.php
  index.php
  save-settings.php
  settings.php
thirdparty/
  composer.json
  composer.lock
utils/
  setup-preferences.php
.env.example
.gitignore
.htaccess
.repomixignore
index.php
README.md
site.webmanifest

================================================================
Files
================================================================

================
File: admin/tools/add-update.php
================
<?php
/**
 * Add Update Tool
 * 
 * Usage: php add-update.php "Your update message here"
 * 
 * This tool helps AI assistants and developers add entries to the updates log.
 */

// Check if running from CLI
if (php_sapi_name() !== 'cli') {
    die("This script must be run from the command line\n");
}

// Get the update message from command line argument
$message = $argv[1] ?? null;

if (!$message) {
    echo "Usage: php add-update.php \"Your update message here\"\n";
    echo "Example: php add-update.php \"Added epic new battle animations\"\n";
    exit(1);
}

// Generate timestamp
$timestamp = date('Y-m-d H:i:s');

// Create the log entry
$entry = "$timestamp|🤖|$message\n";

// Append to updates.log
$logFile = __DIR__ . '/../../updates.log';
$result = file_put_contents($logFile, $entry, FILE_APPEND | LOCK_EX);

if ($result !== false) {
    echo "✅ Update added successfully!\n";
    echo "Entry: $entry";
} else {
    echo "❌ Failed to add update. Check file permissions.\n";
    exit(1);
}
?>

================
File: admin/tools/ban-user.php
================
Test

================
File: api/updates.php
================
<?php
// /api/updates.php - Simple API endpoint for game updates

header('Content-Type: application/json');
header('Cache-Control: public, max-age=300'); // Cache for 5 minutes

// Simple in-memory updates (in a real app, this would come from a database)
$updates = [
    [
        'id' => 5,
        'emoji' => '🎨',
        'message' => 'New theme customization options added!',
        'timestamp' => '2025-05-24 14:15:00',
        'type' => 'feature'
    ],
    [
        'id' => 4,
        'emoji' => '🔒',
        'message' => 'Enhanced security with passkey authentication',
        'timestamp' => '2025-05-24 13:30:00',
        'type' => 'security'
    ],
    [
        'id' => 3,
        'emoji' => '⚔️',
        'message' => 'New dungeon system coming soon!',
        'timestamp' => '2025-05-24 12:45:00',
        'type' => 'announcement'
    ],
    [
        'id' => 2,
        'emoji' => '🎮',
        'message' => 'Player dashboard improvements',
        'timestamp' => '2025-05-24 11:20:00',
        'type' => 'improvement'
    ],
    [
        'id' => 1,
        'emoji' => '🚀',
        'message' => 'XRPG Beta Launch - Welcome adventurers!',
        'timestamp' => '2025-05-24 10:00:00',
        'type' => 'announcement'
    ]
];

// Add relative time to each update
foreach ($updates as &$update) {
    $updateTime = strtotime($update['timestamp']);
    $now = time();
    $diff = $now - $updateTime;
    
    if ($diff < 60) {
        $update['timeAgo'] = 'Just now';
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        $update['timeAgo'] = $minutes . 'm ago';
    } elseif ($diff < 86400) {
        $hours = floor($diff / 3600);
        $update['timeAgo'] = $hours . 'h ago';
    } else {
        $days = floor($diff / 86400);
        $update['timeAgo'] = $days . 'd ago';
    }
}

// Get limit from query parameter (default 5, max 20)
$limit = isset($_GET['limit']) ? min(intval($_GET['limit']), 20) : 5;
$updates = array_slice($updates, 0, $limit);

// Return JSON response
echo json_encode([
    'success' => true,
    'updates' => $updates,
    'total' => count($updates),
    'generated_at' => date('Y-m-d H:i:s')
]);

================
File: assets/css/auth.css
================
/* Authentication UI Styles */

/* Authentication Modal */
.auth-modal {
    max-width: 420px;
    padding: 0;
    border-radius: calc(var(--user-radius, 18px) * 1.2);
    background: var(--gradient-surface);
    border: 1px solid var(--color-border);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
}

.auth-modal::backdrop {
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(4px);
}

.auth-header {
    padding: 2rem 2rem 1rem;
    text-align: center;
    border-bottom: 1px solid var(--color-border);
    position: relative;
}

.auth-title {
    margin: 0;
    font-size: 1.5rem;
    color: var(--color-text);
    font-weight: 600;
}

.auth-subtitle {
    margin: 0.5rem 0 0;
    color: var(--color-muted);
    font-size: 0.875rem;
}

.auth-close {
    position: absolute;
    top: 1rem;
    right: 1.5rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    color: var(--color-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.auth-close:hover {
    color: var(--color-text);
    background: rgba(255, 255, 255, 0.1);
}

.auth-body {
    padding: 2rem;
}

.auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.auth-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.auth-label {
    font-weight: 500;
    color: var(--color-text);
    font-size: 0.875rem;
}

.auth-input {
    padding: 1rem;
    border: 2px solid var(--color-border);
    border-radius: calc(var(--user-radius, 18px) * 0.8);
    background: var(--color-surface-alt);
    color: var(--color-text);
    font-size: 1rem;
    transition: all 0.2s ease;
}

.auth-input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgba(var(--color-accent-rgb), 0.1);
}

.auth-input::placeholder {
    color: var(--color-muted);
}

/* Authentication Buttons */
.auth-button {
    padding: 1rem 1.5rem;
    border: none;
    border-radius: calc(var(--user-radius, 18px) * 0.8);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
}

.auth-button-primary {
    background: var(--gradient-accent);
    color: white;
    box-shadow: 0 4px 15px rgba(var(--color-accent-rgb), 0.3);
}

.auth-button-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(var(--color-accent-rgb), 0.4);
}

.auth-button-primary:active {
    transform: translateY(0);
}

.auth-button-secondary {
    background: var(--color-surface);
    border: 2px solid var(--color-border);
    color: var(--color-text);
}

.auth-button-secondary:hover {
    border-color: var(--color-accent);
    background: var(--color-surface-alt);
}

.auth-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
}

/* Loading state */
.auth-button-loading {
    color: transparent !important;
    pointer-events: none;
}

.auth-button-loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid currentColor;
    border-radius: 50%;
    border-top-color: transparent;
    animation: auth-spin 0.8s linear infinite;
}

@keyframes auth-spin {
    to { transform: rotate(360deg); }
}

/* Status Messages */
.auth-status {
    padding: 1rem;
    border-radius: calc(var(--user-radius, 18px) * 0.6);
    margin-bottom: 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    text-align: center;
    transition: all 0.3s ease;
}

.auth-status-info {
    background: rgba(52, 152, 219, 0.1);
    border: 1px solid rgba(52, 152, 219, 0.3);
    color: #3498db;
}

.auth-status-success {
    background: rgba(46, 204, 113, 0.1);
    border: 1px solid rgba(46, 204, 113, 0.3);
    color: #2ecc71;
}

.auth-status-error {
    background: rgba(231, 76, 60, 0.1);
    border: 1px solid rgba(231, 76, 60, 0.3);
    color: #e74c3c;
}

.auth-status-warning {
    background: rgba(241, 196, 15, 0.1);
    border: 1px solid rgba(241, 196, 15, 0.3);
    color: #f1c40f;
}

/* Mode Switcher */
.auth-switcher {
    text-align: center;
    padding-top: 1.5rem;
    border-top: 1px solid var(--color-border);
    margin-top: 1.5rem;
}

.auth-switcher-text {
    color: var(--color-muted);
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
}

.auth-switcher-link {
    color: var(--color-accent);
    text-decoration: none;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: calc(var(--user-radius, 18px) * 0.4);
    transition: all 0.2s ease;
}

.auth-switcher-link:hover {
    background: rgba(var(--color-accent-rgb), 0.1);
    text-decoration: none;
}

/* Passkey specific styling */
.passkey-icon {
    display: inline-block;
    margin-right: 0.5rem;
    font-size: 1.1em;
}

.auth-divider {
    display: flex;
    align-items: center;
    margin: 1.5rem 0;
    color: var(--color-muted);
    font-size: 0.875rem;
}

.auth-divider::before,
.auth-divider::after {
    content: '';
    flex: 1;
    height: 1px;
    background: var(--color-border);
}

.auth-divider::before {
    margin-right: 1rem;
}

.auth-divider::after {
    margin-left: 1rem;
}

/* Responsive adjustments */
@media (max-width: 480px) {
    .auth-modal {
        max-width: 90vw;
        margin: 1rem;
    }
    
    .auth-header,
    .auth-body {
        padding: 1.5rem;
    }
}

/* Toast notifications */
.auth-toast {
    position: fixed !important;
    top: 20px !important;
    right: 20px !important;
    z-index: 10000 !important;
    max-width: 380px;
    padding: 1rem 1.5rem;
    border-radius: calc(var(--user-radius, 18px) * 0.8);
    font-weight: 500;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    transform: translateX(400px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: inherit;
    opacity: 0;
}

.auth-toast.show {
    transform: translateX(0);
    opacity: 1;
}

.auth-toast-success {
    background: linear-gradient(135deg, #2ecc71, #27ae60);
    color: white;
}

.auth-toast-error {
    background: linear-gradient(135deg, #e74c3c, #c0392b);
    color: white;
}

.auth-toast-info {
    background: linear-gradient(135deg, #3498db, #2980b9);
    color: white;
}

/* Hide default browser autofill styling */
.auth-input:-webkit-autofill,
.auth-input:-webkit-autofill:hover,
.auth-input:-webkit-autofill:focus {
    -webkit-box-shadow: 0 0 0 30px var(--color-surface-alt) inset !important;
    -webkit-text-fill-color: var(--color-text) !important;
}

================
File: assets/css/components.css
================
/* XRPG Component Styles - Where the Magic Happens */

/* ===== BUTTONS - The Click Warriors ===== */
.button, button, [role="button"] {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  padding: 0.75em 1.5em;
  font-weight: 600;
  font-size: 0.95rem;
  line-height: 1;
  color: var(--color-text);
  background: var(--gradient-accent);
  border: 1.5px solid var(--color-border);
  border-radius: calc(var(--user-radius, 18px) * 0.4);
  box-shadow: var(--shadow-default);
  cursor: pointer;
  position: relative;
  overflow: hidden;
  transition: all var(--duration-fast) var(--ease-default);
  filter: brightness(var(--opacity-ui));
  transform-style: preserve-3d;
  text-decoration: none;
  white-space: nowrap;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
}

.button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--gradient-light);
  opacity: 0;
  transition: opacity var(--duration-fast);
}

.button:hover {
  transform: translateY(-2px) scale(1.02);
  box-shadow: var(--shadow-glow), var(--shadow-large);
  filter: brightness(1.1);
}

.button:hover::before {
  opacity: 1;
}

.button:active {
  transform: translateY(0) scale(0.98);
  box-shadow: var(--shadow-medium);
  filter: brightness(0.95);
}

.button:disabled, button:disabled {
  opacity: var(--opacity-disabled);
  cursor: not-allowed;
  transform: none;
  filter: grayscale(0.5);
}

.button:disabled:hover {
  transform: none;
  box-shadow: var(--shadow-default);
}

/* Button Variants */
.button-secondary {
  background: var(--gradient-surface);
  color: var(--color-accent);
}

.button-ghost {
  background: transparent;
  border-color: transparent;
  box-shadow: none;
}

.button-ghost:hover {
  background: var(--color-surface-alt);
  border-color: var(--color-border);
}

.button-danger {
  background: linear-gradient(135deg, var(--color-danger), #dc2626);
}

.button-success {
  background: linear-gradient(135deg, var(--color-success), #059669);
}

/* Button Sizes */
.button-sm {
  padding: 0.5em 1em;
  font-size: 0.875rem;
}

.button-lg {
  padding: 1em 2em;
  font-size: 1.125rem;
}

/* Button with Icon */
.button-icon {
  padding: 0.75em;
  aspect-ratio: 1;
}

/* ===== INPUTS - The Data Collectors ===== */
input, textarea, select {
  width: 100%;
  padding: 0.75em 1em;
  font-size: 0.95rem;
  font-family: inherit;
  background: var(--color-surface-alt);
  border: 1.5px solid var(--color-border);
  color: var(--color-text);
  border-radius: calc(var(--user-radius, 18px) * 0.3);
  outline: none;
  transition: all var(--duration-fast) var(--ease-default);
  cursor: pointer;
}

input::placeholder, textarea::placeholder {
  color: var(--color-muted);
  opacity: 0.7;
}

input:hover, textarea:hover, select:hover {
  border-color: var(--color-accent);
  background: color-mix(in srgb, var(--color-surface-alt) 90%, var(--color-accent) 10%);
}

input:focus, textarea:focus, select:focus {
  border-color: var(--color-accent);
  box-shadow: var(--shadow-glow), var(--shadow-inset);
  background: var(--color-surface);
  cursor: text;
}

/* Special Input Types */
input[type="checkbox"], input[type="radio"] {
  width: 1.25em;
  height: 1.25em;
  margin: 0 var(--space-sm) 0 0;
  accent-color: var(--color-accent);
  cursor: pointer;
  transition: transform var(--duration-fast) var(--ease-bounce);
}

input[type="checkbox"]:hover, input[type="radio"]:hover {
  transform: scale(1.1);
}

input[type="checkbox"]:checked, input[type="radio"]:checked {
  animation: checkPulse var(--duration-normal) var(--ease-bounce);
}

@keyframes checkPulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.2); }
  100% { transform: scale(1); }
}

/* Range Inputs */
input[type="range"] {
  padding: 0;
  height: 0.5rem;
  background: var(--color-surface-alt);
  cursor: grab;
}

input[type="range"]:active {
  cursor: grabbing;
}

input[type="range"]::-webkit-slider-thumb {
  appearance: none;
  width: 1.5rem;
  height: 1.5rem;
  background: var(--gradient-accent);
  border-radius: 50%;
  box-shadow: var(--shadow-glow);
  transition: all var(--duration-fast);
}

input[type="range"]::-webkit-slider-thumb:hover {
  transform: scale(1.2);
  box-shadow: var(--shadow-glow), var(--shadow-large);
}

/* Color Inputs */
input[type="color"] {
  padding: 0.25rem;
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  overflow: hidden;
  cursor: pointer;
}

input[type="color"]::-webkit-color-swatch-wrapper {
  padding: 0;
}

input[type="color"]::-webkit-color-swatch {
  border: none;
  border-radius: 50%;
}

/* ===== CARDS & SURFACES - The Containers ===== */
.card {
  background: var(--gradient-surface);
  border: 1.5px solid var(--color-border);
  border-radius: calc(var(--user-radius, 18px) * 0.8);
  box-shadow: var(--shadow-default);
  color: var(--color-text);
  padding: var(--space-xl);
  position: relative;
  overflow: hidden;
  transition: all var(--duration-normal) var(--ease-default);
}

.card::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle, var(--color-accent-dim) 0%, transparent 70%);
  opacity: 0;
  transition: opacity var(--duration-slow);
  pointer-events: none;
}

.card:hover::before {
  opacity: 1;
}

.card-interactive {
  cursor: pointer;
}

.card-interactive:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-glow), var(--shadow-epic);
}

.surface {
  background: var(--color-surface-alt);
  border: 1px solid var(--color-border);
  border-radius: calc(var(--user-radius, 18px) * 0.4);
  padding: var(--space-md);
  transition: all var(--duration-fast);
}

.surface-interactive {
  cursor: pointer;
}

.surface-interactive:hover {
  background: var(--color-surface);
  box-shadow: var(--shadow-medium);
  transform: scale(1.02);
}

/* ===== MODAL SYSTEM - The Overlords ===== */
.modal, dialog {
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%) scale(0.95);
  background: var(--gradient-surface);
  border: 2px solid var(--color-border);
  border-radius: calc(var(--user-radius, 18px) * 0.8);
  box-shadow: var(--shadow-glow), var(--shadow-epic);
  color: var(--color-text);
  padding: 0;
  max-width: min(90vw, 600px);
  max-height: 90vh;
  overflow: hidden;
  z-index: var(--z-modal);
  opacity: 0;
  transition: all var(--duration-normal) var(--ease-bounce);
}

.modal[open], dialog[open] {
  opacity: 1;
  transform: translate(-50%, -50%) scale(1);
}

.modal::backdrop, dialog::backdrop {
  background: rgba(0, 0, 0, 0.75);
  backdrop-filter: var(--blur-md);
  opacity: 0;
  transition: opacity var(--duration-normal);
}

.modal[open]::backdrop, dialog[open]::backdrop {
  opacity: 1;
}

.modal-header {
  padding: var(--space-lg);
  border-bottom: 1px solid var(--color-border);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--gradient-light);
}

.modal-body {
  padding: var(--space-xl);
  overflow-y: auto;
  max-height: 60vh;
}

.modal-footer {
  padding: var(--space-lg);
  border-top: 1px solid var(--color-border);
  display: flex;
  justify-content: flex-end;
  gap: var(--space-md);
  background: var(--gradient-dark);
}


/* Close Button */
.modal-close {
  background: none;
  border: none;
  font-size: .5rem;
  width: .5rem;
  height: .5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  color: var(--color-muted);
  border-radius: 50%;
  transition: all var(--duration-fast);
  marin-left: 50px; margin-bottom: 50px;
}

.modal-close:hover {
  color: var(--color-text);
  background: var(--color-surface-alt);
  transform: rotate(90deg);
}

/* ===== NAVIGATION - The Wayfinder ===== */
.side-nav {
  position: fixed;
  left: 0;
  top: 0;
  height: 100vh;
  background: var(--gradient-surface);
  border-right: 1px solid var(--color-border);
  box-shadow: var(--shadow-large);
  transition: width var(--duration-normal) var(--ease-smooth);
  overflow: hidden;
  z-index: var(--z-fixed);
  width: 4.5rem;
}

.side-nav.expanded {
  width: 16rem;
}

.side-nav-toggle {
  position: absolute;
  right: 0.75rem;
  top: 0.75rem;
  background: var(--color-surface-alt);
  border: 1px solid var(--color-border);
  color: var(--color-text);
  cursor: pointer;
  font-size: 1.25rem;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: var(--radius-md);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all var(--duration-fast);
  z-index: 2;
}

.side-nav-toggle:hover {
  background: var(--color-accent);
  color: white;
  transform: scale(1.1);
  box-shadow: var(--shadow-glow);
}

.side-nav-items {
  margin-top: 4rem;
  padding: var(--space-sm) 0;
}

.side-nav-item {
  display: flex;
  align-items: center;
  padding: var(--space-md) var(--space-lg);
  color: var(--color-text);
  text-decoration: none;
  transition: all var(--duration-fast);
  position: relative;
  white-space: nowrap;
  overflow: hidden;
}

.side-nav-item::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: var(--gradient-accent);
  transform: scaleY(0);
  transition: transform var(--duration-fast);
}

.side-nav-item:hover {
  background: var(--color-surface-alt);
  color: var(--color-accent);
  padding-left: calc(var(--space-lg) + 3px);
}

.side-nav-item:hover .side-nav-icon {
  transform: scale(1.2) rotate(5deg);
}

.side-nav-item.active {
  background: var(--color-surface-alt);
  color: var(--color-accent);
}

.side-nav-item.active::before {
  transform: scaleY(1);
}

.side-nav-icon {
  font-size: 1.5rem;
  width: 2rem;
  text-align: center;
  flex-shrink: 0;
  transition: transform var(--duration-fast) var(--ease-bounce);
}

.side-nav-text {
  margin-left: var(--space-md);
  opacity: 0;
  transform: translateX(-10px);
  transition: all var(--duration-fast);
}

.side-nav.expanded .side-nav-text {
  opacity: 1;
  transform: translateX(0);
}

/* ===== HEADER - The Crown ===== */
.main-header {
  position: fixed;
  top: 0;
  left: 4.5rem;
  right: 0;
  height: 4rem;
  background: var(--gradient-surface);
  border-bottom: 1px solid var(--color-border);
  box-shadow: var(--shadow-medium);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 var(--space-xl);
  z-index: var(--z-sticky);
  transition: left var(--duration-normal) var(--ease-smooth);
}

.side-nav.expanded ~ .main-header,
.side-nav.expanded ~ .main-content {
  left: 16rem;
}

.header-title {
  font-size: 1.5rem;
  font-weight: 700;
  background: var(--gradient-accent);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: -0.025em;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: var(--space-md);
}

/* ===== FOOTER - The Foundation ===== */
.main-footer {
  background: var(--gradient-surface);
  border-top: 1px solid var(--color-border);
  padding: var(--space-2xl) var(--space-xl);
  margin-top: var(--space-3xl);
}

.footer-links {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: var(--space-xl);
  margin-bottom: var(--space-xl);
}

.footer-links a {
  color: var(--color-muted);
  text-decoration: none;
  transition: all var(--duration-fast);
  position: relative;
}

.footer-links a::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: -2px;
  width: 100%;
  height: 2px;
  background: var(--gradient-accent);
  transform: scaleX(0);
  transform-origin: right;
  transition: transform var(--duration-fast);
}

.footer-links a:hover {
  color: var(--color-accent);
}

.footer-links a:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

.footer-info {
  text-align: center;
  color: var(--color-muted);
  font-size: 0.875rem;
  line-height: 1.6;
}

/* ===== MAIN CONTENT - The Stage ===== */
.main-content {
  margin-left: 4.5rem;
  margin-top: 4rem;
  min-height: calc(100vh - 4rem);
  transition: margin-left var(--duration-normal) var(--ease-smooth);
}

/* ===== UTILITY CLASSES - The Helpers ===== */
.hidden { display: none !important; }
.invisible { visibility: hidden !important; }
.sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0; }

/* Text Utilities */
.text-accent { color: var(--color-accent); }
.text-muted { color: var(--color-muted); }
.text-success { color: var(--color-success); }
.text-danger { color: var(--color-danger); }
.text-warning { color: var(--color-warning); }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-left { text-align: left; }

/* Background Utilities */
.bg-accent { background: var(--gradient-accent); }
.bg-surface { background: var(--gradient-surface); }
.bg-transparent { background: transparent; }

/* Spacing Utilities */
.m-0 { margin: 0; }
.mt-0 { margin-top: 0; }
.mb-0 { margin-bottom: 0; }
.p-0 { padding: 0; }
.pt-0 { padding-top: 0; }
.pb-0 { padding-bottom: 0; }

/* Flex Utilities */
.flex { display: flex; }
.flex-col { flex-direction: column; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.gap-sm { gap: var(--space-sm); }
.gap-md { gap: var(--space-md); }
.gap-lg { gap: var(--space-lg); }

/* Grid Utilities */
.grid { display: grid; }
.grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

/* Animation Utilities */
.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.animate-bounce {
  animation: bounce 1s infinite;
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(-25%);
    animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
  }
  50% {
    transform: translateY(0);
    animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* ===== SPECIAL COMPONENTS - The Showstoppers ===== */

/* Progress Bars */
.progress {
  width: 100%;
  height: 1.5rem;
  background: var(--color-surface-alt);
  border-radius: var(--radius-full);
  overflow: hidden;
  position: relative;
  border: 1px solid var(--color-border);
}

.progress-fill {
  height: 100%;
  background: var(--gradient-accent);
  transition: width var(--duration-normal) var(--ease-smooth);
  position: relative;
  overflow: hidden;
}

.progress-fill::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255,255,255,0.2),
    transparent
  );
  transform: translateX(-100%);
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  100% { transform: translateX(100%); }
}

/* Badges */
.badge {
  display: inline-flex;
  align-items: center;
  padding: var(--space-xs) var(--space-md);
  background: var(--gradient-accent);
  color: white;
  border-radius: var(--radius-full);
  font-size: 0.875rem;
  font-weight: 600;
  box-shadow: var(--shadow-medium);
  white-space: nowrap;
}

.badge-success {
  background: linear-gradient(135deg, var(--color-success), #059669);
}

.badge-danger {
  background: linear-gradient(135deg, var(--color-danger), #dc2626);
}

.badge-warning {
  background: linear-gradient(135deg, var(--color-warning), #d97706);
}

/* Tooltips */
[data-tooltip] {
  position: relative;
}

[data-tooltip]::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%) translateY(-8px);
  background: var(--color-surface);
  color: var(--color-text);
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--radius-md);
  font-size: 0.875rem;
  white-space: nowrap;
  box-shadow: var(--shadow-large);
  opacity: 0;
  pointer-events: none;
  transition: all var(--duration-fast);
  z-index: var(--z-tooltip);
}

[data-tooltip]:hover::after {
  opacity: 1;
  transform: translateX(-50%) translateY(0);
}

/* Loading Spinner */
.spinner {
  width: 2rem;
  height: 2rem;
  border: 3px solid var(--color-surface-alt);
  border-top-color: var(--color-accent);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

/* Floating Action Button */
.fab {
  position: fixed;
  bottom: var(--space-xl);
  right: var(--space-xl);
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 50%;
  background: var(--gradient-accent);
  border: none;
  box-shadow: var(--shadow-glow), var(--shadow-large);
  cursor: pointer;
  font-size: 1.5rem;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all var(--duration-fast) var(--ease-bounce);
  z-index: var(--z-fixed);
}

.fab:hover {
  transform: scale(1.1) rotate(90deg);
  box-shadow: var(--shadow-glow), var(--shadow-epic);
}

.fab:active {
  transform: scale(0.95);
}

/* Theme Toggle Fixed Button */
.theme-toggle-fixed {
  position: fixed;
  bottom: 5rem;
  right: var(--space-md);
  z-index: var(--z-fixed);
  background: var(--gradient-accent);
  border: none;
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  font-size: .7rem;
  cursor: pointer;
  box-shadow: var(--shadow-glow);
  transition: all var(--duration-fast) var(--ease-bounce);
  display: flex;
  align-items: center;
  justify-content: center;
}

.theme-toggle-fixed:hover {
  transform: scale(1.15) rotate(180deg);
  box-shadow: var(--shadow-glow), var(--shadow-large);
}

/* Updates Area - Special Styling */
.updates-area {
  margin: var(--space-lg) auto var(--space-xl) auto;
  max-width: 600px;
  box-shadow: var(--shadow-glow), var(--shadow-large);
  border: 2px solid var(--color-accent);
  position: relative;
  overflow: hidden;
}

.updates-area::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: var(--gradient-accent);
  opacity: 0.2;
  animation: pulse 2s infinite;
  z-index: -1;
}

.update-entry {
  display: flex;
  align-items: center;
  margin-bottom: var(--space-sm);
  font-size: 0.95rem;
  line-height: 1.5;
  padding: var(--space-xs) 0;
  transition: all var(--duration-fast);
}

.update-entry:hover {
  transform: translateX(var(--space-sm));
}

.update-time {
  color: var(--color-muted);
  margin-right: var(--space-sm);
  font-family: var(--font-mono);
  font-size: 0.875rem;
  opacity: 0.8;
}

.update-emoji {
  margin-right: var(--space-sm);
  font-size: 1.2rem;
  animation: bounce 2s infinite;
  animation-delay: var(--delay, 0s);
}

.update-blurb {
  color: var(--color-text);
  flex: 1;
}

/* Form Groups */
.form-group {
  margin-bottom: var(--space-lg);
}

.form-group label {
  display: block;
  margin-bottom: var(--space-sm);
  font-weight: 600;
  color: var(--color-text);
}

.form-help {
  margin-top: var(--space-xs);
  font-size: 0.875rem;
  color: var(--color-muted);
}

/* Control Groups */
.control-group {
  margin: var(--space-lg) 0;
}

.control-label {
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: var(--color-text);
  font-weight: 600;
  margin-bottom: var(--space-sm);
}

.range-value {
  color: var(--color-accent);
  font-size: 0.875rem;
  font-family: var(--font-mono);
  font-weight: normal;
}

/* Contrast Warning */
.contrast-warning {
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  color: var(--color-danger);
  padding: var(--space-md);
  border-radius: var(--radius-md);
  margin-top: var(--space-md);
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  gap: var(--space-sm);
}

.contrast-warning::before {
  content: '⚠️';
  font-size: 1.2rem;
}

/* Demo Preview Elements */
.theme-preview-circle {
  width: 120px;
  height: 120px;
  border-radius: 50%;
  background: var(--gradient-accent);
  box-shadow: var(--shadow-glow), var(--shadow-epic);
  margin: var(--space-xl) auto;
  transition: all var(--duration-normal) var(--ease-bounce);
  position: relative;
  overflow: hidden;
}

.theme-preview-circle::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: conic-gradient(
    from 0deg,
    transparent,
    rgba(255,255,255,0.2),
    transparent
  );
  animation: spin 3s linear infinite;
}

.theme-preview-circle:hover {
  transform: scale(1.1) rotate(10deg);
  box-shadow: var(--shadow-glow), 0 30px 60px -15px rgba(0,0,0,0.3);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .side-nav {
    transform: translateX(-100%);
  }
  
  .side-nav.expanded {
    transform: translateX(0);
  }
  
  .main-header,
  .main-content {
    left: 0 !important;
  }

  
  .fab {
    bottom: calc(var(--space-xl) + 4rem);
  }
}

dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    margin: 0;
    border: none;
    padding: 1rem;
    background: white;
    z-index: 1000;
    max-height: 90vh;
    overflow-y: auto;
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0,0,0,0.3);
}

================
File: assets/css/CSS.md
================
# CSS Summary

## Files

* **variables.css**: core CSS vars (colors, gradients, shadows, opacities, fonts, timing, z-indices, spacing, radius, blur)
* **components.css**: UI components (buttons, inputs, cards, modals, nav, header, footer, content)
* **overrides.css**: browser-specific fixes (scrollbars, focus outlines)
* **theme.css**: imports + dynamic user vars & theming logic (light/dark, user controls)
* **README.md**: documentation & guidelines

## Variables

* **Colors**: `--color-*` (bg, surface, accent, text, semantic)
* **Gradients**: `--gradient-*`
* **Shadows**: `--shadow-*`
* **Opacities**: `--opacity-*`
* **Fonts**: `--font-*`
* **Timing**: `--duration-*`, `--ease-*`
* **Z-index**: `--z-*`
* **Spacing**: `--space-*`
* **Radius**: `--radius-*`
* **Blur**: `--blur-*`

## Components

* **Buttons**: `.button` (gradient bg, hover/active, variants, sizes, icon)
* **Inputs**: `input, textarea, select`; special types (checkbox, radio, range, color)
* **Cards & Surfaces**: `.card`, `.surface` (hover effects)
* **Modals**: `.modal`, `dialog` (open/close animations, backdrop)
* **Navigation**: `.side-nav`, `.main-header`, `.main-footer`
* **Layout**: `.main-content` (nav offset)

## Utilities

* **Display**: `.hidden`, `.invisible`, `.sr-only`
* **Text**: `.text-*`
* **BG**: `.bg-*`
* **Spacing**: `.m-*`, `.p-*`
* **Flex/Grid**: `.flex`, `.justify-*`, `.grid-cols-*`
* **Animation**: `.animate-*`, keyframes (pulse, bounce, spin)

## Special Components

* **Progress**: `.progress`, `.progress-fill` (shimmer)
* **Badges**: `.badge`, semantic variants
* **Tooltips**: `[data-tooltip]`
* **Spinner**: `.spinner`
* **FAB & Theme Toggle**: `.fab`, `.theme-toggle-fixed`
* **Updates Area**: `.updates-area`, `.update-entry`
* **Forms**: `.form-group`, `.control-group`
* **Contrast Warning**: `.contrast-warning`
* **Theme Preview**: `.theme-preview-circle`

## Theming & Accessibility

* **Dynamic Controls**: `--user-*` vars in `theme.css`
* **Light/Dark**: `[data-theme="light"]` overrides
* **Focus**: `:focus-visible`
* **High Contrast**: `prefers-contrast`
* **Reduced Motion**: `prefers-reduced-motion`

## Guidelines

* Use CSS variables for all styles
* Define hover/active/focus/disabled states
* GPU-accelerated transitions
* Test with extreme user settings

================
File: assets/css/overrides.css
================
/* Scrollbars - for webkit browsers and "futureproofed" for others */
::-webkit-scrollbar {
  width: 12px;
  background: var(--scrollbar-track);
}
::-webkit-scrollbar-thumb {
  background: var(--scrollbar-thumb);
  border-radius: 6px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--scrollbar-thumb-hover);
}
html {
  scrollbar-color: var(--scrollbar-thumb) var(--scrollbar-track);
  scrollbar-width: thin;
}
/* Borders for focus and accessibility */
:focus-visible {
  outline: 2.5px solid var(--color-accent);
  outline-offset: 2px;
}

================
File: assets/css/README.md
================
# XRPG Theme System Documentation

## Overview
The XRPG theme system provides complete visual customization through CSS variables, allowing players to personalize their experience with dynamic colors, opacity, shadows, and border radius adjustments.

## File Structure
```
/assets/css/
├── theme.css       # Main theme file (imports all others)
├── variables.css   # Core CSS variables & theme presets
├── components.css  # UI component styles
├── overrides.css   # Browser-specific overrides
└── README.md       # This documentation
```

## Core Variables

### Colors
- `--color-bg`: Main background color
- `--color-surface`: Card/panel backgrounds
- `--color-surface-alt`: Alternative surface (inputs, etc)
- `--color-accent`: Primary accent color (user-controlled)
- `--color-accent-glow`: Accent color for glows/shadows
- `--color-border`: Border colors
- `--color-text`: Primary text color
- `--color-muted`: Secondary/muted text

### Gradients
- `--gradient-accent`: Accent gradient (buttons, highlights)
- `--gradient-surface`: Surface gradient (cards, panels)

### Shadows
- `--shadow-default`: Standard shadow with accent glow
- `--shadow-glow`: Intense glow effect for focus/active states

### Opacities
- `--opacity-ui`: UI element opacity (user-controlled)
- `--opacity-modal`: Modal/dialog opacity
- `--opacity-active`: Active state opacity
- `--opacity-disabled`: Disabled element opacity

### User Controls
Players can adjust these via the UI:
- `--user-accent`: Primary accent color
- `--user-accent2`: Secondary accent for gradients
- `--user-radius`: Border radius (9-40px)
- `--user-shadow-intensity`: Shadow darkness (0.05-0.35)
- `--user-opacity`: UI opacity (0.8-1.0)

## Component Classes

### Buttons
```css
.button, button, [role="button"]
```
- Uses accent gradient background
- Glowing shadow on hover/active
- Respects opacity settings

### Inputs
```css
input, textarea, select
```
- Dark surface background
- Accent border on focus
- Glow effect when active

### Cards & Surfaces
```css
.card, .modal, .surface
```
- Gradient surface background
- Subtle border
- Respects border radius settings

### Utility Classes
- `.bg-accent`: Accent gradient background
- `.bg-surface`: Surface gradient background
- `.text-accent`: Accent colored text
- `.text-muted`: Muted colored text

## Accessibility Features

### ARIA Support
All elements with ARIA attributes automatically inherit theme colors:
```css
[role="region"], [aria-label], .accessible-panel
```

### Focus Indicators
Strong focus indicators using accent color:
```css
:focus-visible {
  outline: 2.5px solid var(--color-accent);
  outline-offset: 2px;
}
```

### Scrollbar Theming
Custom scrollbars that match the theme:
- Webkit browsers: Full visual customization
- Firefox: Basic color theming
- Scrollbar colors blend with accent color

## Usage Guidelines

### Adding New Components
1. **Always use CSS variables** - Never hardcode colors
2. **Include all states** - hover, active, focus, disabled
3. **Test with all theme variations** - Light/dark, different accents
4. **Ensure accessibility** - Minimum AA contrast ratios

### Example Component
```css
.new-component {
  background: var(--gradient-surface);
  border: 1px solid var(--color-border);
  color: var(--color-text);
  border-radius: calc(var(--user-radius) * 0.5);
  box-shadow: var(--shadow-default);
  opacity: var(--opacity-ui);
}

.new-component:hover {
  box-shadow: var(--shadow-glow);
}
```

## Theme Switching
The system supports multiple theme presets:
- **Dark** (default): Dark backgrounds with vibrant accents
- **Light**: Bright backgrounds with deeper accents
- **Custom**: User-defined colors and settings

## Performance Notes
- All transitions are GPU-accelerated
- Color calculations use native CSS functions
- Variables cascade efficiently
- Minimal repaints on theme changes

## Future Considerations
When adding new features:
1. Check if existing variables cover the use case
2. Add new variables to `variables.css` if needed
3. Document any new variables here
4. Test with extreme user settings (min/max values)
5. Ensure mobile browser compatibility

## Updates Integration
The theme system works with the updates.log system to show recent changes. Style updates should be logged with entries like:
```
[timestamp]|🤖|Enhanced theme system with dynamic shadows and accent glows
```

================
File: assets/css/theme-additions.css
================
/* Additional Theme System CSS - Add to your main theme.css or include separately */

/* Switch Component Styles */
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--color-surface-alt);
    transition: all 0.4s ease;
    border: 2px solid var(--color-border);
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 2px;
    background-color: var(--color-text);
    transition: all 0.4s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

input:checked + .slider {
    background-color: var(--color-accent);
    border-color: var(--color-accent);
}

input:focus + .slider {
    box-shadow: 0 0 0 3px rgba(var(--color-accent-rgb), 0.2);
}

input:checked + .slider:before {
    transform: translateX(22px);
    background-color: white;
}

.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

/* Update Entry Styles */
.update-entry {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: var(--color-surface-alt);
    border-radius: calc(var(--user-radius) * 0.5);
    transition: all 0.2s ease;
}

.update-entry:hover {
    background: var(--color-surface);
    transform: translateY(-1px);
}

.update-time {
    color: var(--color-muted);
    font-size: 0.75rem;
    min-width: 3rem;
    text-align: right;
}

.update-emoji {
    font-size: 1.2rem;
    min-width: 1.5rem;
    text-align: center;
}

.update-blurb {
    flex: 1;
    color: var(--color-text);
    font-size: 0.875rem;
}

/* Form Control Improvements */
.control-group {
    margin-bottom: 1.5rem;
}

.control-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--color-text);
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--color-text);
}

/* Range Slider Improvements */
input[type="range"] {
    width: 100%;
    height: 6px;
    background: var(--color-surface-alt);
    border-radius: 3px;
    outline: none;
    border: none;
    cursor: pointer;
}

input[type="range"]::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    background: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    transition: all 0.2s ease;
}

input[type="range"]::-webkit-slider-thumb:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: var(--color-accent);
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

/* Color Input Improvements */
input[type="color"] {
    border: 2px solid var(--color-border);
    border-radius: calc(var(--user-radius) * 0.5);
    cursor: pointer;
    transition: all 0.2s ease;
}

input[type="color"]:hover {
    border-color: var(--color-accent);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

/* Status Messages */
.save-status {
    margin: 1rem 0;
    padding: 0.75rem 1rem;
    border-radius: calc(var(--user-radius) * 0.5);
    display: none;
    font-weight: 500;
    text-align: center;
}

.save-status.success {
    background: rgba(76, 175, 80, 0.1);
    border: 1px solid rgba(76, 175, 80, 0.3);
    color: #4caf50;
}

.save-status.error {
    background: rgba(244, 67, 54, 0.1);
    border: 1px solid rgba(244, 67, 54, 0.3);
    color: #f44336;
}

.save-status.warning {
    background: rgba(255, 193, 7, 0.1);
    border: 1px solid rgba(255, 193, 7, 0.3);
    color: #ff9800;
}

/* Contrast Warning */
.contrast-warning {
    background: rgba(255, 100, 100, 0.1);
    border: 1px solid rgba(255, 100, 100, 0.3);
    color: #ff6464;
    padding: 0.75rem;
    border-radius: calc(var(--user-radius) * 0.5);
    margin-top: 1rem;
    font-size: 0.875rem;
    display: none;
}

.contrast-warning.show {
    display: block;
    animation: slideDown 0.3s ease;
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Theme Toggle Improvements */
.theme-toggle-fixed {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    border: 2px solid var(--color-border);
    background: var(--color-surface);
    color: var(--color-text);
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.theme-toggle-fixed:hover {
    transform: scale(1.1) rotate(15deg);
    box-shadow: 0 6px 20px rgba(0,0,0,0.2);
    border-color: var(--color-accent);
}

/* Settings Grid Responsive */
.settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
}

@media (max-width: 768px) {
    .settings-grid {
        grid-template-columns: 1fr;
    }
}

/* Preview Grid Responsive */
.preview-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

@media (max-width: 768px) {
    .preview-grid {
        grid-template-columns: 1fr;
    }
}

/* Loading Animation */
.loading {
    display: inline-block;
    width: 1rem;
    height: 1rem;
    border: 2px solid var(--color-border);
    border-radius: 50%;
    border-top-color: var(--color-accent);
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* Feature Card Improvements */
.feature-card {
    transition: all 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.feature-icon {
    transition: all 0.3s ease;
}

.feature-card:hover .feature-icon {
    transform: scale(1.1);
}

/* Step Number Animation */
.step-number {
    transition: all 0.3s ease;
}

.step:hover .step-number {
    transform: scale(1.1);
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}

/* Accessibility Improvements */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* Focus Styles */
button:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
    :root {
        --color-border: #000000;
        --color-text: #000000;
        --color-background: #ffffff;
    }
    
    [data-theme="dark"] {
        --color-border: #ffffff;
        --color-text: #ffffff;
        --color-background: #000000;
    }
}

================
File: assets/css/theme.css
================
/* XRPG Dynamic Theme System - The Master Controller */

/* Import all the magic */
@import url('variables.css');
@import url('components.css');
@import url('overrides.css');

/* ===== DYNAMIC USER CONTROLS ===== */
:root {
    /* Dynamic User-Controlled Variables */
    --user-accent: #5299e0;
    --user-accent2: #81aaff;
    --user-radius: 18px;
    --user-shadow-intensity: 0.36;
    --user-opacity: 0.96;
    --user-font: var(--font-sans);
    
    /* Calculate derived values */
    --calc-accent-glow: var(--user-accent);
    --calc-border-radius: var(--user-radius);
}

/* ===== APPLY USER SETTINGS ===== */
:root {
    --color-accent: var(--user-accent);
    --color-accent-glow: var(--user-accent);
    --gradient-accent: linear-gradient(135deg, var(--user-accent) 0%, var(--user-accent2) 100%);
    --shadow-default: 0 4px 24px rgba(0, 0, 0, calc(0.2 * var(--user-shadow-intensity))), 
                     0 0 16px var(--calc-accent-glow);
    --shadow-glow: 0 0 20px var(--calc-accent-glow),
                   0 0 40px rgba(0, 0, 0, calc(0.1 * var(--user-shadow-intensity)));
    --opacity-ui: var(--user-opacity);
    --opacity-modal: calc(var(--user-opacity) + 0.02);
    --scrollbar-thumb: color-mix(in srgb, var(--user-accent) 60%, #456483);
    --scrollbar-thumb-hover: color-mix(in srgb, var(--user-accent) 80%, #5299e0);
    --font-active: var(--user-font, var(--font-sans));
}

/* ===== DYNAMIC RADIUS APPLICATION ===== */
.button, button, [role="button"] {
    border-radius: calc(var(--calc-border-radius) * 0.4);
}

.card, .modal, dialog {
    border-radius: calc(var(--calc-border-radius) * 0.8);
}

.surface {
    border-radius: calc(var(--calc-border-radius) * 0.5);
}

input, textarea, select {
    border-radius: calc(var(--calc-border-radius) * 0.3);
}

.badge {
    border-radius: calc(var(--calc-border-radius) * 0.6);
}

.progress {
    border-radius: calc(var(--calc-border-radius) * 1);
}

/* ===== BASE BODY STYLES ===== */
body {
    background: var(--color-bg);
    color: var(--color-text);
    font-family: var(--font-active);
    margin: 0;
    min-height: 100vh;
    transition: background var(--duration-normal), 
                color var(--duration-fast),
                font-family var(--duration-fast);
    position: relative;
    overflow-x: hidden;
}

/* Background pattern overlay */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        radial-gradient(circle at 20% 50%, var(--color-accent-dim) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, var(--color-accent-dim) 0%, transparent 50%),
        radial-gradient(circle at 40% 20%, var(--color-accent-dim) 0%, transparent 50%);
    opacity: 0.03;
    pointer-events: none;
    z-index: -1;
}

/* ===== SMOOTH TRANSITIONS ===== */
* {
    transition-property: background-color, color, border-color, box-shadow, opacity, filter, transform;
    transition-duration: var(--duration-fast);
    transition-timing-function: var(--ease-default);
}

/* Long transitions for theme changes */
body,
.side-nav,
.main-header,
.main-footer,
.card,
.surface {
    transition-duration: var(--duration-normal);
}

/* ===== LIGHT THEME OVERRIDES ===== */
[data-theme="light"] {
    --color-bg: #f8fafc;
    --color-surface: #ffffff;
    --color-surface-alt: #f1f5f9;
    --color-border: #e2e8f0;
    --color-text: #0f172a;
    --color-muted: #64748b;
    --gradient-surface: radial-gradient(circle at 50% 0%, #ffffff 0%, #f8fafc 100%);
    --scrollbar-track: #f1f5f9;
}

[data-theme="light"] body::before {
    opacity: 0.02;
}

/* ===== FONT FAMILY CLASSES ===== */
.font-sans { font-family: var(--font-sans); }
.font-mono { font-family: var(--font-mono); }
.font-game { font-family: var(--font-game); }
.font-display { font-family: var(--font-display); }

/* ===== THEME CUSTOMIZER SPECIFIC STYLES ===== */
.theme-preview-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    background: var(--gradient-accent);
    box-shadow: var(--shadow-glow), var(--shadow-epic);
    margin: var(--space-xl) auto;
    transition: all var(--duration-normal) var(--ease-bounce);
    position: relative;
    overflow: hidden;
    cursor: pointer;
}

.theme-preview-circle::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: conic-gradient(
        from 0deg at 50% 50%,
        transparent 0deg,
        rgba(255,255,255,0.1) 60deg,
        rgba(255,255,255,0.2) 120deg,
        rgba(255,255,255,0.1) 180deg,
        transparent 360deg
    );
    animation: rotate 3s linear infinite;
}

@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.theme-preview-circle:hover {
    transform: scale(1.1) rotate(5deg);
    box-shadow: var(--shadow-glow), 0 30px 60px -15px rgba(0,0,0,0.3);
}

.control-group {
    margin: var(--space-lg) 0;
    animation: fadeInUp 0.5s ease-out;
    animation-fill-mode: both;
}

.control-group:nth-child(1) { animation-delay: 0.1s; }
.control-group:nth-child(2) { animation-delay: 0.2s; }
.control-group:nth-child(3) { animation-delay: 0.3s; }
.control-group:nth-child(4) { animation-delay: 0.4s; }
.control-group:nth-child(5) { animation-delay: 0.5s; }

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.control-label {
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: var(--color-text);
    font-weight: 600;
    margin-bottom: var(--space-sm);
}

input[type="color"] {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid var(--color-border);
    transition: all var(--duration-fast);
    position: relative;
    overflow: hidden;
}

input[type="color"]:hover {
    transform: scale(1.1);
    border-color: var(--color-accent);
    box-shadow: var(--shadow-glow);
}

input[type="color"]:active {
    transform: scale(0.95);
}

input[type="range"] {
    width: 100%;
    height: 0.5rem;
    -webkit-appearance: none;
    appearance: none;
    background: var(--color-surface-alt);
    border-radius: var(--radius-full);
    outline: none;
    cursor: grab;
}

input[type="range"]:active {
    cursor: grabbing;
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 1.5rem;
    height: 1.5rem;
    background: var(--gradient-accent);
    cursor: grab;
    border-radius: 50%;
    box-shadow: var(--shadow-glow);
    transition: all var(--duration-fast);
    border: 2px solid var(--color-bg);
}

input[type="range"]::-webkit-slider-thumb:hover {
    transform: scale(1.2);
    box-shadow: var(--shadow-glow), var(--shadow-large);
}

input[type="range"]::-webkit-slider-thumb:active {
    cursor: grabbing;
    transform: scale(1.1);
}

input[type="range"]::-moz-range-thumb {
    width: 1.5rem;
    height: 1.5rem;
    background: var(--gradient-accent);
    cursor: grab;
    border-radius: 50%;
    box-shadow: var(--shadow-glow);
    transition: all var(--duration-fast);
    border: 2px solid var(--color-bg);
}

input[type="range"]::-moz-range-thumb:hover {
    transform: scale(1.2);
    box-shadow: var(--shadow-glow), var(--shadow-large);
}

input[type="range"]::-moz-range-thumb:active {
    cursor: grabbing;
    transform: scale(1.1);
}

.range-value {
    color: var(--color-accent);
    font-size: 0.875rem;
    font-family: var(--font-mono);
    font-weight: normal;
    min-width: 4ch;
    text-align: right;
}

/* ===== SPECIAL EFFECTS ===== */

/* Glow lines that follow borders */
@keyframes glow-line {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(200%);
    }
}

.card::after,
.modal::after {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(
        90deg,
        transparent,
        var(--color-accent),
        transparent
    );
    opacity: 0;
    z-index: -1;
    border-radius: inherit;
    transition: opacity var(--duration-normal);
}

.card:hover::after,
.modal[open]::after {
    opacity: 0.5;
    animation: glow-line 2s linear infinite;
}

/* ===== DEMO SECTION STYLES ===== */
.demo-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: var(--space-xl);
    margin-top: var(--space-2xl);
}

.demo-box {
    padding: var(--space-xl);
    height: 100%;
    display: flex;
    flex-direction: column;
}

.demo-box h4 {
    margin: 0 0 var(--space-lg) 0;
    color: var(--color-accent);
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    gap: var(--space-sm);
}

.demo-box h4::before {
    content: '';
    width: 3px;
    height: 1.5em;
    background: var(--gradient-accent);
    border-radius: var(--radius-full);
}

/* ===== ANIMATION UTILITIES ===== */
.animate-in {
    animation: fadeIn var(--duration-normal) ease-out;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.animate-slide-up {
    animation: slideUp var(--duration-normal) ease-out;
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-scale-in {
    animation: scaleIn var(--duration-normal) var(--ease-bounce);
}

@keyframes scaleIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* ===== RESPONSIVE ADJUSTMENTS ===== */
@media (max-width: 768px) {
    :root {
        --space-xs: 0.25rem;
        --space-sm: 0.375rem;
        --space-md: 0.75rem;
        --space-lg: 1rem;
        --space-xl: 1.5rem;
        --space-2xl: 2rem;
        --space-3xl: 3rem;
    }
    
    .theme-section {
        grid-template-columns: 1fr;
    }
    
    .demo-grid {
        grid-template-columns: 1fr;
        gap: var(--space-lg);
    }
    
    .control-group {
        margin: var(--space-md) 0;
    }
    
    .theme-preview-circle {
        width: 100px;
        height: 100px;
    }
    
    body {
        font-size: 0.95rem;
    }
}

/* Large screens */
@media (min-width: 1200px) {
    .demo-grid {
        grid-template-columns: repeat(3, 1fr);
    }
}

/* ===== LOADING STATES ===== */
[data-loading="true"] {
    position: relative;
    pointer-events: none;
}

[data-loading="true"]::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
    border-radius: inherit;
    display: flex;
    align-items: center;
    justify-content: center;
}

[data-loading="true"]::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 2rem;
    height: 2rem;
    border: 3px solid var(--color-surface);
    border-top-color: var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 1;
}

/* ===== FINAL TOUCHES ===== */

/* Ensure consistent box-sizing */
*, *::before, *::after {
    box-sizing: border-box;
}

/* Remove default margins and paddings where needed */
h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    margin-bottom: var(--space-md);
    font-weight: 700;
    letter-spacing: -0.025em;
}

p {
    margin-top: 0;
    margin-bottom: var(--space-md);
}

/* Links */
a {
    color: var(--color-accent);
    text-decoration: none;
    transition: all var(--duration-fast);
}

a:hover {
    text-decoration: underline;
    filter: brightness(1.2);
}

/* Code blocks */
code, pre {
    font-family: var(--font-mono);
    background: var(--color-surface-alt);
    border-radius: var(--radius-sm);
    font-size: 0.875em;
}

code {
    padding: 0.2em 0.4em;
}

pre {
    padding: var(--space-md);
    overflow-x: auto;
}

/* Tables */
table {
    width: 100%;
    border-collapse: collapse;
    background: var(--color-surface);
    border-radius: var(--radius-md);
    overflow: hidden;
}

th, td {
    padding: var(--space-sm) var(--space-md);
    text-align: left;
    border-bottom: 1px solid var(--color-border);
}

th {
    background: var(--color-surface-alt);
    font-weight: 600;
    color: var(--color-accent);
}

tr:last-child td {
    border-bottom: none;
}

tr:hover {
    background: var(--color-surface-alt);
}

/* Lists */
ul, ol {
    margin-top: 0;
    margin-bottom: var(--space-md);
    padding-left: var(--space-xl);
}

li {
    margin-bottom: var(--space-xs);
}

/* Blockquotes */
blockquote {
    margin: var(--space-lg) 0;
    padding: var(--space-md) var(--space-lg);
    border-left: 3px solid var(--color-accent);
    background: var(--color-surface-alt);
    border-radius: var(--radius-sm);
    font-style: italic;
}

/* Horizontal rules */
hr {
    border: none;
    height: 1px;
    background: var(--color-border);
    margin: var(--space-xl) 0;
}

/* Selection colors */
::selection {
    background: var(--color-accent);
    color: white;
}

/* Focus within helper */
.focus-within:focus-within {
    box-shadow: var(--shadow-glow);
    border-color: var(--color-accent);
}

/* The Grand Finale - Make it all smooth */
html {
    scroll-behavior: smooth;
    scroll-padding-top: 5rem;
}

/* And remember, with great theme power comes great theme responsibility! */

================
File: assets/css/variables.css
================
/* XRPG CSS Variables - The Foundation of Magic */

:root {
    /* Core Colors - The Palette of Power */
    --color-bg: #191c22;
    --color-surface: #232630;
    --color-surface-alt: #292c38;
    --color-accent: #5299e0;
    --color-accent-glow: rgba(82, 153, 224, 0.36);
    --color-accent-dim: rgba(82, 153, 224, 0.12);
    --color-border: #2c313a;
    --color-text: #f5f7fa;
    --color-muted: #8793b4;
    --color-success: #10b981;
    --color-warning: #f59e0b;
    --color-danger: #ef4444;
    --color-info: #3b82f6;
    
    /* Gradients - Visual Enchantments */
    --gradient-accent: linear-gradient(135deg, #329fff 0%, #81aaff 100%);
    --gradient-surface: radial-gradient(circle at 30% 30%, #232630 70%, #181a20 100%);
    --gradient-dark: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.1) 100%);
    --gradient-light: linear-gradient(180deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%);
    --gradient-glow: radial-gradient(circle at center, var(--color-accent-glow) 0%, transparent 70%);
    --gradient-epic: linear-gradient(135deg, #9333ea 0%, #6366f1 50%, #3b82f6 100%);
    --gradient-legendary: linear-gradient(135deg, #fbbf24 0%, #f97316 50%, #dc2626 100%);
    
    /* Shadows - Depth and Drama */
    --shadow-default: 0 4px 12px 0 var(--color-accent-glow), 0 1.5px 4px rgba(0,0,0,0.24);
    --shadow-glow: 0 0 20px 2px var(--color-accent-glow), 0 0 40px 4px var(--color-accent-dim);
    --shadow-subtle: 0 2px 4px rgba(0,0,0,0.1);
    --shadow-medium: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
    --shadow-large: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
    --shadow-epic: 0 20px 25px -5px rgba(0,0,0,0.15), 0 10px 10px -5px rgba(0,0,0,0.04);
    --shadow-inset: inset 0 2px 4px 0 rgba(0,0,0,0.06);
    --shadow-float: 0 0 0 1px rgba(0,0,0,0.05), 0 10px 40px -10px rgba(0,0,0,0.4);
    
    /* Opacities - Transparency Levels */
    --opacity-ui: 0.96;
    --opacity-modal: 0.98;
    --opacity-active: 1;
    --opacity-disabled: 0.56;
    --opacity-hover: 0.88;
    --opacity-ghost: 0.12;
    --opacity-faint: 0.04;
    
    /* Scrollbar - Smooth Scrolling Style */
    --scrollbar-thumb: #456483cc;
    --scrollbar-track: #1e222c66;
    --scrollbar-thumb-hover: #5299e0cc;
    
    /* Font Stacks - Typography Arsenal */
    --font-sans: system-ui, -apple-system, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
    --font-mono: 'Consolas', 'Monaco', 'Andale Mono', 'Ubuntu Mono', 'Courier New', monospace;
    --font-game: 'Georgia', 'Cambria', 'Times New Roman', Times, serif;
    --font-display: 'Arial Black', 'Avenir Next', 'Avenir', 'Impact', sans-serif;
    
    /* Timing Functions - Animation Curves */
    --ease-default: cubic-bezier(0.4, 0, 0.2, 1);
    --ease-in: cubic-bezier(0.4, 0, 1, 1);
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
    --ease-smooth: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    
    /* Durations - Animation Speeds */
    --duration-instant: 75ms;
    --duration-fast: 150ms;
    --duration-normal: 300ms;
    --duration-slow: 500ms;
    --duration-epic: 1000ms;
    
    /* Z-Index Layers - Stacking Order */
    --z-base: 1;
    --z-dropdown: 10;
    --z-sticky: 20;
    --z-fixed: 30;
    --z-modal-backdrop: 40;
    --z-modal: 50;
    --z-popover: 60;
    --z-tooltip: 70;
    --z-notification: 80;
    --z-max: 99;
    
    /* Spacing Scale - Consistent Gaps */
    --space-xs: 0.25rem;
    --space-sm: 0.5rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-2xl: 3rem;
    --space-3xl: 4rem;
    
    /* Border Radius Scale */
    --radius-sm: 0.25rem;
    --radius-md: 0.5rem;
    --radius-lg: 0.75rem;
    --radius-xl: 1rem;
    --radius-2xl: 1.5rem;
    --radius-full: 9999px;
    
    /* Blur Effects */
    --blur-sm: blur(4px);
    --blur-md: blur(8px);
    --blur-lg: blur(16px);
    --blur-xl: blur(24px);
}

/* Light Theme Overrides */
[data-theme="light"] {
    --color-bg: #f8fafc;
    --color-surface: #ffffff;
    --color-surface-alt: #f1f5f9;
    --color-accent: #3b82f6;
    --color-accent-glow: rgba(59, 130, 246, 0.3);
    --color-accent-dim: rgba(59, 130, 246, 0.08);
    --color-border: #e2e8f0;
    --color-text: #0f172a;
    --color-muted: #64748b;
    --gradient-accent: linear-gradient(135deg, #3b82f6 0%, #60a5fa 100%);
    --gradient-surface: radial-gradient(circle at 30% 30%, #ffffff 70%, #f8fafc 100%);
    --scrollbar-track: #f1f5f9;
    --scrollbar-thumb: #cbd5e1cc;
    --scrollbar-thumb-hover: #3b82f6cc;
    
    /* Adjust shadows for light theme */
    --shadow-default: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06), 0 0 0 1px rgba(0,0,0,0.05);
    --shadow-glow: 0 0 15px var(--color-accent-glow), 0 0 30px var(--color-accent-dim);
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
    :root {
        --color-border: #4a5568;
        --shadow-default: 0 0 0 2px var(--color-accent);
        --shadow-glow: 0 0 0 4px var(--color-accent);
    }
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
    :root {
        --duration-instant: 0ms;
        --duration-fast: 0ms;
        --duration-normal: 0ms;
        --duration-slow: 0ms;
        --duration-epic: 0ms;
    }
}

================
File: assets/js/passkey.js
================
/**
 * Modern Passkey Authentication System
 * Clean, efficient, and user-friendly
 */

class PasskeyAuth {
    constructor() {
        this.currentMode = 'login';
        this.isProcessing = false;
        this.init();
    }

    init() {
        // Wait for DOM to be ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupEventListeners());
        } else {
            this.setupEventListeners();
        }
    }

    setupEventListeners() {
        const modal = document.getElementById('auth-modal');
        if (!modal) return;

        const usernameInput = modal.querySelector('#username');
        const actionButton = modal.querySelector('#auth-action-btn');
        const switchButton = modal.querySelector('#auth-switch-btn');
        const closeButton = modal.querySelector('#auth-close-btn');

        // Setup button handlers
        if (actionButton) {
            actionButton.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleAuth();
            });
        }

        if (switchButton) {
            switchButton.addEventListener('click', (e) => {
                e.preventDefault();
                this.switchMode();
            });
        }

        if (closeButton) {
            closeButton.addEventListener('click', () => this.closeModal());
        }

        // Enter key support
        if (usernameInput) {
           

            // Clear errors when user types
            usernameInput.addEventListener('input', () => {
                this.clearStatus();
            });
        }

        // Close on backdrop click
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.closeModal();
            }
        });

        // ESC key support
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.open) {
                this.closeModal();
            }
        });
    }

    async handleAuth() {
        if (this.isProcessing) return;

        const username = this.getUsername();
        if (!this.validateUsername(username)) return;

        this.isProcessing = true;
        this.setButtonLoading(true);
        this.clearStatus();

        try {
            if (this.currentMode === 'register') {
                await this.register(username);
            } else {
                await this.login(username);
            }
        } catch (error) {
            console.error('Auth error:', error);
            this.showStatus('error', error.message || 'Authentication failed');
        } finally {
            this.isProcessing = false;
            this.setButtonLoading(false);
        }
    }

    async register(username) {
        this.showStatus('info', 'Starting registration...');

        // Step 1: Get registration options
        const optionsResponse = await this.fetchWithTimeout('/auth/register.php', {
            method: 'POST',
            body: new URLSearchParams({ username })
        });

        if (!optionsResponse.ok) {
            const error = await optionsResponse.json();
            throw new Error(error.error || 'Registration failed');
        }

        const options = await optionsResponse.json();
        this.prepareCredentialOptions(options);

        this.showStatus('info', 'Please complete the security key or biometric prompt...');

        // Step 2: Create credential
        const credential = await navigator.credentials.create({ publicKey: options });
        if (!credential) {
            throw new Error('No credential created');
        }

        this.showStatus('info', 'Saving registration...');

        // Step 3: Save credential
        const credentialData = this.formatCredentialForTransmission(credential);
        const saveResponse = await this.fetchWithTimeout('/auth/register.php', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(credentialData)
        });

        if (!saveResponse.ok) {
            const error = await saveResponse.json();
            throw new Error(error.error || 'Failed to save registration');
        }

        const result = await saveResponse.json();
        this.showStatus('success', `✅ Account created successfully! Welcome, ${result.username}!`);
        
        // Auto-switch to login mode after successful registration
        setTimeout(() => {
            this.currentMode = 'login';
            this.updateUI();
            this.clearStatus();
        }, 2000);
    }

    async login(username) {
        this.showStatus('info', 'Starting login...');

        // Step 1: Get authentication options
        const optionsResponse = await this.fetchWithTimeout('/auth/login.php', {
            method: 'POST',
            body: new URLSearchParams({ username })
        });

        if (!optionsResponse.ok) {
            const error = await optionsResponse.json();
            if (optionsResponse.status === 404) {
                this.showStatus('error', 'Username not found. Would you like to create an account?');
                // Auto-suggest switching to register mode
                setTimeout(() => {
                    this.currentMode = 'register';
                    this.updateUI();
                    this.showStatus('info', 'Switched to account creation mode');
                }, 3000);
                return;
            }
            throw new Error(error.error || 'Login failed');
        }

        const options = await optionsResponse.json();
        this.prepareCredentialOptions(options);

        this.showStatus('info', 'Please complete the security key or biometric prompt...');

        // Step 2: Get assertion
        const assertion = await navigator.credentials.get({ publicKey: options });
        if (!assertion) {
            throw new Error('No assertion created');
        }

        this.showStatus('info', 'Verifying login...');

        // Step 3: Verify assertion
        const assertionData = this.formatAssertionForTransmission(assertion);
        const verifyResponse = await this.fetchWithTimeout('/auth/login.php', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(assertionData)
        });

        if (!verifyResponse.ok) {
            const error = await verifyResponse.json();
            throw new Error(error.error || 'Login verification failed');
        }

        const result = await verifyResponse.json();
        this.showStatus('success', '✅ Login successful! Redirecting...');
        
        // Redirect after successful login
        setTimeout(() => {
            window.location.reload();
        }, 1500);
    }

    // Helper methods
    getUsername() {
        const input = document.querySelector('#username');
        return input ? input.value.trim() : '';
    }

    validateUsername(username) {
        if (!username) {
            this.showStatus('error', 'Please enter a username');
            this.focusUsername();
            return false;
        }
        if (username.length < 3) {
            this.showStatus('error', 'Username must be at least 3 characters');
            this.focusUsername();
            return false;
        }
        if (username.length > 50) {
            this.showStatus('error', 'Username must be less than 50 characters');
            this.focusUsername();
            return false;
        }
        return true;
    }

    focusUsername() {
        const input = document.querySelector('#username');
        if (input) input.focus();
    }

    prepareCredentialOptions(options) {
        // Convert base64url to Uint8Array for browser API
        if (options.challenge) {
            options.challenge = this.base64urlToUint8Array(options.challenge);
        }
        if (options.user?.id) {
            options.user.id = this.base64urlToUint8Array(options.user.id);
        }
        if (options.allowCredentials) {
            options.allowCredentials = options.allowCredentials.map(cred => ({
                ...cred,
                id: this.base64urlToUint8Array(cred.id)
            }));
        }
    }

    formatCredentialForTransmission(credential) {
        return {
            id: credential.id,
            rawId: this.arrayBufferToBase64url(credential.rawId),
            type: credential.type,
            response: {
                attestationObject: this.arrayBufferToBase64url(credential.response.attestationObject),
                clientDataJSON: this.arrayBufferToBase64url(credential.response.clientDataJSON)
            }
        };
    }

    formatAssertionForTransmission(assertion) {
        return {
            id: assertion.id,
            rawId: this.arrayBufferToBase64url(assertion.rawId),
            type: assertion.type,
            response: {
                authenticatorData: this.arrayBufferToBase64url(assertion.response.authenticatorData),
                clientDataJSON: this.arrayBufferToBase64url(assertion.response.clientDataJSON),
                signature: this.arrayBufferToBase64url(assertion.response.signature),
                userHandle: assertion.response.userHandle ? 
                    this.arrayBufferToBase64url(assertion.response.userHandle) : null
            }
        };
    }

    // Encoding utilities
    base64urlToUint8Array(str) {
        if (!str) return new Uint8Array();
        // Convert base64url to base64
        str = str.replace(/-/g, '+').replace(/_/g, '/');
        // Add padding
        while (str.length % 4) str += '=';
        
        const binary = atob(str);
        const bytes = new Uint8Array(binary.length);
        for (let i = 0; i < binary.length; i++) {
            bytes[i] = binary.charCodeAt(i);
        }
        return bytes;
    }

    arrayBufferToBase64url(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }

    // UI Management
    switchMode() {
        this.currentMode = this.currentMode === 'login' ? 'register' : 'login';
        this.updateUI();
        this.clearStatus();
        this.focusUsername();
    }

    updateUI() {
        const title = document.querySelector('#auth-title');
        const subtitle = document.querySelector('#auth-subtitle');
        const actionButton = document.querySelector('#auth-action-btn');
        const switchButton = document.querySelector('#auth-switch-btn');

        if (this.currentMode === 'register') {
            if (title) title.textContent = 'Create Account';
            if (subtitle) subtitle.textContent = 'Join XRPG with secure passkey authentication';
            if (actionButton) {
                actionButton.innerHTML = '<span class="passkey-icon">🆕</span>Create Account';
            }
            if (switchButton) switchButton.textContent = 'Already have an account? Sign in';
        } else {
            if (title) title.textContent = 'Welcome Back';
            if (subtitle) subtitle.textContent = 'Sign in to continue your adventure';
            if (actionButton) {
                actionButton.innerHTML = '<span class="passkey-icon">🔑</span>Sign In';
            }
            if (switchButton) switchButton.textContent = "Don't have an account? Create one";
        }
    }

    setButtonLoading(loading) {
        const button = document.querySelector('#auth-action-btn');
        if (!button) return;

        if (loading) {
            button.classList.add('auth-button-loading');
            button.disabled = true;
        } else {
            button.classList.remove('auth-button-loading');
            button.disabled = false;
        }
    }

    showStatus(type, message) {
        let statusEl = document.querySelector('#auth-status');
        
        if (!statusEl) {
            statusEl = document.createElement('div');
            statusEl.id = 'auth-status';
            statusEl.className = 'auth-status';
            
         const form = modal.querySelector('#auth-form');

			if (form) {
			  form.addEventListener('submit', e => {
				e.preventDefault();         // ⬅️ stop the dialog from "submitting"
				if (!this.isProcessing) {
				  this.handleAuth();        // ⬅️ run your authentication
				}
			  });
			}
        }

        statusEl.className = `auth-status auth-status-${type}`;
        statusEl.textContent = message;
        statusEl.style.display = 'block';

        // Auto-clear success messages
        if (type === 'success') {
            setTimeout(() => this.clearStatus(), 5000);
        }

        console.log(`Auth ${type.toUpperCase()}: ${message}`);
    }

    clearStatus() {
        const statusEl = document.querySelector('#auth-status');
        if (statusEl) {
            statusEl.style.display = 'none';
        }
    }

    closeModal() {
        const modal = document.getElementById('auth-modal');
        if (modal && modal.close) {
            modal.close();
        }
        this.clearStatus();
        this.isProcessing = false;
        this.setButtonLoading(false);
    }

    async fetchWithTimeout(url, options, timeout = 10000) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('Request timed out');
            }
            throw error;
        }
    }
}

// Initialize when DOM is ready
const passkeyAuth = new PasskeyAuth();

// Expose global functions for backward compatibility
window.registerPasskey = (username) => passkeyAuth.register(username);
window.loginPasskey = (username) => passkeyAuth.login(username);

================
File: assets/js/theme.js
================
// XRPG Enhanced Theme System with Database Support - FIXED VERSION

// In-memory fallback store for guests when localStorage isn't available
const themeMemoryStore = {
    theme: 'dark',
    font: 'sans',
    accent_primary: '#5299e0',
    accent_secondary: '#81aaff',
    radius: '18',
    shadow_intensity: '0.36',
    opacity: '0.96',
    nav_expanded: false
};

// Safe storage accessor functions to handle environments where localStorage isn't available
function getStoredValue(key, defaultValue) {
    if (isAuthenticated()) {
        return null; // Authenticated users use database values
    }
    
    try {
        const value = localStorage.getItem(key);
        return value !== null ? value : defaultValue;
    } catch (e) {
        // Fallback to memory store if localStorage is unavailable
        return themeMemoryStore[key] !== undefined ? themeMemoryStore[key] : defaultValue;
    }
}

function setStoredValue(key, value) {
    if (isAuthenticated()) {
        return; // Authenticated users use database
    }
    
    try {
        localStorage.setItem(key, value);
    } catch (e) {
        // Fallback to memory store if localStorage is unavailable
        themeMemoryStore[key] = value;
    }
}

// Check if user is authenticated (look for user data in window or DOM)
function isAuthenticated() {
    // This will be true if we're on a player page with user data
    return typeof userPreferences !== 'undefined' || document.body.classList.contains('authenticated');
}

// Apply theme mode (light/dark)
function setTheme(theme) {
    // Set the data-theme attribute (critical for CSS selectors)
    document.documentElement.setAttribute('data-theme', theme);
    
    // Store theme setting for guests
    setStoredValue('theme', theme);
    
    // Update theme-dependent CSS variables
    applyThemeDependentStyles(theme);
    
    // Update theme toggle button if it exists
    const themeBtn = document.getElementById('theme-toggle');
    if (themeBtn) {
        themeBtn.textContent = theme === 'dark' ? '🌞' : '🌙';
    }
    
    // Re-apply accent colors to ensure proper contrast
    const primary = document.getElementById('accent-primary')?.value || 
                    (isAuthenticated() && userPreferences ? userPreferences.accent_color : getStoredValue('accent_primary', '#5299e0'));
    const secondary = document.getElementById('accent-secondary')?.value || 
                      (isAuthenticated() && userPreferences ? userPreferences.accent_secondary : getStoredValue('accent_secondary', '#81aaff'));
    
    if (primary && secondary) {
        setAccentColors(primary, secondary);
    }
}

// Apply theme-dependent CSS variables
function applyThemeDependentStyles(theme) {
    // Define color values for each theme
    const themeColors = {
        dark: {
            '--color-background': '#121418',
            '--color-surface': '#1e2128',
            '--color-surface-alt': '#282c34',
            '--color-text': '#e9ecef',
            '--color-text-secondary': '#adb5bd',
            '--color-text-muted': '#868e96',
            '--color-border': '#343a40'
        },
        light: {
            '--color-background': '#f8f9fa',
            '--color-surface': '#ffffff',
            '--color-surface-alt': '#f1f3f5',
            '--color-text': '#212529',
            '--color-text-secondary': '#495057',
            '--color-text-muted': '#6c757d',
            '--color-border': '#dee2e6'
        }
    };
    
    // Apply the colors for the selected theme
    const colors = themeColors[theme] || themeColors.dark;
    for (const [prop, value] of Object.entries(colors)) {
        updateCSSVariable(prop, value);
    }
}

// Update CSS variable with better error handling
function updateCSSVariable(varName, value) {
    try {
        document.documentElement.style.setProperty(varName, value);
    } catch (e) {
        console.error(`Failed to set CSS variable ${varName}:`, e);
    }
}

// Set font family
function setFont(fontKey) {
    updateCSSVariable('--user-font', `var(--font-${fontKey})`);
    setStoredValue('font', fontKey);
}

// Color contrast checking
function getLuminance(hex) {
    // Handle missing or invalid hex colors
    if (!hex || !hex.startsWith('#') || hex.length !== 7) {
        console.warn('Invalid hex color:', hex);
        return 0.5; // Return middle luminance as fallback
    }
    
    try {
        const rgb = parseInt(hex.slice(1), 16);
        const r = (rgb >> 16) & 0xff;
        const g = (rgb >> 8) & 0xff;
        const b = (rgb >> 0) & 0xff;
        
        const sRGB = [r, g, b].map(val => {
            val = val / 255;
            return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
        });
        
        return 0.2126 * sRGB[0] + 0.7152 * sRGB[1] + 0.0722 * sRGB[2];
    } catch (e) {
        console.error('Error calculating luminance:', e);
        return 0.5; // Return middle luminance as fallback
    }
}

function getContrastRatio(color1, color2) {
    const l1 = getLuminance(color1);
    const l2 = getLuminance(color2);
    const lighter = Math.max(l1, l2);
    const darker = Math.min(l1, l2);
    return (lighter + 0.05) / (darker + 0.05);
}

function ensureContrast(accentColor) {
    // Skip if invalid color or no color provided
    if (!accentColor || !accentColor.startsWith('#')) {
        return;
    }
    
    const theme = document.documentElement.getAttribute('data-theme') || 'dark';
    const bgColor = theme === 'dark' ? '#191c22' : '#f5f7fa';
    const textColor = theme === 'dark' ? '#f5f7fa' : '#1d2435';
    
    // Check contrast with background
    const bgContrast = getContrastRatio(accentColor, bgColor);
    const textContrast = getContrastRatio(accentColor, textColor);
    
    // Warn if contrast is too low
    const warningEl = document.getElementById('contrast-warning');
    if (warningEl) {
        if (bgContrast < 3 || textContrast < 2) {
            warningEl.style.display = 'block';
        } else {
            warningEl.style.display = 'none';
        }
    }
}

// Set accent colors and update related variables
function setAccentColors(primary, secondary) {
    // Validate inputs - use defaults if invalid
    if (!primary || !primary.startsWith('#')) {
        primary = '#5299e0';
    }
    if (!secondary || !secondary.startsWith('#')) {
        secondary = '#81aaff';
    }
    
    updateCSSVariable('--user-accent', primary);
    updateCSSVariable('--color-accent', primary); // Added for compatibility
    updateCSSVariable('--user-accent2', secondary);
    updateCSSVariable('--color-accent-secondary', secondary); // Added for compatibility
    
    // Update gradient
    updateCSSVariable('--gradient-accent', `linear-gradient(135deg, ${primary}, ${secondary})`);
    
    // Calculate and set glow with opacity
    try {
        const r = parseInt(primary.slice(1,3), 16);
        const g = parseInt(primary.slice(3,5), 16);
        const b = parseInt(primary.slice(5,7), 16);
        const shadowIntensity = getComputedStyle(document.documentElement).getPropertyValue('--user-shadow-intensity').trim() || 
                               document.documentElement.style.getPropertyValue('--user-shadow-intensity') || 
                               '0.36';
        
        updateCSSVariable('--calc-accent-glow', `rgba(${r}, ${g}, ${b}, ${shadowIntensity})`);
        updateCSSVariable('--shadow-glow', `0 0 20px rgba(${r}, ${g}, ${b}, ${shadowIntensity})`);
    } catch (e) {
        console.error('Error calculating glow:', e);
    }
    
    // Check contrast
    ensureContrast(primary);
    
    // Store for guests
    setStoredValue('accent_primary', primary);
    setStoredValue('accent_secondary', secondary);
}

// Set border radius
function setRadius(value) {
    updateCSSVariable('--user-radius', value + 'px');
    setStoredValue('radius', value);
}

// Set shadow intensity and update related shadows
function setShadowIntensity(value) {
    updateCSSVariable('--user-shadow-intensity', value);
    
    // Update default shadow
    updateCSSVariable('--shadow-default', `0 4px 8px rgba(0, 0, 0, ${value})`);
    
    // Re-apply accent colors to update glow
    const primary = document.getElementById('accent-primary')?.value || 
                   (isAuthenticated() && userPreferences ? userPreferences.accent_color : getStoredValue('accent_primary', '#5299e0'));
    const secondary = document.getElementById('accent-secondary')?.value || 
                      (isAuthenticated() && userPreferences ? userPreferences.accent_secondary : getStoredValue('accent_secondary', '#81aaff'));
    
    if (primary && secondary) {
        setAccentColors(primary, secondary);
    }
    
    setStoredValue('shadow_intensity', value);
}

// Set UI opacity without breaking theme
function setOpacity(value) {
    updateCSSVariable('--user-opacity', value);
    setStoredValue('opacity', value);
    
    // IMPORTANT: Make sure theme-specific colors aren't affected
    // Re-apply the current theme to ensure consistent appearance
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    applyThemeDependentStyles(currentTheme);
}

// Load theme settings for guests (from localStorage or memory fallback)
function loadGuestThemeSettings() {
    // Load theme first to ensure proper color context
    const theme = getStoredValue('theme', 'dark');
    setTheme(theme);
    
    // Load font
    const font = getStoredValue('font', 'sans');
    setFont(font);
    
    // Load colors
    const primaryAccent = getStoredValue('accent_primary', '#5299e0');
    const secondaryAccent = getStoredValue('accent_secondary', '#81aaff');
    setAccentColors(primaryAccent, secondaryAccent);
    
    // Load other settings
    const radius = getStoredValue('radius', '18');
    setRadius(radius);
    
    const shadowIntensity = getStoredValue('shadow_intensity', '0.36');
    setShadowIntensity(shadowIntensity);
    
    const opacity = getStoredValue('opacity', '0.96');
    setOpacity(opacity);
    
    // Update UI controls if they exist
    updateUIControls(theme, primaryAccent, secondaryAccent, radius, shadowIntensity, opacity, font);
}

// Load theme settings for authenticated users (from database via PHP)
function loadAuthenticatedThemeSettings() {
    if (typeof userPreferences === 'undefined') {
        console.warn('User preferences not found, falling back to guest settings');
        loadGuestThemeSettings();
        return;
    }
    
    // Apply theme mode first
    setTheme(userPreferences.theme_mode);
    
    // Apply font
    setFont(userPreferences.font_family);
    
    // Apply colors
    setAccentColors(userPreferences.accent_color, userPreferences.accent_secondary);
    
    // Apply visual effects in the correct order
    setRadius(userPreferences.border_radius);
    setShadowIntensity(userPreferences.shadow_intensity);
    setOpacity(userPreferences.ui_opacity);
    
    // Update UI controls
    updateUIControls(
        userPreferences.theme_mode, 
        userPreferences.accent_color, 
        userPreferences.accent_secondary, 
        userPreferences.border_radius, 
        userPreferences.shadow_intensity, 
        userPreferences.ui_opacity, 
        userPreferences.font_family
    );
}

// Update UI controls with current theme settings
function updateUIControls(theme, primary, secondary, radius, shadow, opacity, font) {
    // Theme toggle button
    const themeBtn = document.getElementById('theme-toggle');
    if (themeBtn) themeBtn.textContent = theme === 'dark' ? '🌞' : '🌙';
    
    // Theme toggle checkbox
    const themeToggle = document.getElementById('theme-mode-toggle');
    if (themeToggle) themeToggle.checked = theme === 'light';
    
    // Color pickers
    const primaryPicker = document.getElementById('accent-primary');
    if (primaryPicker) primaryPicker.value = primary;
    
    const secondaryPicker = document.getElementById('accent-secondary');
    if (secondaryPicker) secondaryPicker.value = secondary;
    
    // Sliders
    const radiusSlider = document.getElementById('radius-slider');
    if (radiusSlider) {
        radiusSlider.value = radius;
        const radiusValue = document.getElementById('radius-value');
        if (radiusValue) radiusValue.textContent = radius + 'px';
    }
    
    const shadowSlider = document.getElementById('shadow-slider');
    if (shadowSlider) {
        shadowSlider.value = shadow;
        const shadowValue = document.getElementById('shadow-value');
        if (shadowValue) shadowValue.textContent = shadow;
    }
    
    const opacitySlider = document.getElementById('opacity-slider');
    if (opacitySlider) {
        opacitySlider.value = opacity;
        const opacityValue = document.getElementById('opacity-value');
        if (opacityValue) opacityValue.textContent = opacity;
    }
    
    // Font selector
    const fontSelect = document.getElementById('font-select');
    if (fontSelect) fontSelect.value = font;
}

// Modal system
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.showModal();
        // Close on backdrop click
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.close();
            }
        });
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.close();
}

// Navigation menu
function toggleNav() {
    const nav = document.querySelector('.side-nav');
    if (nav) {
        nav.classList.toggle('expanded');
        setStoredValue('nav_expanded', nav.classList.contains('expanded'));
    }
}

// Initialize on load
document.addEventListener('DOMContentLoaded', () => {
    // Add switch styles for theme toggle if not already present
    addSwitchStyles();
    
    // Load theme settings based on authentication status
    if (isAuthenticated()) {
        loadAuthenticatedThemeSettings();
    } else {
        loadGuestThemeSettings();
    }
    
    // Check if nav should be expanded
    const navExpanded = getStoredValue('nav_expanded', 'false') === 'true';
    if (navExpanded) {
        document.querySelector('.side-nav')?.classList.add('expanded');
    }
    
    // Theme toggle
    document.getElementById('theme-toggle')?.addEventListener('click', function() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        // Update theme
        setTheme(newTheme);
        
        // Update theme toggle checkbox if it exists
        const themeToggle = document.getElementById('theme-mode-toggle');
        if (themeToggle) {
            themeToggle.checked = newTheme === 'light';
        }
        
        // Update user preferences if authenticated
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.theme_mode = newTheme;
        }
    });
    
    // Theme toggle checkbox
    document.getElementById('theme-mode-toggle')?.addEventListener('change', function() {
        const newTheme = this.checked ? 'light' : 'dark';
        
        // Update theme
        setTheme(newTheme);
        
        // Update user preferences if authenticated
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.theme_mode = newTheme;
        }
    });
    
    // Font selector
    document.getElementById('font-select')?.addEventListener('change', function() {
        setFont(this.value);
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.font_family = this.value;
        }
    });
    
    // Color pickers
    document.getElementById('accent-primary')?.addEventListener('input', function() {
        const secondary = document.getElementById('accent-secondary')?.value || 
                         (isAuthenticated() && userPreferences ? userPreferences.accent_secondary : getStoredValue('accent_secondary', '#81aaff'));
        setAccentColors(this.value, secondary);
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.accent_color = this.value;
        }
    });
    
    document.getElementById('accent-secondary')?.addEventListener('input', function() {
        const primary = document.getElementById('accent-primary')?.value || 
                       (isAuthenticated() && userPreferences ? userPreferences.accent_color : getStoredValue('accent_primary', '#5299e0'));
        setAccentColors(primary, this.value);
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.accent_secondary = this.value;
        }
    });
    
    // Sliders with live value display
    document.getElementById('radius-slider')?.addEventListener('input', function() {
        setRadius(this.value);
        const valueEl = document.getElementById('radius-value');
        if (valueEl) valueEl.textContent = this.value + 'px';
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.border_radius = parseInt(this.value);
        }
    });
    
    document.getElementById('shadow-slider')?.addEventListener('input', function() {
        setShadowIntensity(this.value);
        const valueEl = document.getElementById('shadow-value');
        if (valueEl) valueEl.textContent = this.value;
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.shadow_intensity = parseFloat(this.value);
        }
    });
    
    document.getElementById('opacity-slider')?.addEventListener('input', function() {
        setOpacity(this.value);
        const valueEl = document.getElementById('opacity-value');
        if (valueEl) valueEl.textContent = this.value;
        if (isAuthenticated() && typeof userPreferences !== 'undefined') {
            userPreferences.ui_opacity = parseFloat(this.value);
        }
    });
    
    // Navigation toggle
    document.querySelector('.side-nav-toggle')?.addEventListener('click', toggleNav);
    
    // Modal close buttons
    document.querySelectorAll('[data-close-modal]').forEach(btn => {
        btn.addEventListener('click', () => {
            const modal = btn.closest('dialog');
            if (modal) modal.close();
        });
    });
    
    // ESC key to close modals
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            document.querySelectorAll('dialog[open]').forEach(modal => modal.close());
        }
    });
});

// Add CSS for toggle switches
function addSwitchStyles() {
    if (document.getElementById('switch-styles')) return;
    
    const style = document.createElement('style');
    style.id = 'switch-styles';
    style.textContent = `
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }
        
        input:checked + .slider {
            background-color: var(--color-accent);
        }
        
        input:focus + .slider {
            box-shadow: 0 0 1px var(--color-accent);
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .slider.round {
            border-radius: 34px;
        }
        
        .slider.round:before {
            border-radius: 50%;
        }
    `;
    document.head.appendChild(style);
}

// Load updates from log file (for landing page)
async function loadUpdates() {
    try {
        const response = await fetch('updates.log');
        const text = await response.text();
        const lines = text.trim().split('\n').slice(-5).reverse(); // Last 5 updates
        
        const container = document.getElementById('updates-container');
        if (!container) return;
        
        if (lines.length === 0 || lines[0] === '') {
            container.innerHTML = `
                <div class="update-entry">
                    <span class="update-time">Now</span>
                    <span class="update-emoji">🎮</span>
                    <span class="update-blurb">Welcome to XRPG! Create an account to get started.</span>
                </div>
            `;
            return;
        }
        
        container.innerHTML = lines.map(line => {
            const parts = line.split('|');
            if (parts.length >= 3) {
                const [timestamp, emoji, message] = parts;
                const date = new Date(timestamp);
                const timeStr = date.toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    hour12: false 
                });
                
                return `
                    <div class="update-entry">
                        <span class="update-time">${timeStr}</span>
                        <span class="update-emoji">${emoji}</span>
                        <span class="update-blurb">${message}</span>
                    </div>
                `;
            } else {
                return `
                    <div class="update-entry">
                        <span class="update-time">Recent</span>
                        <span class="update-emoji">📝</span>
                        <span class="update-blurb">${line}</span>
                    </div>
                `;
            }
        }).join('');
    } catch (e) {
        console.error('Could not load updates:', e);
        const container = document.getElementById('updates-container');
        if (container) {
            container.innerHTML = `
                <div class="update-entry">
                    <span class="update-time">Now</span>
                    <span class="update-emoji">🎮</span>
                    <span class="update-blurb">Welcome to XRPG! Your adventure awaits.</span>
                </div>
            `;
        }
    }
}

================
File: auth/login.php
================
<?php
// /auth/login.php - Enhanced login with rate limiting and security
require_once __DIR__ . '/../config/db.php';
$config = require __DIR__ . '/../config/environment.php';
require_once __DIR__ . '/../thirdparty/vendor/autoload.php';
require_once __DIR__ . '/RateLimiter.php';

use Webauthn\PublicKeyCredentialRequestOptions;
use Webauthn\PublicKeyCredentialDescriptor;
use Webauthn\PublicKeyCredentialLoader;
use Webauthn\AuthenticatorAssertionResponseValidator;
use Webauthn\PublicKeyCredentialSource;
use Webauthn\TrustPath\EmptyTrustPath;

session_start();
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, PUT, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Initialize rate limiter
$rateLimiter = new RateLimiter($pdo);
$clientIP = RateLimiter::getClientIP();

function logError($message, $details = '') {
    error_log("WebAuthn Login Error: $message " . ($details ? "Details: $details" : ""));
}

function sendError($code, $message, $details = '', $retryAfter = null) {
    logError($message, $details);
    http_response_code($code);
    $response = ['error' => $message, 'details' => $details];
    if ($retryAfter) {
        $response['retry_after'] = $retryAfter;
        header("Retry-After: $retryAfter");
    }
    echo json_encode($response);
    exit;
}

// Convert base64url string to binary data
function base64urlToBinary($data) {
    $data = str_replace(['-', '_'], ['+', '/'], $data);
    while (strlen($data) % 4) {
        $data .= '=';
    }
    return base64_decode($data);
}

// Convert binary data to base64url string
function binaryToBase64url($data) {
    return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

// Enhanced credential repository with security logging
class SecureCredentialRepository implements \Webauthn\PublicKeyCredentialSourceRepository {
    private $user;
    private $pdo;
    private $ip;
    
    public function __construct($user, $pdo, $ip) {
        $this->user = $user;
        $this->pdo = $pdo;
        $this->ip = $ip;
    }
    
    public function findOneByCredentialId(string $publicKeyCredentialId): ?\Webauthn\PublicKeyCredentialSource {
        $incomingCredentialIdBase64url = binaryToBase64url($publicKeyCredentialId);
        
        if ($incomingCredentialIdBase64url === $this->user['passkey_id']) {
            try {
                $aaguid = null;
                if (class_exists('Symfony\Component\Uid\Uuid')) {
                    try {
                        $aaguid = \Symfony\Component\Uid\Uuid::v4();
                    } catch (Exception $e) {
                        $aaguid = null;
                    }
                }
                
                // Log successful credential lookup
                $this->logAuthEvent('credential_found', 'Passkey credential found for login');
                
                return new \Webauthn\PublicKeyCredentialSource(
                    $publicKeyCredentialId,
                    'public-key',
                    [],
                    'none',
                    new EmptyTrustPath(),
                    $aaguid,
                    $this->user['passkey_public_key'],
                    base64_decode($this->user['user_id']),
                    0
                );
                
            } catch (Exception $e) {
                error_log("Failed to create PublicKeyCredentialSource: " . $e->getMessage());
                $this->logAuthEvent('credential_error', 'Failed to create credential source: ' . $e->getMessage());
                return null;
            }
        }
        
        $this->logAuthEvent('credential_not_found', 'Passkey credential not found');
        return null;
    }
    
    public function findAllForUserEntity(\Webauthn\PublicKeyCredentialUserEntity $publicKeyCredentialUserEntity): array {
        return [];
    }
    
    public function saveCredentialSource(\Webauthn\PublicKeyCredentialSource $publicKeyCredentialSource): void {
        // Not needed for login
    }
    
    private function logAuthEvent($eventType, $description) {
        try {
            $stmt = $this->pdo->prepare('
                INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
                VALUES (?, ?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $this->user['id'],
                $this->user['username'],
                $eventType,
                $description,
                $this->ip,
                $_SERVER['HTTP_USER_AGENT'] ?? null
            ]);
        } catch (Exception $e) {
            error_log("Failed to log auth event: " . $e->getMessage());
        }
    }
}

// STEP 1: Generate login options
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        $username = trim($_POST['username'] ?? '');
        
        // Check rate limits first (before revealing if user exists)
        $rateCheck = $rateLimiter->checkRateLimit('login', $clientIP, $username);
        if (!$rateCheck['allowed']) {
            $message = match($rateCheck['reason']) {
                'temporarily_blocked' => 'Too many login attempts. Please try again later.',
                'too_many_attempts' => 'Login temporarily blocked due to multiple failures.',
                default => 'Login rate limit exceeded.'
            };
            sendError(429, $message, '', $rateCheck['retry_after'] ?? null);
        }
        
        // Check for suspicious activity
        if ($rateLimiter->detectSuspiciousActivity($clientIP, $username)) {
            sendError(429, 'Suspicious activity detected. Please try again later.', '', 1800);
        }
        
        if (!$username) {
            sendError(400, 'Missing username');
        }

        // Validate username format (but don't reveal if it exists yet)
        if (strlen($username) < 3 || strlen($username) > 50 || !preg_match('/^[a-zA-Z0-9_-]+$/', $username)) {
            sendError(400, 'Invalid username format');
        }

        $stmt = $pdo->prepare('SELECT * FROM users WHERE username = ?');
        $stmt->execute([$username]);
        $user = $stmt->fetch();
        
        if (!$user) {
            // Log failed attempt but don't reveal user doesn't exist
            try {
                $stmt = $pdo->prepare('
                    INSERT INTO auth_log (username, event_type, description, ip_addr, user_agent) 
                    VALUES (?, ?, ?, ?, ?)
                ');
                $stmt->execute([
                    $username,
                    'login_failed',
                    'Login attempt for non-existent user',
                    $clientIP,
                    $_SERVER['HTTP_USER_AGENT'] ?? null
                ]);
            } catch (Exception $e) {
                error_log("Failed to log failed login: " . $e->getMessage());
            }
            
            sendError(404, 'User not found');
        }

        // Create credential descriptor
        $credentialIdBinary = base64urlToBinary($user['passkey_id']);
        $allowCredentials = [
            new PublicKeyCredentialDescriptor(
                'public-key',
                $credentialIdBinary
            )
        ];

        // Generate challenge (binary first, then base64url for transmission)
        $challengeBinary = random_bytes(32);
        $challengeBase64url = rtrim(strtr(base64_encode($challengeBinary), '+/', '-_'), '=');
        
        // Store in session with enhanced security
        $_SESSION['login_challenge'] = $challengeBase64url;
        $_SESSION['login_user_id'] = $user['id'];
        $_SESSION['login_username'] = $user['username'];
        $_SESSION['login_expires'] = time() + 300; // 5 minute expiration
        $_SESSION['login_ip'] = $clientIP; // Prevent session hijacking
        $_SESSION['login_user_agent_hash'] = hash('sha256', $_SERVER['HTTP_USER_AGENT'] ?? '');

        // Create request options with binary challenge
        $requestOptions = new PublicKeyCredentialRequestOptions($challengeBinary);
        
        $requestOptions = $requestOptions
            ->allowCredentials(...$allowCredentials)
            ->setTimeout(60000)
            ->setRpId($config['rp_id'])
            ->setUserVerification('discouraged');

        $_SESSION['login_request_options'] = serialize($requestOptions);
        
        // Log login attempt start
        try {
            $stmt = $pdo->prepare('
                INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
                VALUES (?, ?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $user['id'],
                $user['username'],
                'login_start',
                'Login challenge generated',
                $clientIP,
                $_SERVER['HTTP_USER_AGENT'] ?? null
            ]);
        } catch (Exception $e) {
            error_log("Failed to log login start: " . $e->getMessage());
        }
        
        echo json_encode([
            'challenge' => $challengeBase64url,
            'allowCredentials' => array_map(function($cred) {
                return [
                    'type' => $cred->getType(),
                    'id' => binaryToBase64url($cred->getId())
                ];
            }, $allowCredentials),
            'timeout' => 60000,
            'rpId' => $config['rp_id'],
            'userVerification' => 'discouraged'
        ]);
        exit;

    } catch (Exception $e) {
        sendError(500, 'Failed to generate login options', $e->getMessage());
    }
}

// STEP 2: Validate login
if ($_SERVER['REQUEST_METHOD'] === 'PUT') {
    try {
        // Enhanced session validation
        if (!isset($_SESSION['login_expires']) || $_SESSION['login_expires'] < time()) {
            sendError(400, 'Login session expired');
        }
        
        if (!isset($_SESSION['login_ip']) || $_SESSION['login_ip'] !== $clientIP) {
            sendError(400, 'Session IP mismatch - possible security issue');
        }
        
        $currentUserAgentHash = hash('sha256', $_SERVER['HTTP_USER_AGENT'] ?? '');
        if (!isset($_SESSION['login_user_agent_hash']) || 
            $_SESSION['login_user_agent_hash'] !== $currentUserAgentHash) {
            sendError(400, 'Session user agent mismatch - possible security issue');
        }
        
        $input = json_decode(file_get_contents('php://input'), true);
        if (!$input) {
            sendError(400, 'Invalid JSON input');
        }

        $challenge = $_SESSION['login_challenge'] ?? null;
        $userId = $_SESSION['login_user_id'] ?? null;
        $username = $_SESSION['login_username'] ?? null;
        $requestOptions = isset($_SESSION['login_request_options']) ? 
            unserialize($_SESSION['login_request_options']) : null;

        if (!$challenge || !$userId || !$requestOptions || !$username) {
            sendError(400, 'Session expired or invalid');
        }

        $stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?');
        $stmt->execute([$userId]);
        $user = $stmt->fetch();
        if (!$user) {
            sendError(404, 'User not found');
        }

        // Load credential
        $attestationStatementSupportManager = new \Webauthn\AttestationStatement\AttestationStatementSupportManager();
        $attestationObjectLoader = new \Webauthn\AttestationStatement\AttestationObjectLoader($attestationStatementSupportManager);
        $credentialLoader = new PublicKeyCredentialLoader($attestationObjectLoader);
        $credential = $credentialLoader->loadArray($input);

        // Create repository and validator with enhanced security
        $credentialRepository = new SecureCredentialRepository($user, $pdo, $clientIP);
        $validator = new AuthenticatorAssertionResponseValidator($credentialRepository);
        
        // Validate assertion
        $publicKeyCredentialSource = $validator->check(
            $credential->getRawId(),
            $credential->getResponse(),
            $requestOptions,
            $config['webauthn_origin'],
            base64_decode($user['user_id'])
        );

        // Login successful - update last login time
        try {
            $stmt = $pdo->prepare('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?');
            $stmt->execute([$user['id']]);
        } catch (Exception $e) {
            error_log("Failed to update last login: " . $e->getMessage());
        }

        // Set secure session
        session_regenerate_id(true); // Prevent session fixation
        $_SESSION['user'] = [
            'id' => $user['id'], 
            'username' => $user['username'], 
            'type' => 'player',
            'login_time' => time(),
            'login_ip' => $clientIP
        ];

        // Log successful login
        try {
            $stmt = $pdo->prepare('
                INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
                VALUES (?, ?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $user['id'],
                $user['username'],
                'login',
                'Successful passkey authentication',
                $clientIP,
                $_SERVER['HTTP_USER_AGENT'] ?? null
            ]);
        } catch (Exception $e) {
            error_log("Failed to log successful login: " . $e->getMessage());
        }

        // Clear login session data
        unset($_SESSION['login_challenge'], $_SESSION['login_user_id'], 
              $_SESSION['login_request_options'], $_SESSION['login_username'],
              $_SESSION['login_expires'], $_SESSION['login_ip'], 
              $_SESSION['login_user_agent_hash']);

        echo json_encode([
            'ok' => true, 
            'message' => 'Login successful',
            'username' => $user['username']
        ]);
        exit;

    } catch (Exception $e) {
        // Log authentication failure
        $username = $_SESSION['login_username'] ?? 'unknown';
        $userId = $_SESSION['login_user_id'] ?? null;
        
        try {
            $stmt = $pdo->prepare('
                INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent, rate_limited) 
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $userId,
                $username,
                'login_failed',
                'Authentication failed: ' . $e->getMessage(),
                $clientIP,
                $_SERVER['HTTP_USER_AGENT'] ?? null,
                false
            ]);
        } catch (Exception $logError) {
            error_log("Failed to log authentication failure: " . $logError->getMessage());
        }
        
        sendError(401, 'Authentication failed', $e->getMessage());
    }
}

sendError(405, 'Method not allowed');

================
File: auth/logout.php
================
<?php
// /auth/logout.php - Secure logout handler
session_start();

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit;
}

$username = null;
$userId = null;

// Capture user info before clearing session
if (isset($_SESSION['user'])) {
    $username = $_SESSION['user']['username'] ?? null;
    $userId = $_SESSION['user']['id'] ?? null;
}

// Log the logout event
if ($username && $userId) {
    try {
        require_once __DIR__ . '/../config/db.php';
        $stmt = $pdo->prepare('INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) VALUES (?, ?, ?, ?, ?, ?)');
        $stmt->execute([
            $userId,
            $username,
            'logout',
            'User logged out',
            $_SERVER['REMOTE_ADDR'] ?? null,
            $_SERVER['HTTP_USER_AGENT'] ?? null
        ]);
    } catch (Exception $e) {
        error_log("Failed to log logout: " . $e->getMessage());
    }
}

// Clear all session data
$_SESSION = array();

// Destroy the session cookie
if (isset($_COOKIE[session_name()])) {
    setcookie(session_name(), '', time() - 3600, '/');
}

// Destroy the session
session_destroy();

// Return success response
echo json_encode([
    'ok' => true,
    'message' => 'Logged out successfully'
]);
exit;

================
File: auth/RateLimiter.php
================
<?php
// /auth/RateLimiter.php - Comprehensive rate limiting and security

class RateLimiter {
    private $pdo;
    
    public function __construct($pdo) {
        $this->pdo = $pdo;
    }
    
    /**
     * Check if an action is rate limited
     */
    public function checkRateLimit($endpoint, $ip, $username = null) {
        $this->cleanupOldEntries();
        
        // Check for existing rate limit entry
        $stmt = $this->pdo->prepare('
            SELECT * FROM rate_limits 
            WHERE ip_address = ? AND endpoint = ? AND username = ?
        ');
        $stmt->execute([$ip, $endpoint, $username]);
        $existing = $stmt->fetch();
        
        $limits = $this->getLimitsForEndpoint($endpoint);
        $now = time();
        
        if ($existing) {
            $firstAttempt = strtotime($existing['first_attempt']);
            $blockedUntil = $existing['blocked_until'] ? strtotime($existing['blocked_until']) : 0;
            
            // Check if still blocked
            if ($blockedUntil && $now < $blockedUntil) {
                $this->logSecurityEvent($ip, $username, 'blocked_attempt', 
                    "Attempted $endpoint while blocked", ['endpoint' => $endpoint]);
                return [
                    'allowed' => false, 
                    'reason' => 'temporarily_blocked',
                    'retry_after' => $blockedUntil - $now
                ];
            }
            
            // Check if we're within the time window
            $timeWindow = $now - $firstAttempt;
            if ($timeWindow < $limits['window']) {
                // Within window - check attempt count
                if ($existing['attempts'] >= $limits['max_attempts']) {
                    // Block for escalating time
                    $blockDuration = min($limits['block_duration'] * pow(2, floor($existing['attempts'] / $limits['max_attempts'])), 3600);
                    $blockedUntil = $now + $blockDuration;
                    
                    $stmt = $this->pdo->prepare('
                        UPDATE rate_limits 
                        SET attempts = attempts + 1, blocked_until = FROM_UNIXTIME(?)
                        WHERE id = ?
                    ');
                    $stmt->execute([$blockedUntil, $existing['id']]);
                    
                    $this->logSecurityEvent($ip, $username, 'multiple_failures', 
                        "Blocked after {$existing['attempts']} attempts for $endpoint");
                    
                    return [
                        'allowed' => false, 
                        'reason' => 'too_many_attempts',
                        'retry_after' => $blockDuration
                    ];
                }
                
                // Increment attempt count
                $stmt = $this->pdo->prepare('
                    UPDATE rate_limits 
                    SET attempts = attempts + 1, last_attempt = CURRENT_TIMESTAMP
                    WHERE id = ?
                ');
                $stmt->execute([$existing['id']]);
                
                return ['allowed' => true, 'attempts' => $existing['attempts'] + 1];
            } else {
                // Outside window - reset
                $stmt = $this->pdo->prepare('
                    UPDATE rate_limits 
                    SET attempts = 1, first_attempt = CURRENT_TIMESTAMP, 
                        last_attempt = CURRENT_TIMESTAMP, blocked_until = NULL
                    WHERE id = ?
                ');
                $stmt->execute([$existing['id']]);
                
                return ['allowed' => true, 'attempts' => 1];
            }
        } else {
            // First attempt - create entry
            $stmt = $this->pdo->prepare('
                INSERT INTO rate_limits (ip_address, endpoint, username, attempts) 
                VALUES (?, ?, ?, 1)
            ');
            $stmt->execute([$ip, $endpoint, $username]);
            
            return ['allowed' => true, 'attempts' => 1];
        }
    }
    
    /**
     * Check account creation limits (more strict)
     */
    public function checkAccountCreationLimits($ip) {
        $stmt = $this->pdo->prepare('
            SELECT * FROM creation_limits WHERE ip_address = ?
        ');
        $stmt->execute([$ip]);
        $existing = $stmt->fetch();
        
        $now = time();
        $today = date('Y-m-d');
        
        if ($existing) {
            // Reset daily counter if needed
            if ($existing['last_daily_reset'] !== $today) {
                $stmt = $this->pdo->prepare('
                    UPDATE creation_limits 
                    SET daily_count = 1, last_daily_reset = CURRENT_DATE 
                    WHERE id = ?
                ');
                $stmt->execute([$existing['id']]);
                return ['allowed' => true, 'daily_count' => 1];
            }
            
            // Check daily limit (3 accounts per IP per day)
            if ($existing['daily_count'] >= 3) {
                $this->logSecurityEvent($ip, null, 'blocked_creation', 
                    "IP blocked from creating accounts (daily limit reached)");
                return [
                    'allowed' => false, 
                    'reason' => 'daily_limit_reached',
                    'retry_after' => strtotime('tomorrow') - $now
                ];
            }
            
            // Check total limit (10 accounts per IP total)
            if ($existing['accounts_created'] >= 10) {
                $this->logSecurityEvent($ip, null, 'blocked_creation', 
                    "IP permanently blocked from creating accounts (total limit reached)");
                return [
                    'allowed' => false, 
                    'reason' => 'total_limit_reached',
                    'retry_after' => false // Permanent
                ];
            }
            
            // Check rapid creation (max 1 account per hour)
            $lastCreation = strtotime($existing['last_creation']);
            if ($now - $lastCreation < 3600) {
                return [
                    'allowed' => false, 
                    'reason' => 'too_soon',
                    'retry_after' => 3600 - ($now - $lastCreation)
                ];
            }
            
            // Update counters
            $stmt = $this->pdo->prepare('
                UPDATE creation_limits 
                SET accounts_created = accounts_created + 1, 
                    daily_count = daily_count + 1, 
                    last_creation = CURRENT_TIMESTAMP 
                WHERE id = ?
            ');
            $stmt->execute([$existing['id']]);
            
            return [
                'allowed' => true, 
                'total_created' => $existing['accounts_created'] + 1,
                'daily_count' => $existing['daily_count'] + 1
            ];
        } else {
            // First account from this IP
            $stmt = $this->pdo->prepare('
                INSERT INTO creation_limits (ip_address, accounts_created, daily_count) 
                VALUES (?, 1, 1)
            ');
            $stmt->execute([$ip]);
            
            return ['allowed' => true, 'total_created' => 1, 'daily_count' => 1];
        }
    }
    
    /**
     * Get rate limits for specific endpoints
     */
    private function getLimitsForEndpoint($endpoint) {
        $limits = [
            'register' => [
                'max_attempts' => 3,
                'window' => 900, // 15 minutes
                'block_duration' => 1800 // 30 minutes
            ],
            'login' => [
                'max_attempts' => 5,
                'window' => 300, // 5 minutes
                'block_duration' => 600 // 10 minutes
            ],
            'default' => [
                'max_attempts' => 10,
                'window' => 60,
                'block_duration' => 300
            ]
        ];
        
        return $limits[$endpoint] ?? $limits['default'];
    }
    
    /**
     * Log security events for monitoring
     */
    private function logSecurityEvent($ip, $username, $eventType, $description, $metadata = null) {
        try {
            $stmt = $this->pdo->prepare('
                INSERT INTO security_events (ip_address, username, event_type, description, metadata) 
                VALUES (?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $ip, 
                $username, 
                $eventType, 
                $description, 
                $metadata ? json_encode($metadata) : null
            ]);
        } catch (Exception $e) {
            error_log("Failed to log security event: " . $e->getMessage());
        }
    }
    
    /**
     * Clean up old rate limit entries
     */
    private function cleanupOldEntries() {
        try {
            // Clean entries older than 24 hours
            $this->pdo->exec('
                DELETE FROM rate_limits 
                WHERE last_attempt < DATE_SUB(NOW(), INTERVAL 24 HOUR)
                  AND (blocked_until IS NULL OR blocked_until < NOW())
            ');
            
            // Clean old security events (keep 30 days)
            $this->pdo->exec('
                DELETE FROM security_events 
                WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY)
            ');
        } catch (Exception $e) {
            error_log("Rate limiter cleanup failed: " . $e->getMessage());
        }
    }
    
    /**
     * Get user's IP address with proxy support
     */
    public static function getClientIP() {
        $headers = [
            'HTTP_CF_CONNECTING_IP', // Cloudflare
            'HTTP_X_FORWARDED_FOR',
            'HTTP_X_FORWARDED',
            'HTTP_X_CLUSTER_CLIENT_IP',
            'HTTP_FORWARDED_FOR',
            'HTTP_FORWARDED',
            'HTTP_CLIENT_IP',
            'REMOTE_ADDR'
        ];
        
        foreach ($headers as $header) {
            if (!empty($_SERVER[$header])) {
                $ip = trim(explode(',', $_SERVER[$header])[0]);
                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                    return $ip;
                }
            }
        }
        
        return $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1';
    }
    
    /**
     * Detect suspicious patterns
     */
    public function detectSuspiciousActivity($ip, $username = null) {
        $suspicious = false;
        $reasons = [];
        
        // Check for rapid requests across multiple endpoints
        $stmt = $this->pdo->prepare('
            SELECT endpoint, COUNT(*) as count 
            FROM rate_limits 
            WHERE ip_address = ? AND last_attempt > DATE_SUB(NOW(), INTERVAL 5 MINUTE)
            GROUP BY endpoint
        ');
        $stmt->execute([$ip]);
        $recentActivity = $stmt->fetchAll();
        
        if (count($recentActivity) > 3) {
            $suspicious = true;
            $reasons[] = 'multiple_endpoints';
        }
        
        // Check for user agent patterns
        $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? '';
        if (empty($userAgent) || strlen($userAgent) < 10 || 
            strpos($userAgent, 'bot') !== false || 
            strpos($userAgent, 'curl') !== false) {
            $suspicious = true;
            $reasons[] = 'suspicious_user_agent';
        }
        
        if ($suspicious) {
            $this->logSecurityEvent($ip, $username, 'suspicious_timing', 
                "Suspicious activity detected", ['reasons' => $reasons]);
        }
        
        return $suspicious;
    }
}

================
File: auth/register.php
================
<?php
// /auth/register.php - Enhanced registration with rate limiting and security
require_once __DIR__ . '/../config/db.php';
$config = require __DIR__ . '/../config/environment.php';
require_once __DIR__ . '/../thirdparty/vendor/autoload.php';
require_once __DIR__ . '/RateLimiter.php';

use Webauthn\PublicKeyCredentialCreationOptions;
use Webauthn\PublicKeyCredentialRpEntity;
use Webauthn\PublicKeyCredentialUserEntity;
use Webauthn\PublicKeyCredentialLoader;
use Webauthn\AuthenticatorAttestationResponseValidator;

session_start();
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, PUT, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// Initialize rate limiter
$rateLimiter = new RateLimiter($pdo);
$clientIP = RateLimiter::getClientIP();

function logError($message, $details = '') {
    error_log("WebAuthn Registration Error: $message " . ($details ? "Details: $details" : ""));
}

function sendError($code, $message, $details = '', $retryAfter = null) {
    logError($message, $details);
    http_response_code($code);
    $response = ['error' => $message, 'details' => $details];
    if ($retryAfter) {
        $response['retry_after'] = $retryAfter;
        header("Retry-After: $retryAfter");
    }
    echo json_encode($response);
    exit;
}

// Enhanced username validation
function validateUsername($username) {
    $username = trim($username);
    
    if (empty($username)) {
        return ['valid' => false, 'error' => 'Username is required'];
    }
    
    if (strlen($username) < 3) {
        return ['valid' => false, 'error' => 'Username must be at least 3 characters'];
    }
    
    if (strlen($username) > 50) {
        return ['valid' => false, 'error' => 'Username must be less than 50 characters'];
    }
    
    if (!preg_match('/^[a-zA-Z0-9_-]+$/', $username)) {
        return ['valid' => false, 'error' => 'Username can only contain letters, numbers, underscores, and dashes'];
    }
    
    // Check for reserved names
    $reserved = ['admin', 'root', 'system', 'api', 'www', 'test', 'guest', 'null', 'undefined'];
    if (in_array(strtolower($username), $reserved)) {
        return ['valid' => false, 'error' => 'This username is reserved'];
    }
    
    return ['valid' => true, 'username' => $username];
}

// Convert binary data to base64url string
function binaryToBase64url($data) {
    return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
}

// STEP 1: Generate registration options
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // Check rate limits first
        $rateCheck = $rateLimiter->checkRateLimit('register', $clientIP);
        if (!$rateCheck['allowed']) {
            $message = match($rateCheck['reason']) {
                'temporarily_blocked' => 'Too many registration attempts. Please try again later.',
                'too_many_attempts' => 'Registration temporarily blocked due to multiple failures.',
                default => 'Registration rate limit exceeded.'
            };
            sendError(429, $message, '', $rateCheck['retry_after'] ?? null);
        }
        
        // Check account creation limits
        $creationCheck = $rateLimiter->checkAccountCreationLimits($clientIP);
        if (!$creationCheck['allowed']) {
            $message = match($creationCheck['reason']) {
                'daily_limit_reached' => 'Daily account creation limit reached. Try again tomorrow.',
                'total_limit_reached' => 'Maximum accounts per IP address reached.',
                'too_soon' => 'Please wait before creating another account.',
                default => 'Account creation temporarily restricted.'
            };
            sendError(429, $message, '', $creationCheck['retry_after'] ?? null);
        }
        
        // Check for suspicious activity
        if ($rateLimiter->detectSuspiciousActivity($clientIP)) {
            sendError(429, 'Suspicious activity detected. Please try again later.', '', 3600);
        }
        
        $username = trim($_POST['username'] ?? '');
        $validation = validateUsername($username);
        if (!$validation['valid']) {
            sendError(400, $validation['error']);
        }
        $username = $validation['username'];

        // Check if username is taken
        $stmt = $pdo->prepare('SELECT id FROM users WHERE username = ?');
        $stmt->execute([$username]);
        if ($stmt->fetch()) {
            sendError(409, 'Username already taken');
        }

        // Generate user ID
        $userId = random_bytes(16);
        $userIdBase64 = base64_encode($userId);

        // Create RP entity
        $rpEntity = new PublicKeyCredentialRpEntity(
            $config['rp_name'],
            $config['rp_id']
        );

        // Create user entity
        $userEntity = new PublicKeyCredentialUserEntity(
            $username,
            $userId,
            $username
        );

        // Generate challenge
        $challenge = rtrim(strtr(base64_encode(random_bytes(32)), '+/', '-_'), '=');
        
        // Store in session with expiration
        $_SESSION['register_challenge'] = $challenge;
        $_SESSION['register_username'] = $username;
        $_SESSION['register_user_id'] = $userIdBase64;
        $_SESSION['register_expires'] = time() + 300; // 5 minute expiration
        $_SESSION['register_ip'] = $clientIP; // Prevent session hijacking

        // Create options
        $creationOptions = new PublicKeyCredentialCreationOptions(
            $rpEntity,
            $userEntity,
            $challenge,
            [
                new \Webauthn\PublicKeyCredentialParameters('public-key', -7),   // ES256
                new \Webauthn\PublicKeyCredentialParameters('public-key', -257)  // RS256
            ]
        );

        $_SESSION['register_creation_options'] = serialize($creationOptions);

        echo json_encode($creationOptions);
        exit;

    } catch (Exception $e) {
        sendError(500, 'Failed to generate registration options', $e->getMessage());
    }
}

// STEP 2: Process registration
if ($_SERVER['REQUEST_METHOD'] === 'PUT') {
    try {
        // Validate session
        if (!isset($_SESSION['register_expires']) || $_SESSION['register_expires'] < time()) {
            sendError(400, 'Registration session expired');
        }
        
        if (!isset($_SESSION['register_ip']) || $_SESSION['register_ip'] !== $clientIP) {
            sendError(400, 'Session IP mismatch - possible security issue');
        }
        
        $input = json_decode(file_get_contents('php://input'), true);
        if (!$input) {
            sendError(400, 'Invalid JSON input');
        }

        $username = $_SESSION['register_username'] ?? null;
        $userIdBase64 = $_SESSION['register_user_id'] ?? null;
        $creationOptions = isset($_SESSION['register_creation_options']) ? 
            unserialize($_SESSION['register_creation_options']) : null;

        if (!$username || !$userIdBase64 || !$creationOptions) {
            sendError(400, 'Session expired or invalid');
        }

        // Load credential
        $attestationStatementSupportManager = new \Webauthn\AttestationStatement\AttestationStatementSupportManager();
        $attestationObjectLoader = new \Webauthn\AttestationStatement\AttestationObjectLoader($attestationStatementSupportManager);
        $credentialLoader = new PublicKeyCredentialLoader($attestationObjectLoader);
        $credential = $credentialLoader->loadArray($input);

        // Validate
        $validator = new AuthenticatorAttestationResponseValidator();
        $publicKeyCredentialSource = $validator->check(
            $credential->getResponse(),
            $creationOptions,
            $config['webauthn_origin']
        );

        // Convert binary credential ID to base64url string
        $credentialIdBinary = $publicKeyCredentialSource->getPublicKeyCredentialId();
        $credentialIdBase64url = binaryToBase64url($credentialIdBinary);
        
        // Begin transaction for data consistency
        $pdo->beginTransaction();
        
        try {
            // Insert user
            $stmt = $pdo->prepare('INSERT INTO users (username, user_id, passkey_id, passkey_public_key) VALUES (?, ?, ?, ?)');
            $result = $stmt->execute([
                $username,
                $userIdBase64,
                $credentialIdBase64url,
                $publicKeyCredentialSource->getCredentialPublicKey()
            ]);

            if (!$result) {
                throw new Exception('Failed to create user account');
            }

            $userId = $pdo->lastInsertId();
            
			// Create initial user stats (all other columns pick up their DEFAULTs)
			$stmt = $pdo->prepare('
				INSERT INTO user_stats (user_id)
				VALUES (?)
			');
			$stmt->execute([$userId]);

            
            // Create default user preferences
            $stmt = $pdo->prepare('
                INSERT INTO user_preferences (user_id) VALUES (?)
            ');
            $stmt->execute([$userId]);
            
            // Log successful registration
            $stmt = $pdo->prepare('
                INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
                VALUES (?, ?, ?, ?, ?, ?)
            ');
            $stmt->execute([
                $userId,
                $username,
                'passkey_register',
                'New account created with passkey',
                $clientIP,
                $_SERVER['HTTP_USER_AGENT'] ?? null
            ]);
            
            $pdo->commit();
            
        } catch (Exception $e) {
            $pdo->rollBack();
            throw $e;
        }

        // Clear registration session data
        unset($_SESSION['register_username'], $_SESSION['register_challenge'], 
              $_SESSION['register_creation_options'], $_SESSION['register_user_id'],
              $_SESSION['register_expires'], $_SESSION['register_ip']);

        echo json_encode([
            'ok' => true, 
            'message' => 'Registration successful',
            'username' => $username
        ]);
        exit;

    } catch (Exception $e) {
        sendError(500, 'Registration failed', $e->getMessage());
    }
}

sendError(405, 'Method not allowed');

================
File: config/db.php
================
<?php
// config/db.php
require_once __DIR__ . '/../thirdparty/vendor/autoload.php'; // for composer dependencies (phpdotenv)

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/../');
$dotenv->load();

$host = $_ENV['DB_HOST'];
$db   = $_ENV['DB_NAME'];
$user = $_ENV['DB_USER'];
$pass = $_ENV['DB_PASS'];

$dsn = "mysql:host=$host;dbname=$db;charset=utf8mb4";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);
} catch (PDOException $e) {
    die('Database connection failed: ' . $e->getMessage());
}

================
File: config/environment.php
================
<?php
require_once __DIR__ . '/../thirdparty/vendor/autoload.php';

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/../');
$dotenv->load();

return [
    'base_url' => $_ENV['DOMAIN_URL'],
    'webauthn_origin' => $_ENV['WEBAUTHN_ORIGIN'],
    'rp_id' => $_ENV['RP_ID'],
    'rp_name' => $_ENV['RP_NAME'],
];

================
File: db/stats.sql
================
-- Enhanced XRPG Database Schema for Character Creation System
-- This replaces and extends the existing user_stats system

-- Update user_stats table with new stat system
DROP TABLE IF EXISTS user_stats;
CREATE TABLE user_stats (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    level INT DEFAULT 1,
    experience INT DEFAULT 0,
    gold INT DEFAULT 100,
    health INT DEFAULT 100,
    max_health INT DEFAULT 100,
    
    -- New RPG stats
    strength INT DEFAULT 10,
    vitality INT DEFAULT 10,
    agility INT DEFAULT 10,
    intelligence INT DEFAULT 10,
    wisdom INT DEFAULT 10,
    luck INT DEFAULT 10,
    
    -- Character progression
    class_experience INT DEFAULT 0,
    class_level INT DEFAULT 1,
    job_experience INT DEFAULT 0,
    job_level INT DEFAULT 1,
    
    -- Idle mechanics
    last_idle_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    idle_gold_rate DECIMAL(10,2) DEFAULT 1.00,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_stats (user_id)
);

-- Races table
CREATE TABLE races (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    
    -- Stat modifiers (can be negative)
    strength_mod INT DEFAULT 0,
    vitality_mod INT DEFAULT 0,
    agility_mod INT DEFAULT 0,
    intelligence_mod INT DEFAULT 0,
    wisdom_mod INT DEFAULT 0,
    luck_mod INT DEFAULT 0,
    
    -- Special bonuses
    special_abilities JSON NULL,
    lore_text TEXT,
    
    is_active BOOLEAN DEFAULT TRUE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Classes table
CREATE TABLE classes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    tier INT DEFAULT 1, -- 1 = basic, 2 = advanced, etc.
    
    -- Base stat bonuses
    strength_bonus INT DEFAULT 0,
    vitality_bonus INT DEFAULT 0,
    agility_bonus INT DEFAULT 0,
    intelligence_bonus INT DEFAULT 0,
    wisdom_bonus INT DEFAULT 0,
    luck_bonus INT DEFAULT 0,
    
    -- Stat growth per level (multipliers)
    strength_growth DECIMAL(3,2) DEFAULT 1.00,
    vitality_growth DECIMAL(3,2) DEFAULT 1.00,
    agility_growth DECIMAL(3,2) DEFAULT 1.00,
    intelligence_growth DECIMAL(3,2) DEFAULT 1.00,
    wisdom_growth DECIMAL(3,2) DEFAULT 1.00,
    luck_growth DECIMAL(3,2) DEFAULT 1.00,
    
    -- Special abilities and bonuses
    special_abilities JSON NULL,
    lore_text TEXT,
    
    is_active BOOLEAN DEFAULT TRUE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Jobs table
CREATE TABLE jobs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    category ENUM('combat', 'crafting', 'social', 'exploration', 'trade') DEFAULT 'trade',
    
    -- Small stat bonuses
    strength_bonus INT DEFAULT 0,
    vitality_bonus INT DEFAULT 0,
    agility_bonus INT DEFAULT 0,
    intelligence_bonus INT DEFAULT 0,
    wisdom_bonus INT DEFAULT 0,
    luck_bonus INT DEFAULT 0,
    
    -- Economic bonuses
    idle_gold_rate DECIMAL(10,2) DEFAULT 1.00, -- Multiplier for idle gold
    merchant_discount DECIMAL(5,2) DEFAULT 0.00, -- Percentage discount
    
    -- Special bonuses
    special_abilities JSON NULL,
    lore_text TEXT,
    
    is_active BOOLEAN DEFAULT TRUE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User character information
CREATE TABLE user_characters (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    
    -- Character choices
    race_id INT,
    class_id INT,
    job_id INT,
    
    -- Creation and change tracking
    character_created_at TIMESTAMP NULL,
    class_selected_at TIMESTAMP NULL,
    job_selected_at TIMESTAMP NULL,
    last_class_change TIMESTAMP NULL,
    last_job_change TIMESTAMP NULL,
    
    -- Character completion status
    is_character_complete BOOLEAN DEFAULT FALSE,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (race_id) REFERENCES races(id) ON DELETE SET NULL,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE SET NULL,
    FOREIGN KEY (job_id) REFERENCES jobs(id) ON DELETE SET NULL,
    UNIQUE KEY unique_user_character (user_id)
);

-- Prerequisites system for classes and jobs
CREATE TABLE prerequisites (
    id INT AUTO_INCREMENT PRIMARY KEY,
    
    -- What this prerequisite applies to
    target_type ENUM('class', 'job') NOT NULL,
    target_id INT NOT NULL,
    
    -- Prerequisite type and requirements
    prereq_type ENUM('level', 'race', 'class', 'job', 'class_level', 'job_level', 'stat', 'item', 'achievement') NOT NULL,
    
    -- The requirement details (stored as JSON for flexibility)
    requirement JSON NOT NULL,
    
    -- Optional description for display
    description VARCHAR(255),
    
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    INDEX idx_target (target_type, target_id),
    INDEX idx_prereq_type (prereq_type)
);

-- Insert default races
INSERT INTO races (name, description, strength_mod, vitality_mod, agility_mod, intelligence_mod, wisdom_mod, luck_mod, lore_text, sort_order) VALUES
('Human', 'Versatile and adaptable, humans excel in all areas without major weaknesses.', 0, 0, 0, 0, 0, 2, 'The most common race, humans are known for their determination and ability to excel in any profession they choose.', 1),
('Elf', 'Graceful and intelligent, elves have enhanced mental capabilities and agility.', -1, -1, 3, 2, 1, 0, 'Ancient and wise, elves possess natural grace and a deep connection to magic and nature.', 2),
('Dwarf', 'Hardy and strong, dwarves are renowned for their physical prowess and resilience.', 3, 3, -2, 0, 1, -1, 'Stout and determined, dwarves are master craftsmen with an unbreakable will.', 3),
('Orc', 'Powerful and fierce, orcs possess incredible strength but struggle with mental disciplines.', 4, 2, 0, -2, -1, 1, 'Brutal and direct, orcs solve most problems through raw strength and determination.', 4),
('Halfling', 'Small but lucky, halflings excel at avoiding trouble and finding opportunity.', -2, -1, 2, 0, 1, 4, 'Peaceful and jovial, halflings prefer comfortable lives but possess surprising courage when needed.', 5);

-- Insert basic classes
INSERT INTO classes (name, description, tier, strength_bonus, vitality_bonus, agility_bonus, intelligence_bonus, wisdom_bonus, luck_bonus, strength_growth, vitality_growth, agility_growth, intelligence_growth, wisdom_growth, luck_growth, lore_text, sort_order) VALUES
('Fighter', 'Masters of combat who excel in strength and endurance.', 1, 3, 3, 1, 0, 0, 0, 1.5, 1.3, 1.1, 0.8, 0.9, 1.0, 'Warriors who have dedicated their lives to mastering weapons and armor.', 1),
('Mage', 'Wielders of arcane magic with high intelligence and wisdom.', 1, 0, 1, 0, 4, 2, 0, 0.7, 0.9, 0.9, 1.6, 1.4, 1.0, 'Scholars of the arcane arts who bend reality to their will through magic.', 2),
('Rogue', 'Stealthy and agile, rogues excel at precision and luck.', 1, 1, 1, 4, 1, 0, 2, 1.0, 1.0, 1.5, 1.1, 1.0, 1.3, 'Masters of stealth and precision who strike from the shadows.', 3),
('Cleric', 'Divine spellcasters focused on wisdom and supporting others.', 1, 1, 2, 0, 1, 3, 1, 1.0, 1.2, 0.9, 1.2, 1.5, 1.1, 'Holy priests who channel divine power to heal and protect.', 4),
('Ranger', 'Nature-focused warriors with balanced physical and mental attributes.', 1, 2, 2, 2, 1, 2, 1, 1.2, 1.1, 1.3, 1.0, 1.2, 1.1, 'Guardians of the wild who excel at tracking and survival.', 5);

-- Insert advanced classes with prerequisites
INSERT INTO classes (name, description, tier, strength_bonus, vitality_bonus, agility_bonus, intelligence_bonus, wisdom_bonus, luck_bonus, strength_growth, vitality_growth, agility_growth, intelligence_growth, wisdom_growth, luck_growth, lore_text, sort_order) VALUES
('Knight', 'Elite fighters with enhanced combat prowess and leadership.', 2, 5, 4, 1, 1, 2, 1, 1.7, 1.5, 1.1, 1.0, 1.2, 1.1, 'Noble warriors who have proven their valor in battle and earned the right to lead.', 10),
('Archmage', 'Master spellcasters with unparalleled magical knowledge.', 2, 0, 2, 1, 6, 4, 1, 0.7, 1.0, 1.0, 1.8, 1.6, 1.2, 'The pinnacle of magical achievement, these mages have mastered multiple schools of magic.', 11),
('Assassin', 'Elite rogues specializing in stealth and critical strikes.', 2, 2, 2, 6, 2, 1, 4, 1.1, 1.1, 1.7, 1.2, 1.1, 1.5, 'Masters of death who can eliminate any target with precision and stealth.', 12);

-- Insert basic jobs
INSERT INTO jobs (name, description, category, strength_bonus, vitality_bonus, agility_bonus, intelligence_bonus, wisdom_bonus, luck_bonus, idle_gold_rate, merchant_discount, lore_text, sort_order) VALUES
('Merchant', 'Trade goods for profit and better prices.', 'trade', 0, 0, 0, 2, 1, 2, 1.5, 10.0, 'Savvy traders who know the value of everything and how to turn a profit.', 1),
('Blacksmith', 'Craft weapons and armor, gain strength from forge work.', 'crafting', 2, 1, 0, 1, 0, 0, 0.8, 5.0, 'Master craftsmen who forge the weapons and armor that heroes depend on.', 2),
('Scholar', 'Research and study, gaining wisdom and intelligence.', 'social', 0, 0, 0, 3, 2, 0, 0.7, 0.0, 'Learned individuals who seek knowledge and understanding above material wealth.', 3),
('Gambler', 'Risk it all for potentially massive rewards.', 'social', 0, 0, 1, 1, 0, 4, 2.5, 0.0, 'Risk-takers who live by chance and can win or lose fortunes in a single bet.', 4),
('Farmer', 'Steady work providing food, reliable but modest income.', 'trade', 1, 2, 0, 0, 1, 1, 1.2, 0.0, 'Hardworking folk who provide the food that keeps civilization running.', 5),
('Adventurer', 'Explore and seek treasure, balanced risk and reward.', 'exploration', 1, 1, 1, 1, 1, 2, 1.0, 0.0, 'Bold explorers who seek fortune and glory in dangerous places.', 6);

-- Add prerequisites for advanced classes
INSERT INTO prerequisites (target_type, target_id, prereq_type, requirement, description) VALUES
('class', (SELECT id FROM classes WHERE name = 'Knight'), 'class', '{"class_name": "Fighter", "min_level": 10}', 'Must be a Fighter with class level 10+'),
('class', (SELECT id FROM classes WHERE name = 'Knight'), 'level', '{"min_level": 15}', 'Must be character level 15+'),

('class', (SELECT id FROM classes WHERE name = 'Archmage'), 'class', '{"class_name": "Mage", "min_level": 12}', 'Must be a Mage with class level 12+'),
('class', (SELECT id FROM classes WHERE name = 'Archmage'), 'level', '{"min_level": 20}', 'Must be character level 20+'),
('class', (SELECT id FROM classes WHERE name = 'Archmage'), 'stat', '{"stat": "intelligence", "min_value": 25}', 'Must have 25+ Intelligence'),

('class', (SELECT id FROM classes WHERE name = 'Assassin'), 'class', '{"class_name": "Rogue", "min_level": 8}', 'Must be a Rogue with class level 8+'),
('class', (SELECT id FROM classes WHERE name = 'Assassin'), 'level', '{"min_level": 12}', 'Must be character level 12+'),
('class', (SELECT id FROM classes WHERE name = 'Assassin'), 'stat', '{"stat": "agility", "min_value": 20}', 'Must have 20+ Agility');

-- Create indexes for better performance
CREATE INDEX idx_user_characters_completion ON user_characters (is_character_complete);
CREATE INDEX idx_user_characters_user ON user_characters (user_id);
CREATE INDEX idx_races_active ON races (is_active, sort_order);
CREATE INDEX idx_classes_active ON classes (is_active, tier, sort_order);
CREATE INDEX idx_jobs_active ON jobs (is_active, category, sort_order);

================
File: db/xrpg.sql
================
-- phpMyAdmin SQL Dump
-- version 5.1.1deb5ubuntu1
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Generation Time: May 24, 2025 at 02:29 PM
-- Server version: 10.6.22-MariaDB-0ubuntu0.22.04.1-log
-- PHP Version: 8.1.2-1ubuntu2.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `xrpg`
--

-- --------------------------------------------------------

--
-- Table structure for table `auth_log`
--

CREATE TABLE `auth_log` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `username` varchar(64) DEFAULT NULL,
  `event_type` enum('login','logout','fail','passkey_register','password_reset','permission_change','other') NOT NULL,
  `description` text DEFAULT NULL,
  `ip_addr` varchar(45) DEFAULT NULL,
  `user_agent` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(64) NOT NULL,
  `passkey_id` varbinary(128) NOT NULL,
  `passkey_public_key` varbinary(512) NOT NULL,
  `email` varchar(128) DEFAULT NULL,
  `fallback_password_hash` varchar(255) DEFAULT NULL,
  `registered_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `user_id` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Indexes for dumped tables
--

--
-- Indexes for table `auth_log`
--
ALTER TABLE `auth_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_authlog_user_id` (`user_id`),
  ADD KEY `idx_authlog_event_type` (`event_type`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD KEY `idx_users_username` (`username`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `auth_log`
--
ALTER TABLE `auth_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

-- Enhanced database schema for XRPG with security improvements


-- Rate limiting table to prevent abuse
CREATE TABLE IF NOT EXISTS rate_limits (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ip_address VARCHAR(45) NOT NULL,
    endpoint VARCHAR(100) NOT NULL,
    username VARCHAR(50) NULL,
    attempts INT DEFAULT 1,
    first_attempt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_attempt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    blocked_until TIMESTAMP NULL,
    INDEX idx_ip_endpoint (ip_address, endpoint),
    INDEX idx_username (username),
    INDEX idx_blocked_until (blocked_until)
);

-- Enhanced auth_log table with more details
ALTER TABLE auth_log 
ADD COLUMN IF NOT EXISTS rate_limited BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS user_agent_hash VARCHAR(64) NULL,
ADD COLUMN IF NOT EXISTS country_code VARCHAR(2) NULL;

-- User preferences table for theme settings
CREATE TABLE IF NOT EXISTS user_preferences (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    theme_mode ENUM('dark', 'light') DEFAULT 'dark',
    accent_color VARCHAR(7) DEFAULT '#5299e0',
    accent_secondary VARCHAR(7) DEFAULT '#81aaff',
    border_radius INT DEFAULT 18,
    shadow_intensity DECIMAL(3,2) DEFAULT 0.36,
    ui_opacity DECIMAL(3,2) DEFAULT 0.96,
    font_family ENUM('sans', 'mono', 'game', 'display') DEFAULT 'sans',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE KEY unique_user_prefs (user_id)
);

-- Account creation limits table
CREATE TABLE IF NOT EXISTS creation_limits (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ip_address VARCHAR(45) NOT NULL,
    accounts_created INT DEFAULT 1,
    first_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    daily_count INT DEFAULT 1,
    last_daily_reset DATE DEFAULT (CURRENT_DATE),
    INDEX idx_ip (ip_address),
    INDEX idx_daily_reset (last_daily_reset)
);

-- Suspicious activity tracking
CREATE TABLE IF NOT EXISTS security_events (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ip_address VARCHAR(45) NOT NULL,
    username VARCHAR(50) NULL,
    event_type ENUM('multiple_failures', 'rapid_attempts', 'suspicious_timing', 'blocked_creation') NOT NULL,
    description TEXT,
    metadata JSON NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_ip_type (ip_address, event_type),
    INDEX idx_created_at (created_at)
);

-- Clean up old rate limit entries (run this periodically)
-- DELETE FROM rate_limits WHERE last_attempt < DATE_SUB(NOW(), INTERVAL 24 HOUR);
-- DELETE FROM security_events WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAY);

================
File: docs/README_cleanup.md
================
# Project Markdown files to keep:
README.md
assets/css/README.md
assets/css/CSS.md

# Remove these if not needed:
NAVIGATION.md
UPDATES_SYSTEM.md
STRUCTURE.MD
updates.log

================
File: pages/demo-components.php
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - UI Components Demo</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <style>
        .demo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .demo-box {
            padding: 1.5rem;
        }
        
        .demo-box h3 {
            margin-top: 0;
            color: var(--color-accent);
        }
        
        .demo-row {
            margin: 1rem 0;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .stat-box {
            text-align: center;
            padding: 0.5rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.3);
            border: 1px solid var(--color-border);
        }
        
        .progress-bar {
            width: 100%;
            height: 1.5rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.3);
            overflow: hidden;
            position: relative;
            border: 1px solid var(--color-border);
        }
        
        .progress-fill {
            height: 100%;
            background: var(--gradient-accent);
            transition: width 0.3s ease;
            box-shadow: var(--shadow-glow);
        }
        
        .badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: var(--gradient-accent);
            color: white;
            border-radius: calc(var(--user-radius) * 0.5);
            font-size: 0.875rem;
            font-weight: 600;
            box-shadow: var(--shadow-default);
        }
        
        .floating-action {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 50%;
            background: var(--gradient-accent);
            border: none;
            box-shadow: var(--shadow-glow);
            cursor: pointer;
            font-size: 1.5rem;
            color: white;
            transition: all 0.3s;
        }
        
        .floating-action:hover {
            transform: scale(1.1);
            box-shadow: var(--shadow-glow), 0 8px 32px rgba(0,0,0,0.3);
        }
    </style>
</head>
<body>
    <div class="demo-grid">
        <!-- Character Card -->
        <div class="card demo-box">
            <h3>🧙‍♂️ Character Profile</h3>
            <div class="demo-row">
                <input type="text" placeholder="Character Name" value="Zephyr Stormwind" style="width: 100%;">
            </div>
            <div class="demo-row">
                <select style="width: 100%;">
                    <option>Mage - Level 42</option>
                    <option>Warrior - Level 38</option>
                    <option>Rogue - Level 45</option>
                </select>
            </div>
            <div class="stats-grid">
                <div class="stat-box">
                    <div class="text-muted">STR</div>
                    <div class="text-accent" style="font-size: 1.5rem; font-weight: bold;">18</div>
                </div>
                <div class="stat-box">
                    <div class="text-muted">INT</div>
                    <div class="text-accent" style="font-size: 1.5rem; font-weight: bold;">24</div>
                </div>
                <div class="stat-box">
                    <div class="text-muted">DEX</div>
                    <div class="text-accent" style="font-size: 1.5rem; font-weight: bold;">16</div>
                </div>
            </div>
        </div>

        <!-- Quest Log -->
        <div class="card demo-box">
            <h3>📜 Active Quests</h3>
            <div class="surface" style="padding: 1rem; margin-bottom: 1rem;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <div style="font-weight: 600;">The Crystal of Eternity</div>
                        <div class="text-muted" style="font-size: 0.875rem;">Main Quest • Dungeon of Shadows</div>
                    </div>
                    <span class="badge">Epic</span>
                </div>
                <div style="margin-top: 0.5rem;">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 75%;"></div>
                    </div>
                </div>
            </div>
            <button class="button" style="width: 100%;">View All Quests</button>
        </div>

        <!-- Inventory -->
        <div class="card demo-box">
            <h3>🎒 Inventory</h3>
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 0.5rem;">
                <?php for($i = 0; $i < 8; $i++): ?>
                <div class="surface" style="aspect-ratio: 1; display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.2s;">
                    <span style="font-size: 2rem; filter: grayscale(<?= $i > 3 ? '1' : '0' ?>);">
                        <?= ['⚔️', '🛡️', '🧪', '📜', '💎', '🗝️', '🍞', '🏺'][$i] ?>
                    </span>
                </div>
                <?php endfor; ?>
            </div>
            <div class="demo-row" style="margin-top: 1rem;">
                <div class="text-muted">Gold: <span class="text-accent" style="font-weight: bold;">2,847</span></div>
            </div>
        </div>

        <!-- Battle Controls -->
        <div class="card demo-box">
            <h3>⚔️ Battle Controls</h3>
            <div class="demo-row">
                <button class="button" style="width: 48%; margin-right: 4%;">Attack</button>
                <button class="button" style="width: 48%;">Defend</button>
            </div>
            <div class="demo-row">
                <button class="button" style="width: 48%; margin-right: 4%;">Magic</button>
                <button class="button" style="width: 48%;">Items</button>
            </div>
            <div class="demo-row">
                <button class="button" disabled style="width: 100%; opacity: var(--opacity-disabled);">Run (Boss Battle)</button>
            </div>
        </div>

        <!-- Chat/Messages -->
        <div class="card demo-box">
            <h3>💬 Guild Chat</h3>
            <div role="region" aria-label="Chat messages" style="height: 150px; overflow-y: auto; padding: 0.5rem; margin-bottom: 1rem;">
                <div class="demo-row">
                    <span class="text-accent">Thorin:</span> Anyone up for Dragon's Lair?
                </div>
                <div class="demo-row">
                    <span class="text-accent">Luna:</span> I need a healer for level 5!
                </div>
                <div class="demo-row">
                    <span class="text-muted">System: New event starting in 5 minutes</span>
                </div>
            </div>
            <div style="display: flex; gap: 0.5rem;">
                <input type="text" placeholder="Type message..." style="flex: 1;">
                <button class="button">Send</button>
            </div>
        </div>

        <!-- Settings Panel -->
        <div class="card demo-box">
            <h3>⚙️ Quick Settings</h3>
            <div class="demo-row">
                <label style="display: flex; align-items: center; justify-content: space-between;">
                    <span>Sound Effects</span>
                    <input type="checkbox" checked>
                </label>
            </div>
            <div class="demo-row">
                <label style="display: flex; align-items: center; justify-content: space-between;">
                    <span>Show Damage Numbers</span>
                    <input type="checkbox" checked>
                </label>
            </div>
            <div class="demo-row">
                <label style="display: flex; align-items: center; justify-content: space-between;">
                    <span>Auto-Loot</span>
                    <input type="checkbox">
                </label>
            </div>
            <div class="demo-row">
                <textarea placeholder="Bio / Notes..." rows="3" style="width: 100%;"></textarea>
            </div>
        </div>
    </div>

    <!-- Floating Action Button -->
    <button class="floating-action" onclick="alert('Theme customizer would open here!')">
        🎨
    </button>

    <!-- Include theme JS -->
    <script src="/assets/js/theme.js"></script>
</body>
</html>

================
File: pages/landing.php
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - Customize Your Adventure</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <link rel="stylesheet" href="/assets/css/auth.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/ico/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/ico/favicon-16x16.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.ico">
    <meta name="theme-color" content="#ffffff">
    <style>
        .hero-section {
            text-align: center;
            padding: 4rem 2rem;
            background: var(--gradient-accent);
            color: white;
            margin-bottom: 3rem;
        }
        
        .hero-section h1 {
            font-size: 3rem;
            margin: 0 0 1rem 0;
            text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        
        .hero-section p {
            font-size: 1.25rem;
            opacity: 0.9;
            margin: 0 0 2rem 0;
        }
        
        .hero-cta {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 1rem 2rem;
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: var(--user-radius);
            color: white;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }
        
        .hero-cta:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .features-section {
            max-width: 1200px;
            margin: 0 auto 4rem;
            padding: 0 2rem;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .feature-card {
            text-align: center;
            padding: 2rem;
        }
        
        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
        }
        
        .feature-card h3 {
            margin: 0 0 1rem 0;
            color: var(--color-accent);
        }
        
        .updates-section {
            max-width: 600px;
            margin: 0 auto 4rem;
            padding: 0 2rem;
        }
        
        .getting-started {
            background: var(--color-surface);
            padding: 3rem 2rem;
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .step-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .step {
            text-align: center;
        }
        
        .step-number {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 3rem;
            height: 3rem;
            background: var(--gradient-accent);
            color: white;
            border-radius: 50%;
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <!-- Fixed Theme Toggle -->
    <button id="theme-toggle" class="theme-toggle-fixed" title="Toggle light/dark mode">🌞</button>

    <!-- Side Navigation -->
    <nav class="side-nav">
        <button class="side-nav-toggle" title="Toggle menu">☰</button>
        <div class="side-nav-items">
            <a href="#" class="side-nav-item active" title="Home">
                <span class="side-nav-icon">🏠</span>
                <span class="side-nav-text">Home</span>
            </a>
            <a href="#" class="side-nav-item" title="Login" onclick="openModal('auth-modal'); return false;">
                <span class="side-nav-icon">🔑</span>
                <span class="side-nav-text">Login</span>
            </a>
            <a href="#features" class="side-nav-item" title="Features">
                <span class="side-nav-icon">⭐</span>
                <span class="side-nav-text">Features</span>
            </a>
            <a href="#getting-started" class="side-nav-item" title="Guide">
                <span class="side-nav-icon">📖</span>
                <span class="side-nav-text">Guide</span>
            </a>
        </div>
    </nav>

    <!-- Main Header -->
    <header class="main-header">
        <div class="header-title">XRPG</div>
        <div class="header-actions">
            <button class="button" onclick="openModal('auth-modal')">⚔️ Start Playing 🛡️</button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Hero Section -->
        <div class="hero-section">
            <h1>Welcome to XRPG</h1>
            <p>The next-generation RPG where your adventure begins with total customization</p>
            <a href="#" class="hero-cta" onclick="openModal('auth-modal'); return false;">
                <span>⚔️</span>
                Begin Your Quest
                <span>🛡️</span>
            </a>
        </div>

        <!-- Features Section -->
        <section id="features" class="features-section">
            <h2 style="text-align: center; margin-bottom: 1rem;">Why Choose XRPG?</h2>
            <p style="text-align: center; color: var(--color-muted); margin-bottom: 2rem;">
                Experience gaming like never before with features designed for the modern adventurer
            </p>
            
            <div class="features-grid">
                <div class="card feature-card">
                    <span class="feature-icon">🎨</span>
                    <h3>Total Customization</h3>
                    <p>Personalize every aspect of your interface with our advanced theming system. Dark mode, custom colors, fonts, and effects - make it truly yours.</p>
                </div>
                
                <div class="card feature-card">
                    <span class="feature-icon">🔒</span>
                    <h3>Ultra-Secure Login</h3>
                    <p>Say goodbye to passwords forever. Our passkey-only authentication provides military-grade security with the convenience of biometric login.</p>
                </div>
                
                <div class="card feature-card">
                    <span class="feature-icon">⚔️</span>
                    <h3>Epic Adventures</h3>
                    <p>Explore vast dungeons, battle fearsome monsters, and collect legendary loot. Every quest is procedurally generated for endless replayability.</p>
                </div>
                
                <div class="card feature-card">
                    <span class="feature-icon">👥</span>
                    <h3>Social Gaming</h3>
                    <p>Join guilds, team up with friends, and participate in massive raids. The adventure is always better when shared with others.</p>
                </div>
                
                <div class="card feature-card">
                    <span class="feature-icon">📈</span>
                    <h3>Deep Progression</h3>
                    <p>Level up your character with meaningful choices. Skill trees, stat allocation, and equipment crafting give you complete control over your build.</p>
                </div>
                
                <div class="card feature-card">
                    <span class="feature-icon">🌍</span>
                    <h3>Living World</h3>
                    <p>The world of XRPG evolves constantly with regular updates, seasonal events, and community-driven content that keeps the experience fresh.</p>
                </div>
            </div>
        </section>

        <!-- Getting Started Section -->
        <section id="getting-started" class="getting-started">
            <h2>Ready to Begin?</h2>
            <p style="color: var(--color-muted); margin-bottom: 0;">Getting started is easier than ever with our streamlined onboarding process</p>
            
            <div class="step-list">
                <div class="step">
                    <div class="step-number">1</div>
                    <h4>Create Account</h4>
                    <p>Sign up with just a username - no email or password required thanks to passkey technology.</p>
                </div>
                
                <div class="step">
                    <div class="step-number">2</div>
                    <h4>Customize Theme</h4>
                    <p>Make the interface your own with our powerful theme customization tools.</p>
                </div>
                
                <div class="step">
                    <div class="step-number">3</div>
                    <h4>Start Playing</h4>
                    <p>Jump right into the action with your first character and begin your epic journey!</p>
                </div>
            </div>
        </section>

        <!-- Updates Section -->
        <div class="updates-section">
            <div class="card updates-area" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">🚀 Latest Updates</h3>
                <div id="updates-container">
                    <div class="update-entry">
                        <span class="update-emoji">⏳</span>
                        <span class="update-blurb">Loading updates...</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="main-footer">
            <div class="footer-links">
                <a href="#" onclick="openModal('privacy-modal'); return false;">Privacy Policy</a>
                <a href="#" onclick="openModal('terms-modal'); return false;">Terms of Service</a>
                <a href="#" onclick="openModal('about-modal'); return false;">About XRPG</a>
                <a href="#" onclick="openModal('contact-modal'); return false;">Contact</a>
            </div>
            <div class="footer-info">
                <p>XRPG v1.0.0 • Made with ❤️ for adventurers everywhere</p>
                <p>&copy; 2025 XRPG. All rights reserved.</p>
            </div>
        </footer>
    </main>

    <!-- Modern Auth Modal -->
    <dialog id="auth-modal" class="auth-modal">
        <div class="auth-header">
            <button id="auth-close-btn" class="auth-close" aria-label="Close">&times;</button>
            <h2 id="auth-title" class="auth-title">Welcome Back</h2>
            <p id="auth-subtitle" class="auth-subtitle">Sign in to continue your adventure</p>
        </div>
        <div class="auth-body">
            <form id="auth-form" class="auth-form">
                <div class="auth-field">
                    <label for="username" class="auth-label">Username</label>
                    <input type="text" id="username" class="auth-input" placeholder="Enter your hero name..." autocomplete="username" required>
                </div>
                
                <button type="submit" id="auth-action-btn" class="auth-button auth-button-primary">
                    <span class="passkey-icon">🔑</span>Sign In
                </button>
            </form>
            
            <div class="auth-switcher">
                <div class="auth-switcher-text">
                    <button type="button" id="auth-switch-btn" class="auth-button-primary">
                        Don't have an account? Create one
                    </button>
                </div>
            </div>
        </div>
    </dialog>

    <!-- Footer Modals -->
    <dialog id="privacy-modal" class="modal">
        <div class="modal-header">
            <h2>Privacy Policy</h2>
            <button data-close-modal style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--color-muted);">&times;</button>
        </div>
        <div class="modal-body">
            <h3>Your Privacy Matters</h3>
            <p>At XRPG, we take your privacy seriously. This policy outlines how we collect, use, and protect your information.</p>
            <h4>Information We Collect</h4>
            <ul>
                <li>Account information (username, passkey data)</li>
                <li>Game progress and statistics</li>
                <li>Theme preferences and settings</li>
            </ul>
            <h4>How We Use Your Information</h4>
            <p>We use your information solely to provide and improve the XRPG gaming experience. We never sell your data to third parties.</p>
            <p><em>Last updated: January 2025</em></p>
        </div>
        <div class="modal-footer">
            <button class="button" data-close-modal>Close</button>
        </div>
    </dialog>

    <dialog id="terms-modal" class="modal">
        <div class="modal-header">
            <h2>Terms of Service</h2>
            <button data-close-modal style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--color-muted);">&times;</button>
        </div>
        <div class="modal-body">
            <h3>Terms and Conditions</h3>
            <p>By using XRPG, you agree to these terms:</p>
            <h4>1. Fair Play</h4>
            <p>Players must not use cheats, exploits, or automation tools. Play fair, have fun!</p>
            <h4>2. Respectful Community</h4>
            <p>Be respectful to other players. Harassment, hate speech, or toxic behavior will result in account suspension.</p>
            <h4>3. Account Security</h4>
            <p>You are responsible for keeping your account secure. Passkeys provide the highest level of security.</p>
            <h4>4. Virtual Items</h4>
            <p>Virtual items have no real-world value and cannot be traded for real money.</p>
            <p><em>Last updated: January 2025</em></p>
        </div>
        <div class="modal-footer">
            <button class="button" data-close-modal>I Agree</button>
        </div>
    </dialog>

    <dialog id="about-modal" class="modal">
        <div class="modal-header">
            <h2>About XRPG</h2>
            <button data-close-modal style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--color-muted);">&times;</button>
        </div>
        <div class="modal-body">
            <h3>Welcome to XRPG!</h3>
            <p>XRPG is a next-generation role-playing game that puts customization and player experience first.</p>
            <h4>Features</h4>
            <ul>
                <li>🎨 Fully customizable UI themes</li>
                <li>🔑 Secure passkey-only authentication</li>
                <li>⚔️ Epic battles and dungeons</li>
                <li>🏰 Build your own stronghold</li>
                <li>👥 Join guilds and make friends</li>
                <li>📈 Detailed stats and progression</li>
            </ul>
            <h4>Our Mission</h4>
            <p>We believe games should adapt to players, not the other way around. That's why every aspect of XRPG can be customized to match your style.</p>
            <p><strong>Version:</strong> 1.0.0<br>
            <strong>Released:</strong> January 2025</p>
        </div>
        <div class="modal-footer">
            <button class="button" data-close-modal>Cool!</button>
        </div>
    </dialog>

    <dialog id="contact-modal" class="modal">
        <div class="modal-header">
            <h2>Contact Us</h2>
            <button data-close-modal style="background: none; border: none; font-size: 1.5rem; cursor: properly:">&times;</button>
        </div>
        <div class="modal-body">
            <h3>Get in Touch</h3>
            <p>We'd love to hear from you! We typically respond to emails within 48 hours.</p>
            <div class="form-group">
                <label for="contact-email">Your Email</label>
                <input type="email" id="contact-email" placeholder="hero@example.com" style="width: 100%;">
            </div>
            <div class="form-group">
                <label for="contact-subject">Subject</label>
                <select id="contact-subject" style="width: 100%;">
                    <option>General Inquiry</option>
                    <option>Bug Report</option>
                    <option>Feature Request</option>
                    <option>Account Issue</option>
                </select>
            </div>
            <div class="form-group">
                <label for="contact-message">Message</label>
                <textarea id="contact-message" placeholder="Tell us what's on your mind..." rows="4" style="width: 100%;"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="button" data-close-modal>Cancel</button>
            <button class="button">Send Message</button>
        </div>
    </dialog>

    <script src="/assets/js/theme.js"></script>
    <script src="/assets/js/passkey.js?v=2"></script>
    <script>
        // Load updates when page loads
        loadUpdates();
        setInterval(loadUpdates, 30000);
    </script>
</body>
</html>

================
File: players/apply-class-job-change.php
================
<?php
// /players/apply-class-job-change.php - Backend handler for class and job changes

session_start();
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

require_once __DIR__ . '/../config/db.php';

function sendError($message, $code = 400) {
    http_response_code($code);
    echo json_encode(['success' => false, 'message' => $message]);
    exit;
}

function sendSuccess($message, $data = []) {
    echo json_encode(['success' => true, 'message' => $message, 'data' => $data]);
    exit;
}

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    sendError('Not authenticated', 401);
}

$user = $_SESSION['user'];
$userId = $user['id'];

// Only accept POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    sendError('Method not allowed', 405);
}

// Get and validate input
$input = json_decode(file_get_contents('php://input'), true);
if (!$input) {
    sendError('Invalid JSON input');
}

$newClassId = isset($input['class_id']) ? intval($input['class_id']) : null;
$newJobId = isset($input['job_id']) ? intval($input['job_id']) : null;

if (!$newClassId && !$newJobId) {
    sendError('No changes specified');
}

try {
    // Begin transaction
    $pdo->beginTransaction();
    
    // Get current character information
    $stmt = $pdo->prepare('
        SELECT uc.*, us.level, us.class_level, us.job_level, 
               us.strength, us.vitality, us.agility, us.intelligence, us.wisdom, us.luck,
               r.name as race_name, c.name as class_name, j.name as job_name
        FROM user_characters uc
        LEFT JOIN user_stats us ON uc.user_id = us.user_id
        LEFT JOIN races r ON uc.race_id = r.id
        LEFT JOIN classes c ON uc.class_id = c.id
        LEFT JOIN jobs j ON uc.job_id = j.id
        WHERE uc.user_id = ? AND uc.is_character_complete = 1
    ');
    $stmt->execute([$userId]);
    $character = $stmt->fetch();
    
    if (!$character) {
        $pdo->rollBack();
        sendError('Character not found or not complete');
    }
    
    // Check cooldowns
    $classSelectedTime = strtotime($character['class_selected_at']);
    $jobSelectedTime = strtotime($character['job_selected_at']);
    $lastClassChange = $character['last_class_change'] ? strtotime($character['last_class_change']) : $classSelectedTime;
    $lastJobChange = $character['last_job_change'] ? strtotime($character['last_job_change']) : $jobSelectedTime;
    
    $threeDaysAgo = time() - (3 * 24 * 60 * 60);
    $now = date('Y-m-d H:i:s');
    
    // Validate class change if requested
    if ($newClassId) {
        if ($lastClassChange > $threeDaysAgo) {
            $pdo->rollBack();
            $hoursLeft = ceil(($lastClassChange + (3 * 24 * 60 * 60) - time()) / 3600);
            sendError("Class change is on cooldown. Wait {$hoursLeft} more hours.");
        }
        
        // Validate class exists and is active
        $stmt = $pdo->prepare('SELECT * FROM classes WHERE id = ? AND is_active = 1');
        $stmt->execute([$newClassId]);
        $newClass = $stmt->fetch();
        if (!$newClass) {
            $pdo->rollBack();
            sendError('Invalid class selection');
        }
        
        // Check prerequisites
        $stmt = $pdo->prepare('SELECT * FROM prerequisites WHERE target_type = ? AND target_id = ? AND is_active = 1');
        $stmt->execute(['class', $newClassId]);
        $prereqs = $stmt->fetchAll();
        
        foreach ($prereqs as $prereq) {
            $requirement = json_decode($prereq['requirement'], true);
            
            switch ($prereq['prereq_type']) {
                case 'level':
                    if ($character['level'] < $requirement['min_level']) {
                        $pdo->rollBack();
                        sendError("Requires character level {$requirement['min_level']} (you are {$character['level']})");
                    }
                    break;
                    
                case 'class':
                    if ($character['class_name'] !== $requirement['class_name'] || 
                        $character['class_level'] < ($requirement['min_level'] ?? 1)) {
                        $pdo->rollBack();
                        $minLevel = $requirement['min_level'] ?? 1;
                        sendError("Requires {$requirement['class_name']} class level {$minLevel}");
                    }
                    break;
                    
                case 'stat':
                    $statValue = $character[$requirement['stat']] ?? 0;
                    if ($statValue < $requirement['min_value']) {
                        $pdo->rollBack();
                        $statName = ucfirst($requirement['stat']);
                        sendError("Requires {$requirement['min_value']} {$statName} (you have {$statValue})");
                    }
                    break;
            }
        }
    }
    
    // Validate job change if requested
    if ($newJobId) {
        if ($lastJobChange > $threeDaysAgo) {
            $pdo->rollBack();
            $hoursLeft = ceil(($lastJobChange + (3 * 24 * 60 * 60) - time()) / 3600);
            sendError("Job change is on cooldown. Wait {$hoursLeft} more hours.");
        }
        
        // Validate job exists and is active
        $stmt = $pdo->prepare('SELECT * FROM jobs WHERE id = ? AND is_active = 1');
        $stmt->execute([$newJobId]);
        $newJob = $stmt->fetch();
        if (!$newJob) {
            $pdo->rollBack();
            sendError('Invalid job selection');
        }
    }
    
    $changes = [];
    
    // Apply class change
    if ($newClassId && $newClassId != $character['class_id']) {
        $stmt = $pdo->prepare('UPDATE user_characters SET class_id = ?, last_class_change = ? WHERE user_id = ?');
        $stmt->execute([$newClassId, $now, $userId]);
        $changes[] = "Class changed to {$newClass['name']}";
    }
    
    // Apply job change
    if ($newJobId && $newJobId != $character['job_id']) {
        $stmt = $pdo->prepare('UPDATE user_characters SET job_id = ?, last_job_change = ? WHERE user_id = ?');
        $stmt->execute([$newJobId, $now, $userId]);
        $changes[] = "Job changed to {$newJob['name']}";
    }
    
    if (empty($changes)) {
        $pdo->rollBack();
        sendError('No actual changes were made');
    }
    
    // Recalculate stats with new class/job bonuses
    $currentClassId = $newClassId ?? $character['class_id'];
    $currentJobId = $newJobId ?? $character['job_id'];
    
    // Get race, class, and job data for stat calculation
    $stmt = $pdo->prepare('SELECT * FROM races WHERE id = ?');
    $stmt->execute([$character['race_id']]);
    $race = $stmt->fetch();
    
    $stmt = $pdo->prepare('SELECT * FROM classes WHERE id = ?');
    $stmt->execute([$currentClassId]);
    $class = $stmt->fetch();
    
    $stmt = $pdo->prepare('SELECT * FROM jobs WHERE id = ?');
    $stmt->execute([$currentJobId]);
    $job = $stmt->fetch();
    
    // Calculate new stats (base 10 + racial mods + class bonuses + job bonuses)
    $baseStats = [
        'strength' => 10,
        'vitality' => 10,
        'agility' => 10,
        'intelligence' => 10,
        'wisdom' => 10,
        'luck' => 10
    ];
    
    $newStats = [];
    foreach ($baseStats as $stat => $baseValue) {
        $newStats[$stat] = $baseValue + 
            ($race[$stat . '_mod'] ?? 0) +
            ($class[$stat . '_bonus'] ?? 0) +
            ($job[$stat . '_bonus'] ?? 0);
    }
    
    // Update max health based on new vitality
    $newMaxHealth = $newStats['vitality'] * 5 + 50;
    $currentHealthPercent = $character['health'] / $character['max_health'];
    $newHealth = min($character['health'], round($newMaxHealth * $currentHealthPercent));
    
    // Update idle gold rate
    $newIdleGoldRate = $job['idle_gold_rate'] ?? 1.0;
    
    // Update user stats
    $stmt = $pdo->prepare('
        UPDATE user_stats 
        SET strength = ?, vitality = ?, agility = ?, intelligence = ?, wisdom = ?, luck = ?,
            max_health = ?, health = ?, idle_gold_rate = ?, updated_at = ?
        WHERE user_id = ?
    ');
    $stmt->execute([
        $newStats['strength'], $newStats['vitality'], $newStats['agility'],
        $newStats['intelligence'], $newStats['wisdom'], $newStats['luck'],
        $newMaxHealth, $newHealth, $newIdleGoldRate, $now, $userId
    ]);
    
    // Log the changes
    $changeDescription = implode(', ', $changes);
    $stmt = $pdo->prepare('
        INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
        VALUES (?, ?, ?, ?, ?, ?)
    ');
    $stmt->execute([
        $userId,
        $user['username'],
        'other',
        "Character updated: {$changeDescription}",
        $_SERVER['REMOTE_ADDR'] ?? null,
        $_SERVER['HTTP_USER_AGENT'] ?? null
    ]);
    
    // Commit transaction
    $pdo->commit();
    
    // Return success with updated data
    sendSuccess('Changes applied successfully!', [
        'changes' => $changes,
        'new_stats' => $newStats,
        'new_max_health' => $newMaxHealth,
        'new_health' => $newHealth,
        'new_idle_gold_rate' => $newIdleGoldRate
    ]);
    
} catch (Exception $e) {
    $pdo->rollBack();
    error_log("Class/Job change error: " . $e->getMessage());
    sendError('Failed to apply changes: ' . $e->getMessage(), 500);
}

================
File: players/change-class-job.php
================
<?php
// /players/apply-class-job-change.php - Backend handler for class and job changes

session_start();
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

require_once __DIR__ . '/../config/db.php';

function sendError($message, $code = 400) {
    http_response_code($code);
    echo json_encode(['succes

================
File: players/character-creation.php
================
<?php
// /players/character-creation.php - Character Creation Interface

session_start();
require_once __DIR__ . '/../config/environment.php';

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    header('Location: /');
    exit;
}

$user = $_SESSION['user'];
$username = htmlspecialchars($user['username']);
$userId = $user['id'];

// Connect to database
require_once __DIR__ . '/../config/db.php';

// Check if character already exists and is complete
try {
    $stmt = $pdo->prepare('SELECT * FROM user_characters WHERE user_id = ?');
    $stmt->execute([$userId]);
    $character = $stmt->fetch();
    
    if ($character && $character['is_character_complete']) {
        // Character is already complete, redirect to dashboard
        header('Location: /players/');
        exit;
    }
} catch (Exception $e) {
    error_log("Error checking character: " . $e->getMessage());
}

// Get available races
try {
    $stmt = $pdo->prepare('SELECT * FROM races WHERE is_active = 1 ORDER BY sort_order, name');
    $stmt->execute();
    $races = $stmt->fetchAll();
} catch (Exception $e) {
    error_log("Error loading races: " . $e->getMessage());
    $races = [];
}

// Get available classes (basic tier 1 classes)
try {
    $stmt = $pdo->prepare('SELECT * FROM classes WHERE is_active = 1 AND tier = 1 ORDER BY sort_order, name');
    $stmt->execute();
    $classes = $stmt->fetchAll();
} catch (Exception $e) {
    error_log("Error loading classes: " . $e->getMessage());
    $classes = [];
}

// Get available jobs
try {
    $stmt = $pdo->prepare('SELECT * FROM jobs WHERE is_active = 1 ORDER BY sort_order, name');
    $stmt->execute();
    $jobs = $stmt->fetchAll();
} catch (Exception $e) {
    error_log("Error loading jobs: " . $e->getMessage());
    $jobs = [];
}

// Get user preferences for theme
try {
    $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
    $stmt->execute([$userId]);
    $preferences = $stmt->fetch();
    
    if (!$preferences) {
        $preferences = [
            'theme_mode' => 'dark',
            'accent_color' => '#5299e0',
            'accent_secondary' => '#81aaff',
            'border_radius' => 18,
            'shadow_intensity' => 0.36,
            'ui_opacity' => 0.96,
            'font_family' => 'sans'
        ];
    }
} catch (Exception $e) {
    $preferences = [
        'theme_mode' => 'dark',
        'accent_color' => '#5299e0',
        'accent_secondary' => '#81aaff',
        'border_radius' => 18,
        'shadow_intensity' => 0.36,
        'ui_opacity' => 0.96,
        'font_family' => 'sans'
    ];
}
?>
<!DOCTYPE html>
<html lang="en" data-theme="<?= htmlspecialchars($preferences['theme_mode']) ?>">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - Character Creation</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/ico/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/ico/favicon-16x16.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.ico">
    <meta name="theme-color" content="#ffffff">
    <style>
        :root {
            --user-accent: <?= htmlspecialchars($preferences['accent_color']) ?>;
            --user-accent2: <?= htmlspecialchars($preferences['accent_secondary']) ?>;
            --user-radius: <?= intval($preferences['border_radius']) ?>px;
            --user-shadow-intensity: <?= floatval($preferences['shadow_intensity']) ?>;
            --user-opacity: <?= floatval($preferences['ui_opacity']) ?>;
            --user-font: var(--font-<?= htmlspecialchars($preferences['font_family']) ?>);
        }
        
        .creation-header {
            text-align: center;
            padding: 2rem;
            background: var(--gradient-accent);
            color: white;
            margin-bottom: 2rem;
            border-radius: var(--user-radius);
        }
        
        .step-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .step {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: calc(var(--user-radius) * 0.5);
            background: var(--color-surface);
            border: 2px solid var(--color-border);
            transition: all 0.3s ease;
        }
        
        .step.active {
            background: var(--gradient-accent);
            color: white;
            border-color: var(--color-accent);
        }
        
        .step.completed {
            background: rgba(76, 175, 80, 0.2);
            border-color: #4caf50;
            color: #4caf50;
        }
        
        .step-number {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.2);
            font-weight: bold;
            font-size: 0.875rem;
        }
        
        .step.completed .step-number {
            background: #4caf50;
            color: white;
        }
        
        .creation-section {
            margin-bottom: 3rem;
        }
        
        .section-hidden {
            display: none;
        }
        
        .selection-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }
        
        .selection-card {
            position: relative;
            padding: 1.5rem;
            border: 2px solid var(--color-border);
            border-radius: var(--user-radius);
            background: var(--color-surface);
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
        }
        
        .selection-card:hover {
            border-color: var(--color-accent);
            transform: translateY(-2px);
            box-shadow: var(--shadow-glow);
        }
        
        .selection-card.selected {
            border-color: var(--color-accent);
            background: linear-gradient(135deg, var(--color-surface), rgba(var(--user-accent), 0.1));
            box-shadow: var(--shadow-glow);
        }
        
        .selection-card.locked {
            opacity: 0.5;
            cursor: not-allowed;
            border-color: #666;
        }
        
        .selection-card.locked:hover {
            transform: none;
            box-shadow: none;
        }
        
        .card-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .card-icon {
            font-size: 2rem;
            min-width: 2rem;
        }
        
        .card-title {
            font-size: 1.25rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .card-description {
            color: var(--color-text-secondary);
            margin-bottom: 1rem;
            line-height: 1.5;
        }
        
        .stat-bonuses {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 0.5rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--color-border);
        }
        
        .stat-bonus {
            text-align: center;
            font-size: 0.875rem;
        }
        
        .stat-name {
            color: var(--color-muted);
            font-size: 0.75rem;
        }
        
        .stat-value {
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .stat-value.positive {
            color: #4caf50;
        }
        
        .stat-value.negative {
            color: #f44336;
        }
        
        .special-abilities {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--color-border);
        }
        
        .ability-tag {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background: rgba(var(--user-accent), 0.2);
            border-radius: calc(var(--user-radius) * 0.25);
            font-size: 0.75rem;
            margin: 0.25rem;
            color: var(--color-accent);
        }
        
        .warning-box {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid rgba(255, 193, 7, 0.3);
            color: #ffc107;
            padding: 1rem;
            border-radius: calc(var(--user-radius) * 0.5);
            margin: 1rem 0;
        }
        
        .info-box {
            background: rgba(33, 150, 243, 0.1);
            border: 1px solid rgba(33, 150, 243, 0.3);
            color: #2196f3;
            padding: 1rem;
            border-radius: calc(var(--user-radius) * 0.5);
            margin: 1rem 0;
        }
        
        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin: 2rem 0;
            flex-wrap: wrap;
        }
        
        .final-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        
        .final-stat {
            text-align: center;
            padding: 1rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
        }
        
        .final-stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .final-stat-name {
            color: var(--color-muted);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .character-summary {
            background: var(--color-surface-alt);
            padding: 2rem;
            border-radius: var(--user-radius);
            margin: 2rem 0;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--color-border);
        }
        
        .summary-row:last-child {
            border-bottom: none;
        }
        
        .summary-label {
            font-weight: bold;
            color: var(--color-text);
        }
        
        .summary-value {
            color: var(--color-accent);
            font-weight: bold;
        }
        
        .prerequisite-list {
            margin-top: 0.5rem;
            padding-left: 1rem;
        }
        
        .prerequisite {
            color: var(--color-muted);
            font-size: 0.875rem;
            margin: 0.25rem 0;
        }
        
        .locked-overlay {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(255, 100, 100, 0.9);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0 var(--user-radius) 0 calc(var(--user-radius) * 0.5);
            font-size: 0.75rem;
            font-weight: bold;
        }
    </style>
</head>
<body class="authenticated">
    <!-- Fixed Theme Toggle -->
    <button id="theme-toggle" class="theme-toggle-fixed" title="Toggle light/dark mode">
        <?= $preferences['theme_mode'] === 'dark' ? '🌞' : '🌙' ?>
    </button>

    <!-- Main Header -->
    <header class="main-header">
        <div class="header-title">XRPG - Character Creation</div>
        <div class="header-actions">
            <button class="button" onclick="logout()" title="Logout">
                <span style="margin-right: 0.5rem;">🚪</span>Logout
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Creation Header -->
        <div class="creation-header">
            <h1 style="margin: 0 0 0.5rem 0;">⚔️ Create Your Character</h1>
            <p style="margin: 0; opacity: 0.9;">Welcome, <?= $username ?>! Let's build your legend.</p>
        </div>

        <!-- Step Indicator -->
        <div class="step-indicator">
            <div class="step active" id="step-race">
                <div class="step-number">1</div>
                <span>Choose Race</span>
            </div>
            <div class="step" id="step-class">
                <div class="step-number">2</div>
                <span>Select Class</span>
            </div>
            <div class="step" id="step-job">
                <div class="step-number">3</div>
                <span>Pick Job</span>
            </div>
            <div class="step" id="step-confirm">
                <div class="step-number">4</div>
                <span>Confirm</span>
            </div>
        </div>

        <!-- Race Selection -->
        <div class="creation-section" id="section-race">
            <div class="card" style="padding: 2rem;">
                <h2 style="margin-top: 0; color: var(--color-accent);">🧬 Choose Your Race</h2>
                
                <div class="warning-box">
                    <strong>⚠️ Permanent Decision!</strong><br>
                    Your race choice is permanent and cannot be changed. Choose wisely!
                </div>
                
                <div class="info-box">
                    <strong>ℹ️ About Races:</strong><br>
                    Each race provides permanent stat bonuses and penalties that will affect your character throughout their entire journey.
                </div>

                <div class="selection-grid">
                    <?php foreach ($races as $race): ?>
                        <div class="selection-card" data-type="race" data-id="<?= $race['id'] ?>" data-name="<?= htmlspecialchars($race['name']) ?>">
                            <div class="card-header">
                                <div class="card-icon">
                                    <?php
                                    $icons = ['Human' => '👤', 'Elf' => '🧝', 'Dwarf' => '🧔', 'Orc' => '👹', 'Halfling' => '🧙'];
                                    echo $icons[$race['name']] ?? '👤';
                                    ?>
                                </div>
                                <div class="card-title"><?= htmlspecialchars($race['name']) ?></div>
                            </div>
                            
                            <div class="card-description">
                                <?= htmlspecialchars($race['description']) ?>
                            </div>
                            
                            <div class="stat-bonuses">
                                <?php
                                $stats = ['strength' => 'STR', 'vitality' => 'VIT', 'agility' => 'AGI', 'intelligence' => 'INT', 'wisdom' => 'WIS', 'luck' => 'LCK'];
                                foreach ($stats as $stat => $abbr):
                                    $value = $race[$stat . '_mod'];
                                    if ($value != 0):
                                ?>
                                    <div class="stat-bonus">
                                        <div class="stat-value <?= $value > 0 ? 'positive' : 'negative' ?>">
                                            <?= $value > 0 ? '+' : '' ?><?= $value ?>
                                        </div>
                                        <div class="stat-name"><?= $abbr ?></div>
                                    </div>
                                <?php endif; endforeach; ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>

                <div class="action-buttons">
                    <button id="race-continue" class="button" onclick="continueToClass()" disabled>
                        Continue to Class Selection →
                    </button>
                </div>
            </div>
        </div>

        <!-- Class Selection -->
        <div class="creation-section section-hidden" id="section-class">
            <div class="card" style="padding: 2rem;">
                <h2 style="margin-top: 0; color: var(--color-accent);">⚔️ Select Your Class</h2>
                
                <div class="info-box">
                    <strong>ℹ️ About Classes:</strong><br>
                    Classes determine your combat role and provide stat bonuses. You can change classes later, but not for 3 days after character creation.
                </div>

                <div class="selection-grid">
                    <?php foreach ($classes as $class): ?>
                        <div class="selection-card" data-type="class" data-id="<?= $class['id'] ?>" data-name="<?= htmlspecialchars($class['name']) ?>">
                            <div class="card-header">
                                <div class="card-icon">
                                    <?php
                                    $icons = ['Fighter' => '⚔️', 'Mage' => '🧙‍♂️', 'Rogue' => '🗡️', 'Cleric' => '✨', 'Ranger' => '🏹'];
                                    echo $icons[$class['name']] ?? '⚔️';
                                    ?>
                                </div>
                                <div class="card-title"><?= htmlspecialchars($class['name']) ?></div>
                            </div>
                            
                            <div class="card-description">
                                <?= htmlspecialchars($class['description']) ?>
                            </div>
                            
                            <div class="stat-bonuses">
                                <?php
                                $stats = ['strength' => 'STR', 'vitality' => 'VIT', 'agility' => 'AGI', 'intelligence' => 'INT', 'wisdom' => 'WIS', 'luck' => 'LCK'];
                                foreach ($stats as $stat => $abbr):
                                    $value = $class[$stat . '_bonus'];
                                    if ($value != 0):
                                ?>
                                    <div class="stat-bonus">
                                        <div class="stat-value positive">+<?= $value ?></div>
                                        <div class="stat-name"><?= $abbr ?></div>
                                    </div>
                                <?php endif; endforeach; ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>

                <div class="action-buttons">
                    <button class="button" onclick="goBackToRace()">← Back to Race</button>
                    <button id="class-continue" class="button" onclick="continueToJob()" disabled>
                        Continue to Job Selection →
                    </button>
                </div>
            </div>
        </div>

        <!-- Job Selection -->
        <div class="creation-section section-hidden" id="section-job">
            <div class="card" style="padding: 2rem;">
                <h2 style="margin-top: 0; color: var(--color-accent);">💼 Pick Your Job</h2>
                
                <div class="info-box">
                    <strong>ℹ️ About Jobs:</strong><br>
                    Jobs provide economic benefits and small stat bonuses. They affect your idle gold income and merchant prices. You can change jobs later, but not for 3 days after character creation.
                </div>

                <div class="selection-grid">
                    <?php foreach ($jobs as $job): ?>
                        <div class="selection-card" data-type="job" data-id="<?= $job['id'] ?>" data-name="<?= htmlspecialchars($job['name']) ?>">
                            <div class="card-header">
                                <div class="card-icon">
                                    <?php
                                    $icons = [
                                        'Merchant' => '💰', 'Blacksmith' => '🔨', 'Scholar' => '📚',
                                        'Gambler' => '🎲', 'Farmer' => '🌾', 'Adventurer' => '🗺️'
                                    ];
                                    echo $icons[$job['name']] ?? '💼';
                                    ?>
                                </div>
                                <div class="card-title"><?= htmlspecialchars($job['name']) ?></div>
                            </div>
                            
                            <div class="card-description">
                                <?= htmlspecialchars($job['description']) ?>
                            </div>
                            
                            <div class="special-abilities">
                                <?php if ($job['idle_gold_rate'] != 1.0): ?>
                                    <div class="ability-tag">
                                        💰 <?= $job['idle_gold_rate'] ?>x Gold Rate
                                    </div>
                                <?php endif; ?>
                                
                                <?php if ($job['merchant_discount'] > 0): ?>
                                    <div class="ability-tag">
                                        🛒 <?= $job['merchant_discount'] ?>% Discount
                                    </div>
                                <?php endif; ?>
                            </div>
                            
                            <div class="stat-bonuses">
                                <?php
                                $stats = ['strength' => 'STR', 'vitality' => 'VIT', 'agility' => 'AGI', 'intelligence' => 'INT', 'wisdom' => 'WIS', 'luck' => 'LCK'];
                                foreach ($stats as $stat => $abbr):
                                    $value = $job[$stat . '_bonus'];
                                    if ($value != 0):
                                ?>
                                    <div class="stat-bonus">
                                        <div class="stat-value positive">+<?= $value ?></div>
                                        <div class="stat-name"><?= $abbr ?></div>
                                    </div>
                                <?php endif; endforeach; ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>

                <div class="action-buttons">
                    <button class="button" onclick="goBackToClass()">← Back to Class</button>
                    <button id="job-continue" class="button" onclick="continueToConfirm()" disabled>
                        Continue to Confirmation →
                    </button>
                </div>
            </div>
        </div>

        <!-- Final Confirmation -->
        <div class="creation-section section-hidden" id="section-confirm">
            <div class="card" style="padding: 2rem;">
                <h2 style="margin-top: 0; color: var(--color-accent);">✅ Confirm Your Character</h2>
                
                <div class="character-summary">
                    <h3 style="margin-top: 0;">Character Summary</h3>
                    <div class="summary-row">
                        <span class="summary-label">Race:</span>
                        <span class="summary-value" id="selected-race">-</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Class:</span>
                        <span class="summary-value" id="selected-class">-</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Job:</span>
                        <span class="summary-value" id="selected-job">-</span>
                    </div>
                </div>

                <h3 style="color: var(--color-accent);">📊 Final Character Stats</h3>
                <div class="final-stats" id="final-stats">
                    <!-- Stats will be calculated and displayed here -->
                </div>

                <div class="warning-box">
                    <strong>⚠️ Final Warning!</strong><br>
                    Once you confirm your character, your race choice is permanent and your class/job cannot be changed for 3 days. Are you sure you want to proceed?
                </div>

                <div class="action-buttons">
                    <button class="button" onclick="goBackToJob()">← Back to Job Selection</button>
                    <button id="confirm-character" class="button" onclick="confirmCharacter()">
                        🎮 Create My Character!
                    </button>
                </div>
            </div>
        </div>

        <!-- Loading Overlay -->
        <div id="loading-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 9999;  align-items: center; justify-content: center;">
            <div style="text-align: center; color: white;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">⚡</div>
                <div style="font-size: 1.5rem;">Creating your character...</div>
            </div>
        </div>
    </main>

    <script>
        // Pass user preferences and data to JavaScript
        const userPreferences = <?= json_encode($preferences) ?>;
        const racesData = <?= json_encode($races) ?>;
        const classesData = <?= json_encode($classes) ?>;
        const jobsData = <?= json_encode($jobs) ?>;
        
        // Character creation state
        let selectedRace = null;
        let selectedClass = null;
        let selectedJob = null;
        
        // Selection handlers
        function selectCard(type, id, name) {
            // Remove previous selection
            document.querySelectorAll(`[data-type="${type}"]`).forEach(card => {
                card.classList.remove('selected');
            });
            
            // Select new card
            const card = document.querySelector(`[data-type="${type}"][data-id="${id}"]`);
            if (card) {
                card.classList.add('selected');
            }
            
            // Update state
            switch(type) {
                case 'race':
                    selectedRace = {id, name};
                    document.getElementById('race-continue').disabled = false;
                    break;
                case 'class':
                    selectedClass = {id, name};
                    document.getElementById('class-continue').disabled = false;
                    break;
                case 'job':
                    selectedJob = {id, name};
                    document.getElementById('job-continue').disabled = false;
                    break;
            }
        }
        
        // Navigation functions
        function continueToClass() {
            updateStepIndicator('class');
            showSection('section-class');
        }
        
        function continueToJob() {
            updateStepIndicator('job');
            showSection('section-job');
        }
        
        function continueToConfirm() {
            updateStepIndicator('confirm');
            showSection('section-confirm');
            updateCharacterSummary();
            calculateFinalStats();
        }
        
        function goBackToRace() {
            updateStepIndicator('race');
            showSection('section-race');
        }
        
        function goBackToClass() {
            updateStepIndicator('class');
            showSection('section-class');
        }
        
        function goBackToJob() {
            updateStepIndicator('job');
            showSection('section-job');
        }
        
        function updateStepIndicator(activeStep) {
            const steps = ['race', 'class', 'job', 'confirm'];
            const stepElements = ['step-race', 'step-class', 'step-job', 'step-confirm'];
            
            stepElements.forEach((stepId, index) => {
                const stepEl = document.getElementById(stepId);
                const stepName = steps[index];
                
                stepEl.classList.remove('active', 'completed');
                
                if (stepName === activeStep) {
                    stepEl.classList.add('active');
                } else if (steps.indexOf(stepName) < steps.indexOf(activeStep)) {
                    stepEl.classList.add('completed');
                    stepEl.querySelector('.step-number').textContent = '✓';
                } else {
                    stepEl.querySelector('.step-number').textContent = index + 1;
                }
            });
        }
        
        function showSection(sectionId) {
            document.querySelectorAll('.creation-section').forEach(section => {
                section.classList.add('section-hidden');
            });
            document.getElementById(sectionId).classList.remove('section-hidden');
        }
        
        function updateCharacterSummary() {
            document.getElementById('selected-race').textContent = selectedRace ? selectedRace.name : '-';
            document.getElementById('selected-class').textContent = selectedClass ? selectedClass.name : '-';
            document.getElementById('selected-job').textContent = selectedJob ? selectedJob.name : '-';
        }
        
        function calculateFinalStats() {
            if (!selectedRace || !selectedClass || !selectedJob) return;
            
            // Base stats
            const baseStats = {
                strength: 10,
                vitality: 10,
                agility: 10,
                intelligence: 10,
                wisdom: 10,
                luck: 10
            };
            
            // Find selected data
            const race = racesData.find(r => r.id == selectedRace.id);
            const playerClass = classesData.find(c => c.id == selectedClass.id);
            const job = jobsData.find(j => j.id == selectedJob.id);
            
            // Calculate final stats
            const finalStats = {};
            for (const stat in baseStats) {
                finalStats[stat] = baseStats[stat] + 
                    (race[stat + '_mod'] || 0) +
                    (playerClass[stat + '_bonus'] || 0) +
                    (job[stat + '_bonus'] || 0);
            }
            
            // Display stats
            const statsContainer = document.getElementById('final-stats');
            statsContainer.innerHTML = Object.entries(finalStats).map(([stat, value]) => `
                <div class="final-stat">
                    <div class="final-stat-value">${value}</div>
                    <div class="final-stat-name">${stat.charAt(0).toUpperCase() + stat.slice(1)}</div>
                </div>
            `).join('');
        }
        
        async function confirmCharacter() {
            if (!selectedRace || !selectedClass || !selectedJob) {
                alert('Please make all selections first!');
                return;
            }
            
            const loadingOverlay = document.getElementById('loading-overlay');
            loadingOverlay.style.display = 'flex';
            
            try {
                const response = await fetch('/players/create-character.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        race_id: selectedRace.id,
                        class_id: selectedClass.id,
                        job_id: selectedJob.id
                    }),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Character created successfully
                    alert('🎉 Character created successfully! Welcome to XRPG!');
                    window.location.href = '/players/';
                } else {
                    throw new Error(result.message || 'Failed to create character');
                }
            } catch (error) {
                console.error('Error creating character:', error);
                alert('❌ Failed to create character: ' + error.message);
            } finally {
                loadingOverlay.style.display = 'none';
            }
        }
        
        function logout() {
            if (confirm('Are you sure you want to logout? Your character creation progress will be lost.')) {
                fetch('/auth/logout.php', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                .then(() => {
                    window.location.href = '/';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    window.location.href = '/';
                });
            }
        }
        
        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', () => {
            // Add click handlers to selection cards
            document.querySelectorAll('.selection-card').forEach(card => {
                card.addEventListener('click', () => {
                    if (card.classList.contains('locked')) return;
                    
                    const type = card.dataset.type;
                    const id = card.dataset.id;
                    const name = card.dataset.name;
                    
                    selectCard(type, id, name);
                });
            });
        });
    </script>
    <script src="/assets/js/theme.js"></script>
</body>
</html>

================
File: players/character.php
================
<?php
// /players/character.php - Detailed character information page

session_start();
require_once __DIR__ . '/../config/environment.php';

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    header('Location: /');
    exit;
}

$user = $_SESSION['user'];
$username = htmlspecialchars($user['username']);
$userId = $user['id'];

// Connect to database
require_once __DIR__ . '/../config/db.php';

// Get comprehensive character information
try {
    $stmt = $pdo->prepare('
        SELECT uc.*, r.name as race_name, r.description as race_description,
               r.strength_mod, r.vitality_mod, r.agility_mod, r.intelligence_mod, r.wisdom_mod, r.luck_mod,
               c.name as class_name, c.description as class_description, c.tier as class_tier,
               c.strength_bonus as class_str, c.vitality_bonus as class_vit, c.agility_bonus as class_agi,
               c.intelligence_bonus as class_int, c.wisdom_bonus as class_wis, c.luck_bonus as class_lck,
               j.name as job_name, j.description as job_description, j.category as job_category,
               j.strength_bonus as job_str, j.vitality_bonus as job_vit, j.agility_bonus as job_agi,
               j.intelligence_bonus as job_int, j.wisdom_bonus as job_wis, j.luck_bonus as job_lck,
               j.idle_gold_rate, j.merchant_discount,
               us.level, us.experience, us.gold, us.health, us.max_health,
               us.strength, us.vitality, us.agility, us.intelligence, us.wisdom, us.luck,
               us.class_experience, us.class_level, us.job_experience, us.job_level,
               us.last_idle_update
        FROM user_characters uc
        LEFT JOIN races r ON uc.race_id = r.id
        LEFT JOIN classes c ON uc.class_id = c.id  
        LEFT JOIN jobs j ON uc.job_id = j.id
        LEFT JOIN user_stats us ON uc.user_id = us.user_id
        WHERE uc.user_id = ? AND uc.is_character_complete = 1
    ');
    $stmt->execute([$userId]);
    $character = $stmt->fetch();
    
    if (!$character) {
        header('Location: /players/character-creation.php');
        exit;
    }
} catch (Exception $e) {
    error_log("Error loading character details: " . $e->getMessage());
    header('Location: /players/');
    exit;
}

// Calculate base stats breakdown
$baseStats = 10;
$racialMods = [
    'strength' => $character['strength_mod'],
    'vitality' => $character['vitality_mod'],
    'agility' => $character['agility_mod'],
    'intelligence' => $character['intelligence_mod'],
    'wisdom' => $character['wisdom_mod'],
    'luck' => $character['luck_mod']
];

$classBonuses = [
    'strength' => $character['class_str'],
    'vitality' => $character['class_vit'],
    'agility' => $character['class_agi'],
    'intelligence' => $character['class_int'],
    'wisdom' => $character['class_wis'],
    'luck' => $character['class_lck']
];

$jobBonuses = [
    'strength' => $character['job_str'],
    'vitality' => $character['job_vit'],
    'agility' => $character['job_agi'],
    'intelligence' => $character['job_int'],
    'wisdom' => $character['job_wis'],
    'luck' => $character['job_lck']
];

// Check change cooldowns
$classSelectedTime = strtotime($character['class_selected_at']);
$jobSelectedTime = strtotime($character['job_selected_at']);
$lastClassChange = $character['last_class_change'] ? strtotime($character['last_class_change']) : $classSelectedTime;
$lastJobChange = $character['last_job_change'] ? strtotime($character['last_job_change']) : $jobSelectedTime;

$threeDaysAgo = time() - (3 * 24 * 60 * 60);
$canChangeClass = $lastClassChange <= $threeDaysAgo;
$canChangeJob = $lastJobChange <= $threeDaysAgo;

$daysUntilClassChange = $canChangeClass ? 0 : ceil(($lastClassChange + (3 * 24 * 60 * 60) - time()) / (24 * 60 * 60));
$daysUntilJobChange = $canChangeJob ? 0 : ceil(($lastJobChange + (3 * 24 * 60 * 60) - time()) / (24 * 60 * 60));

// Get user preferences
try {
    $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
    $stmt->execute([$userId]);
    $preferences = $stmt->fetch();
    
    if (!$preferences) {
        $preferences = [
            'theme_mode' => 'dark',
            'accent_color' => '#5299e0',
            'accent_secondary' => '#81aaff',
            'border_radius' => 18,
            'shadow_intensity' => 0.36,
            'ui_opacity' => 0.96,
            'font_family' => 'sans'
        ];
    }
} catch (Exception $e) {
    $preferences = [
        'theme_mode' => 'dark',
        'accent_color' => '#5299e0',
        'accent_secondary' => '#81aaff',
        'border_radius' => 18,
        'shadow_intensity' => 0.36,
        'ui_opacity' => 0.96,
        'font_family' => 'sans'
    ];
}
?>
<!DOCTYPE html>
<html lang="en" data-theme="<?= htmlspecialchars($preferences['theme_mode']) ?>">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - Character Details</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/ico/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/ico/favicon-16x16.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.ico">
    <meta name="theme-color" content="#ffffff">
    <style>
        :root {
            --user-accent: <?= htmlspecialchars($preferences['accent_color']) ?>;
            --user-accent2: <?= htmlspecialchars($preferences['accent_secondary']) ?>;
            --user-radius: <?= intval($preferences['border_radius']) ?>px;
            --user-shadow-intensity: <?= floatval($preferences['shadow_intensity']) ?>;
            --user-opacity: <?= floatval($preferences['ui_opacity']) ?>;
            --user-font: var(--font-<?= htmlspecialchars($preferences['font_family']) ?>);
        }
        
        .character-header {
            text-align: center;
            padding: 2rem;
            background: var(--gradient-accent);
            color: white;
            margin-bottom: 2rem;
            border-radius: var(--user-radius);
        }
        
        .character-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-breakdown-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .stat-breakdown {
            padding: 1rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
        }
        
        .stat-breakdown h4 {
            margin: 0 0 0.5rem 0;
            color: var(--color-accent);
            text-align: center;
        }
        
        .stat-component {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.25rem 0;
            font-size: 0.875rem;
        }
        
        .stat-component:last-child {
            border-top: 1px solid var(--color-border);
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .stat-value {
            font-weight: bold;
        }
        
        .stat-value.positive {
            color: #4caf50;
        }
        
        .stat-value.negative {
            color: #f44336;
        }
        
        .stat-value.neutral {
            color: var(--color-text);
        }
        
        .progress-bar {
            width: 100%;
            height: 12px;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.25);
            overflow: hidden;
            margin: 0.5rem 0;
        }
        
        .progress-fill {
            height: 100%;
            transition: width 0.3s ease;
        }
        
        .health-bar {
            background: linear-gradient(90deg, #ff4444, #ffaa00, #44ff44);
        }
        
        .exp-bar {
            background: var(--gradient-accent);
        }
        
        .class-exp-bar {
            background: linear-gradient(90deg, #ff9800, #ffc107);
        }
        
        .job-exp-bar {
            background: linear-gradient(90deg, #9c27b0, #e91e63);
        }
        
        .character-summary {
            background: var(--color-surface-alt);
            padding: 1.5rem;
            border-radius: var(--user-radius);
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--color-border);
        }
        
        .summary-row:last-child {
            border-bottom: none;
        }
        
        .summary-label {
            font-weight: bold;
            color: var(--color-text);
        }
        
        .summary-value {
            color: var(--color-accent);
            font-weight: bold;
        }
        
        .cooldown-info {
            color: var(--color-muted);
            font-size: 0.75rem;
            font-style: italic;
        }
        
        .level-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .level-card {
            text-align: center;
            padding: 1rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
        }
        
        .level-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .level-type {
            color: var(--color-muted);
            font-size: 0.875rem;
        }
        
        .abilities-section {
            margin-top: 1rem;
        }
        
        .ability-tag {
            display: inline-block;
            padding: 0.5rem 1rem;
            background: rgba(var(--user-accent), 0.2);
            border-radius: calc(var(--user-radius) * 0.5);
            margin: 0.25rem;
            color: var(--color-accent);
            font-size: 0.875rem;
        }
        
        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin: 2rem 0;
            flex-wrap: wrap;
        }
        
        .tier-badge {
            background: var(--gradient-accent);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: calc(var(--user-radius) * 0.25);
            font-size: 0.75rem;
        }
    </style>
</head>
<body class="authenticated">
    <!-- Fixed Theme Toggle -->
    <button id="theme-toggle" class="theme-toggle-fixed" title="Toggle light/dark mode">
        <?= $preferences['theme_mode'] === 'dark' ? '🌞' : '🌙' ?>
    </button>

    <!-- Side Navigation -->
    <nav class="side-nav">
        <button class="side-nav-toggle" title="Toggle menu">☰</button>
        <div class="side-nav-items">
            <a href="/players/" class="side-nav-item" title="Dashboard">
                <span class="side-nav-icon">🏠</span>
                <span class="side-nav-text">Dashboard</span>
            </a>
            <a href="/players/character.php" class="side-nav-item active" title="Character">
                <span class="side-nav-icon">⚔️</span>
                <span class="side-nav-text">Character</span>
            </a>
            <a href="/players/inventory.php" class="side-nav-item" title="Inventory">
                <span class="side-nav-icon">🎒</span>
                <span class="side-nav-text">Inventory</span>
            </a>
            <a href="/players/dungeon.php" class="side-nav-item" title="Dungeons">
                <span class="side-nav-icon">🏰</span>
                <span class="side-nav-text">Dungeons</span>
            </a>
            <a href="/players/guild.php" class="side-nav-item" title="Guild">
                <span class="side-nav-icon">👥</span>
                <span class="side-nav-text">Guild</span>
            </a>
            <a href="/players/settings.php" class="side-nav-item" title="Settings">
                <span class="side-nav-icon">⚙️</span>
                <span class="side-nav-text">Settings</span>
            </a>
        </div>
    </nav>

    <!-- Main Header -->
    <header class="main-header">
        <div class="header-title">XRPG - Character Details</div>
        <div class="header-actions">
            <button class="button" onclick="window.location.href='/players/'" title="Back to Dashboard">
                <span style="margin-right: 0.5rem;">🏠</span>Dashboard
            </button>
            <button class="button" onclick="logout()" title="Logout">
                <span style="margin-right: 0.5rem;">🚪</span>Logout
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Character Header -->
        <div class="character-header">
            <h1 style="margin: 0 0 0.5rem 0;">⚔️ <?= $username ?></h1>
            <p style="margin: 0; opacity: 0.9;">
                Level <?= $character['level'] ?> <?= htmlspecialchars($character['race_name']) ?> 
                <?= htmlspecialchars($character['class_name']) ?>
                <?php if ($character['class_tier'] > 1): ?>
                    <span class="tier-badge">Tier <?= $character['class_tier'] ?></span>
                <?php endif; ?>
            </p>
        </div>

        <!-- Character Grid -->
        <div class="character-grid">
            <!-- Character Summary -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">📋 Character Information</h3>
                
                <div class="character-summary">
                    <div class="summary-row">
                        <span class="summary-label">Race:</span>
                        <span class="summary-value"><?= htmlspecialchars($character['race_name']) ?></span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Class:</span>
                        <span class="summary-value">
                            <?= htmlspecialchars($character['class_name']) ?>
                            <?php if (!$canChangeClass): ?>
                                <div class="cooldown-info">Can change in <?= $daysUntilClassChange ?> day(s)</div>
                            <?php endif; ?>
                        </span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Job:</span>
                        <span class="summary-value">
                            <?= htmlspecialchars($character['job_name']) ?> (<?= ucfirst($character['job_category']) ?>)
                            <?php if (!$canChangeJob): ?>
                                <div class="cooldown-info">Can change in <?= $daysUntilJobChange ?> day(s)</div>
                            <?php endif; ?>
                        </span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Gold:</span>
                        <span class="summary-value"><?= number_format($character['gold']) ?></span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">Created:</span>
                        <span class="summary-value"><?= date('M j, Y', strtotime($character['character_created_at'])) ?></span>
                    </div>
                </div>
                
                <!-- Level Information -->
                <div class="level-info">
                    <div class="level-card">
                        <div class="level-number"><?= $character['level'] ?></div>
                        <div class="level-type">Character Level</div>
                    </div>
                    <div class="level-card">
                        <div class="level-number"><?= $character['class_level'] ?></div>
                        <div class="level-type">Class Level</div>
                    </div>
                    <div class="level-card">
                        <div class="level-number"><?= $character['job_level'] ?></div>
                        <div class="level-type">Job Level</div>
                    </div>
                </div>
            </div>

            <!-- Health & Experience -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">💖 Health & Experience</h3>
                
                <!-- Health -->
                <div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                        <span style="font-weight: bold;">Health</span>
                        <span><?= $character['health'] ?>/<?= $character['max_health'] ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill health-bar" style="width: <?= ($character['health'] / $character['max_health']) * 100 ?>%;"></div>
                    </div>
                </div>
                
                <!-- Character Experience -->
                <div style="margin-top: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                        <span style="font-weight: bold;">Character Experience</span>
                        <span><?= number_format($character['experience']) ?>/<?= number_format($character['level'] * 1000) ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill exp-bar" style="width: <?= min(($character['experience'] / ($character['level'] * 1000)) * 100, 100) ?>%;"></div>
                    </div>
                </div>
                
                <!-- Class Experience -->
                <div style="margin-top: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                        <span style="font-weight: bold;">Class Experience</span>
                        <span><?= number_format($character['class_experience']) ?>/<?= number_format($character['class_level'] * 500) ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill class-exp-bar" style="width: <?= min(($character['class_experience'] / ($character['class_level'] * 500)) * 100, 100) ?>%;"></div>
                    </div>
                </div>
                
                <!-- Job Experience -->
                <div style="margin-top: 1.5rem;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                        <span style="font-weight: bold;">Job Experience</span>
                        <span><?= number_format($character['job_experience']) ?>/<?= number_format($character['job_level'] * 300) ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill job-exp-bar" style="width: <?= min(($character['job_experience'] / ($character['job_level'] * 300)) * 100, 100) ?>%;"></div>
                    </div>
                </div>
            </div>

            <!-- Job Benefits -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">💼 Job Benefits</h3>
                
                <div class="abilities-section">
                    <div class="ability-tag">
                        💰 <?= number_format($character['idle_gold_rate'], 2) ?>x Idle Gold
                    </div>
                    
                    <?php if ($character['merchant_discount'] > 0): ?>
                        <div class="ability-tag">
                            🛒 <?= $character['merchant_discount'] ?>% Merchant Discount
                        </div>
                    <?php endif; ?>
                    
                    <div class="ability-tag">
                        📂 <?= ucfirst($character['job_category']) ?> Category
                    </div>
                </div>
                
                <p style="margin-top: 1rem; color: var(--color-text-secondary); font-style: italic;">
                    "<?= htmlspecialchars($character['job_description']) ?>"
                </p>
            </div>
        </div>

        <!-- Stat Breakdown -->
        <div class="card" style="padding: 2rem;">
            <h3 style="margin-top: 0;">📊 Detailed Stat Breakdown</h3>
            <p style="color: var(--color-text-secondary);">See how your race, class, and job contribute to your final stats.</p>
            
            <div class="stat-breakdown-grid">
                <?php
                $statNames = [
                    'strength' => 'Strength',
                    'vitality' => 'Vitality', 
                    'agility' => 'Agility',
                    'intelligence' => 'Intelligence',
                    'wisdom' => 'Wisdom',
                    'luck' => 'Luck'
                ];
                
                foreach ($statNames as $stat => $displayName):
                    $currentValue = $character[$stat];
                    $racialMod = $racialMods[$stat];
                    $classBonus = $classBonuses[$stat];
                    $jobBonus = $jobBonuses[$stat];
                ?>
                    <div class="stat-breakdown">
                        <h4><?= $displayName ?></h4>
                        
                        <div class="stat-component">
                            <span>Base:</span>
                            <span class="stat-value neutral"><?= $baseStats ?></span>
                        </div>
                        
                        <div class="stat-component">
                            <span>Race (<?= htmlspecialchars($character['race_name']) ?>):</span>
                            <span class="stat-value <?= $racialMod > 0 ? 'positive' : ($racialMod < 0 ? 'negative' : 'neutral') ?>">
                                <?= $racialMod > 0 ? '+' : '' ?><?= $racialMod ?>
                            </span>
                        </div>
                        
                        <div class="stat-component">
                            <span>Class (<?= htmlspecialchars($character['class_name']) ?>):</span>
                            <span class="stat-value <?= $classBonus > 0 ? 'positive' : 'neutral' ?>">
                                <?= $classBonus > 0 ? '+' : '' ?><?= $classBonus ?>
                            </span>
                        </div>
                        
                        <div class="stat-component">
                            <span>Job (<?= htmlspecialchars($character['job_name']) ?>):</span>
                            <span class="stat-value <?= $jobBonus > 0 ? 'positive' : 'neutral' ?>">
                                <?= $jobBonus > 0 ? '+' : '' ?><?= $jobBonus ?>
                            </span>
                        </div>
                        
                        <div class="stat-component">
                            <span>Total:</span>
                            <span class="stat-value"><?= $currentValue ?></span>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <button class="button" onclick="window.location.href='/players/'">
                🏠 Dashboard
            </button>
            
            <?php if ($canChangeClass || $canChangeJob): ?>
                <button class="button" onclick="window.location.href='/players/change-class-job.php'" style="background: rgba(255, 193, 7, 0.2); border-color: rgba(255, 193, 7, 0.4);">
                    🔄 Change Class/Job
                </button>
            <?php endif; ?>
            
            <button class="button" onclick="window.location.href='/players/settings.php'">
                ⚙️ Settings
            </button>
        </div>

        <!-- Footer -->
        <footer class="main-footer">
            <div class="footer-links">
                <a href="/players/">Dashboard</a>
                <a href="/players/help.php">Help & Guide</a>
                <a href="/players/support.php">Support</a>
            </div>
            <div class="footer-info">
                <p>XRPG Character • <?= $username ?> • Level <?= $character['level'] ?> <?= htmlspecialchars($character['race_name']) ?> <?= htmlspecialchars($character['class_name']) ?></p>
                <p>&copy; 2025 XRPG. All rights reserved.</p>
            </div>
        </footer>
    </main>

    <script>
        // Pass user preferences to JavaScript for theme system
        const userPreferences = <?= json_encode($preferences) ?>;
        
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                fetch('/auth/logout.php', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                .then(() => {
                    window.location.href = '/';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    window.location.href = '/';
                });
            }
        }
    </script>
    <script src="/assets/js/theme.js"></script>
</body>
</html>

================
File: players/create-character.php
================
<?php
// /players/create-character.php - Backend handler for character creation

session_start();
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

require_once __DIR__ . '/../config/db.php';

function sendError($message, $code = 400) {
    http_response_code($code);
    echo json_encode(['success' => false, 'message' => $message]);
    exit;
}

function sendSuccess($message, $data = []) {
    echo json_encode(['success' => true, 'message' => $message, 'data' => $data]);
    exit;
}

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    sendError('Not authenticated', 401);
}

$user = $_SESSION['user'];
$userId = $user['id'];

// Only accept POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    sendError('Method not allowed', 405);
}

// Get and validate input
$input = json_decode(file_get_contents('php://input'), true);
if (!$input) {
    sendError('Invalid JSON input');
}

$raceId = intval($input['race_id'] ?? 0);
$classId = intval($input['class_id'] ?? 0);
$jobId = intval($input['job_id'] ?? 0);

if (!$raceId || !$classId || !$jobId) {
    sendError('Missing required selections');
}

try {
    // Begin transaction
    $pdo->beginTransaction();
    
    // Check if character already exists and is complete
    $stmt = $pdo->prepare('SELECT * FROM user_characters WHERE user_id = ?');
    $stmt->execute([$userId]);
    $existingCharacter = $stmt->fetch();
    
    if ($existingCharacter && $existingCharacter['is_character_complete']) {
        $pdo->rollBack();
        sendError('Character already exists and is complete');
    }
    
    // Validate selections exist and are active
    $stmt = $pdo->prepare('SELECT * FROM races WHERE id = ? AND is_active = 1');
    $stmt->execute([$raceId]);
    $race = $stmt->fetch();
    if (!$race) {
        $pdo->rollBack();
        sendError('Invalid race selection');
    }
    
    $stmt = $pdo->prepare('SELECT * FROM classes WHERE id = ? AND is_active = 1');
    $stmt->execute([$classId]);
    $class = $stmt->fetch();
    if (!$class) {
        $pdo->rollBack();
        sendError('Invalid class selection');
    }
    
    $stmt = $pdo->prepare('SELECT * FROM jobs WHERE id = ? AND is_active = 1');
    $stmt->execute([$jobId]);
    $job = $stmt->fetch();
    if (!$job) {
        $pdo->rollBack();
        sendError('Invalid job selection');
    }
    
    // Check class prerequisites (basic tier 1 classes should have no prerequisites)
    if ($class['tier'] > 1) {
        $stmt = $pdo->prepare('SELECT * FROM prerequisites WHERE target_type = ? AND target_id = ? AND is_active = 1');
        $stmt->execute(['class', $classId]);
        $classPrereqs = $stmt->fetchAll();
        
        // For character creation, we only allow tier 1 classes
        if (!empty($classPrereqs)) {
            $pdo->rollBack();
            sendError('Selected class has prerequisites and cannot be chosen during character creation');
        }
    }
    
    // Calculate base stats with racial, class, and job bonuses
    $baseStats = [
        'strength' => 10,
        'vitality' => 10,
        'agility' => 10,
        'intelligence' => 10,
        'wisdom' => 10,
        'luck' => 10
    ];
    
    $finalStats = [];
    foreach ($baseStats as $stat => $baseValue) {
        $finalStats[$stat] = $baseValue + 
            ($race[$stat . '_mod'] ?? 0) +
            ($class[$stat . '_bonus'] ?? 0) +
            ($job[$stat . '_bonus'] ?? 0);
    }
    
    // Calculate derived stats
    $maxHealth = $finalStats['vitality'] * 5 + 50; // Base 50 + 5 per vitality
    $idleGoldRate = $job['idle_gold_rate'] ?? 1.0;
    
    $now = date('Y-m-d H:i:s');
    
    // Create or update user_characters record
    if ($existingCharacter) {
        $stmt = $pdo->prepare('
            UPDATE user_characters 
            SET race_id = ?, class_id = ?, job_id = ?, 
                character_created_at = ?, class_selected_at = ?, job_selected_at = ?,
                is_character_complete = 1, updated_at = ?
            WHERE user_id = ?
        ');
        $stmt->execute([$raceId, $classId, $jobId, $now, $now, $now, $now, $userId]);
    } else {
        $stmt = $pdo->prepare('
            INSERT INTO user_characters 
            (user_id, race_id, class_id, job_id, character_created_at, class_selected_at, job_selected_at, is_character_complete) 
            VALUES (?, ?, ?, ?, ?, ?, ?, 1)
        ');
        $stmt->execute([$userId, $raceId, $classId, $jobId, $now, $now, $now]);
    }
    
    // Create or update user_stats record
    $stmt = $pdo->prepare('SELECT * FROM user_stats WHERE user_id = ?');
    $stmt->execute([$userId]);
    $existingStats = $stmt->fetch();
    
    if ($existingStats) {
        $stmt = $pdo->prepare('
            UPDATE user_stats 
            SET strength = ?, vitality = ?, agility = ?, intelligence = ?, wisdom = ?, luck = ?,
                max_health = ?, health = ?, idle_gold_rate = ?, updated_at = ?
            WHERE user_id = ?
        ');
        $stmt->execute([
            $finalStats['strength'], $finalStats['vitality'], $finalStats['agility'],
            $finalStats['intelligence'], $finalStats['wisdom'], $finalStats['luck'],
            $maxHealth, $maxHealth, $idleGoldRate, $now, $userId
        ]);
    } else {
        $stmt = $pdo->prepare('
            INSERT INTO user_stats 
            (user_id, level, experience, gold, health, max_health, strength, vitality, agility, intelligence, wisdom, luck, 
             class_experience, class_level, job_experience, job_level, idle_gold_rate) 
            VALUES (?, 1, 0, 100, ?, ?, ?, ?, ?, ?, ?, ?, 0, 1, 0, 1, ?)
        ');
        $stmt->execute([
            $userId, $maxHealth, $maxHealth,
            $finalStats['strength'], $finalStats['vitality'], $finalStats['agility'],
            $finalStats['intelligence'], $finalStats['wisdom'], $finalStats['luck'],
            $idleGoldRate
        ]);
    }
    
    // Log character creation
    $stmt = $pdo->prepare('
        INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent) 
        VALUES (?, ?, ?, ?, ?, ?)
    ');
    $stmt->execute([
        $userId,
        $user['username'],
        'other',
        "Character created - Race: {$race['name']}, Class: {$class['name']}, Job: {$job['name']}",
        $_SERVER['REMOTE_ADDR'] ?? null,
        $_SERVER['HTTP_USER_AGENT'] ?? null
    ]);
    
    // Commit transaction
    $pdo->commit();
    
    // Return success with character data
    sendSuccess('Character created successfully!', [
        'character' => [
            'race' => $race['name'],
            'class' => $class['name'],
            'job' => $job['name'],
            'stats' => $finalStats,
            'max_health' => $maxHealth,
            'idle_gold_rate' => $idleGoldRate
        ]
    ]);
    
} catch (Exception $e) {
    $pdo->rollBack();
    error_log("Character creation error: " . $e->getMessage());
    sendError('Failed to create character: ' . $e->getMessage(), 500);
}

================
File: players/index.php
================
<?php
// /players/index.php - Main game dashboard with character creation flow

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    header('Location: /');
    exit;
}

$user = $_SESSION['user'];
$username = htmlspecialchars($user['username']);
$userId = $user['id'];

// Connect to database for user stats and preferences
require_once __DIR__ . '/../config/db.php';

// Check if character creation is complete
try {
    $stmt = $pdo->prepare('SELECT * FROM user_characters WHERE user_id = ?');
    $stmt->execute([$userId]);
    $character = $stmt->fetch();
    
    if (!$character || !$character['is_character_complete']) {
        // Character creation not complete, redirect to character creation
        header('Location: /players/character-creation.php');
        exit;
    }
    
    // Get character details for display
    $stmt = $pdo->prepare('
        SELECT uc.*, r.name as race_name, c.name as class_name, j.name as job_name,
               r.description as race_description, c.description as class_description, j.description as job_description
        FROM user_characters uc
        LEFT JOIN races r ON uc.race_id = r.id
        LEFT JOIN classes c ON uc.class_id = c.id  
        LEFT JOIN jobs j ON uc.job_id = j.id
        WHERE uc.user_id = ?
    ');
    $stmt->execute([$userId]);
    $characterDetails = $stmt->fetch();
    
} catch (Exception $e) {
    error_log("Failed to load character: " . $e->getMessage());
    // Redirect to character creation if there's an issue
    header('Location: /players/character-creation.php');
    exit;
}

// Get user stats (now with enhanced stats)
try {
    $stmt = $pdo->prepare('SELECT * FROM user_stats WHERE user_id = ?');
    $stmt->execute([$userId]);
    $stats = $stmt->fetch();
    
    if (!$stats) {
        // This shouldn't happen if character creation worked, but just in case
        header('Location: /players/character-creation.php');
        exit;
    }
} catch (Exception $e) {
    error_log("Failed to load user stats: " . $e->getMessage());
    header('Location: /players/character-creation.php');
    exit;
}

// Get user preferences (create if not exists)
try {
    $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
    $stmt->execute([$userId]);
    $preferences = $stmt->fetch();
    
    if (!$preferences) {
        // Create default preferences for new user
        $stmt = $pdo->prepare('
            INSERT INTO user_preferences (user_id, theme_mode, accent_color, accent_secondary, border_radius, shadow_intensity, ui_opacity, font_family) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ');
        $stmt->execute([$userId, 'dark', '#5299e0', '#81aaff', 18, 0.36, 0.96, 'sans']);
        
        // Fetch the newly created record
        $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
        $stmt->execute([$userId]);
        $preferences = $stmt->fetch();
    }
} catch (Exception $e) {
    error_log("Failed to load user preferences: " . $e->getMessage());
    // Use defaults if database fails
    $preferences = [
        'theme_mode' => 'dark',
        'accent_color' => '#5299e0',
        'accent_secondary' => '#81aaff',
        'border_radius' => 18,
        'shadow_intensity' => 0.36,
        'ui_opacity' => 0.96,
        'font_family' => 'sans'
    ];
}

// Get recent activity
try {
    $stmt = $pdo->prepare('SELECT * FROM auth_log WHERE user_id = ? ORDER BY created_at DESC LIMIT 5');
    $stmt->execute([$userId]);
    $recentActivity = $stmt->fetchAll();
} catch (Exception $e) {
    $recentActivity = [];
}

// Check if class/job changes are allowed
$canChangeClass = true;
$canChangeJob = true;
$daysUntilClassChange = 0;
$daysUntilJobChange = 0;

if ($characterDetails) {
    $classSelectedTime = strtotime($characterDetails['class_selected_at']);
    $jobSelectedTime = strtotime($characterDetails['job_selected_at']);
    $lastClassChange = $characterDetails['last_class_change'] ? strtotime($characterDetails['last_class_change']) : $classSelectedTime;
    $lastJobChange = $characterDetails['last_job_change'] ? strtotime($characterDetails['last_job_change']) : $jobSelectedTime;
    
    $threeDaysAgo = time() - (3 * 24 * 60 * 60);
    
    if ($lastClassChange > $threeDaysAgo) {
        $canChangeClass = false;
        $daysUntilClassChange = ceil(($lastClassChange + (3 * 24 * 60 * 60) - time()) / (24 * 60 * 60));
    }
    
    if ($lastJobChange > $threeDaysAgo) {
        $canChangeJob = false;
        $daysUntilJobChange = ceil(($lastJobChange + (3 * 24 * 60 * 60) - time()) / (24 * 60 * 60));
    }
}
?>
<!DOCTYPE html>
<html lang="en" data-theme="<?= htmlspecialchars($preferences['theme_mode']) ?>">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - Dashboard</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/ico/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/ico/favicon-16x16.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.ico">
    <meta name="theme-color" content="#ffffff">
    <style>
        :root {
            --user-accent: <?= htmlspecialchars($preferences['accent_color']) ?>;
            --user-accent2: <?= htmlspecialchars($preferences['accent_secondary']) ?>;
            --user-radius: <?= intval($preferences['border_radius']) ?>px;
            --user-shadow-intensity: <?= floatval($preferences['shadow_intensity']) ?>;
            --user-opacity: <?= floatval($preferences['ui_opacity']) ?>;
            --user-font: var(--font-<?= htmlspecialchars($preferences['font_family']) ?>);
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
        }
        
        .stat-card {
            text-align: center;
            padding: 1rem;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .stat-label {
            color: var(--color-muted);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.25);
            overflow: hidden;
            margin: 0.5rem 0;
        }
        
        .progress-fill {
            height: 100%;
            background: var(--gradient-accent);
            transition: width 0.3s ease;
        }
        
        .activity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
        }
        
        .activity-time {
            color: var(--color-muted);
            font-size: 0.75rem;
        }
        
        .health-bar {
            background: linear-gradient(90deg, #ff4444, #ffaa00, #44ff44);
        }
        
        .exp-bar {
            background: var(--gradient-accent);
        }
        
        .action-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .quick-action {
            text-align: center;
            padding: 1.5rem 1rem;
            font-size: 0.875rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }
        
        .quick-action .icon {
            font-size: 2rem;
        }
        
        .welcome-banner {
            background: var(--gradient-accent);
            color: white;
            text-align: center;
            padding: 2rem;
            border-radius: var(--user-radius);
            margin-bottom: 2rem;
        }
        
        .character-info {
            background: var(--color-surface-alt);
            padding: 1.5rem;
            border-radius: var(--user-radius);
            margin-bottom: 2rem;
        }
        
        .character-detail {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--color-border);
        }
        
        .character-detail:last-child {
            border-bottom: none;
        }
        
        .character-label {
            font-weight: 600;
            color: var(--color-text);
        }
        
        .character-value {
            color: var(--color-accent);
            font-weight: bold;
        }
        
        .logout-section {
            border-top: 1px solid var(--color-border);
            padding-top: 1rem;
            margin-top: 1rem;
        }
        
        .change-cooldown {
            color: var(--color-muted);
            font-size: 0.75rem;
            font-style: italic;
        }
        
        .enhanced-stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 0.75rem;
            margin-top: 1rem;
        }
        
        .enhanced-stat {
            text-align: center;
            padding: 0.75rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
        }
        
        .enhanced-stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--color-accent);
        }
        
        .enhanced-stat-name {
            color: var(--color-muted);
            font-size: 0.75rem;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body class="authenticated">
    <!-- Fixed Theme Toggle -->
    <button id="theme-toggle" class="theme-toggle-fixed" title="Toggle light/dark mode">
        <?= $preferences['theme_mode'] === 'dark' ? '🌞' : '🌙' ?>
    </button>

    <!-- Side Navigation -->
    <nav class="side-nav">
        <button class="side-nav-toggle" title="Toggle menu">☰</button>
        <div class="side-nav-items">
            <a href="/players/" class="side-nav-item active" title="Dashboard">
                <span class="side-nav-icon">🏠</span>
                <span class="side-nav-text">Dashboard</span>
            </a>
            <a href="/players/character.php" class="side-nav-item" title="Character">
                <span class="side-nav-icon">⚔️</span>
                <span class="side-nav-text">Character</span>
            </a>
            <a href="/players/inventory.php" class="side-nav-item" title="Inventory">
                <span class="side-nav-icon">🎒</span>
                <span class="side-nav-text">Inventory</span>
            </a>
            <a href="/players/dungeon.php" class="side-nav-item" title="Dungeons">
                <span class="side-nav-icon">🏰</span>
                <span class="side-nav-text">Dungeons</span>
            </a>
            <a href="/players/guild.php" class="side-nav-item" title="Guild">
                <span class="side-nav-icon">👥</span>
                <span class="side-nav-text">Guild</span>
            </a>
            <a href="/players/settings.php" class="side-nav-item" title="Settings">
                <span class="side-nav-icon">⚙️</span>
                <span class="side-nav-text">Settings</span>
            </a>
        </div>
    </nav>

    <!-- Main Header -->
    <header class="main-header">
        <div class="header-title">XRPG - Dashboard</div>
        <div class="header-actions">
            <span style="margin-right: 1rem; color: var(--color-muted);">Welcome, <?= $username ?>!</span>
            <button class="button" onclick="logout()" title="Logout">
                <span style="margin-right: 0.5rem;">🚪</span>Logout
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Welcome Banner -->
        <div class="welcome-banner">
            <h1 style="margin: 0 0 0.5rem 0;">Welcome back, <?= $username ?>! 🎮</h1>
            <p style="margin: 0; opacity: 0.9;">Level <?= $stats['level'] ?> <?= htmlspecialchars($characterDetails['race_name']) ?> <?= htmlspecialchars($characterDetails['class_name']) ?></p>
        </div>

        <!-- Character Information -->
        <div class="character-info">
            <h3 style="margin-top: 0; color: var(--color-accent);">🧬 Character Information</h3>
            <div class="character-detail">
                <span class="character-label">Race:</span>
                <span class="character-value"><?= htmlspecialchars($characterDetails['race_name']) ?></span>
            </div>
            <div class="character-detail">
                <span class="character-label">Class:</span>
                <span class="character-value">
                    <?= htmlspecialchars($characterDetails['class_name']) ?> (Level <?= $stats['class_level'] ?>)
                    <?php if (!$canChangeClass): ?>
                        <div class="change-cooldown">Can change in <?= $daysUntilClassChange ?> day(s)</div>
                    <?php endif; ?>
                </span>
            </div>
            <div class="character-detail">
                <span class="character-label">Job:</span>
                <span class="character-value">
                    <?= htmlspecialchars($characterDetails['job_name']) ?> (Level <?= $stats['job_level'] ?>)
                    <?php if (!$canChangeJob): ?>
                        <div class="change-cooldown">Can change in <?= $daysUntilJobChange ?> day(s)</div>
                    <?php endif; ?>
                </span>
            </div>
            <div class="character-detail">
                <span class="character-label">Gold Rate:</span>
                <span class="character-value"><?= number_format($stats['idle_gold_rate'], 2) ?>x per hour</span>
            </div>
        </div>

        <!-- Dashboard Grid -->
        <div class="dashboard-grid">
            <!-- Character Stats -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">📊 Character Stats</h3>
                
                <div class="stats-grid">
                    <div class="stat-card surface">
                        <div class="stat-value"><?= htmlspecialchars($stats['level']) ?></div>
                        <div class="stat-label">Level</div>
                    </div>
                    <div class="stat-card surface">
                        <div class="stat-value"><?= number_format($stats['gold']) ?></div>
                        <div class="stat-label">Gold</div>
                    </div>
                </div>
                
                <!-- Enhanced Stats -->
                <div class="enhanced-stats-grid">
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['strength'] ?></div>
                        <div class="enhanced-stat-name">Strength</div>
                    </div>
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['vitality'] ?></div>
                        <div class="enhanced-stat-name">Vitality</div>
                    </div>
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['agility'] ?></div>
                        <div class="enhanced-stat-name">Agility</div>
                    </div>
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['intelligence'] ?></div>
                        <div class="enhanced-stat-name">Intelligence</div>
                    </div>
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['wisdom'] ?></div>
                        <div class="enhanced-stat-name">Wisdom</div>
                    </div>
                    <div class="enhanced-stat">
                        <div class="enhanced-stat-value"><?= $stats['luck'] ?></div>
                        <div class="enhanced-stat-name">Luck</div>
                    </div>
                </div>
                
                <!-- Health Bar -->
                <div style="margin-top: 1rem;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.25rem;">
                        <span style="font-size: 0.875rem;">Health</span>
                        <span style="font-size: 0.875rem;"><?= $stats['health'] ?>/<?= $stats['max_health'] ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill health-bar" style="width: <?= ($stats['health'] / $stats['max_health']) * 100 ?>%;"></div>
                    </div>
                </div>
                
                <!-- Experience Bar -->
                <div style="margin-top: 1rem;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 0.25rem;">
                        <span style="font-size: 0.875rem;">Experience</span>
                        <span style="font-size: 0.875rem;"><?= number_format($stats['experience']) ?>/<?= number_format($stats['level'] * 1000) ?></span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill exp-bar" style="width: <?= min(($stats['experience'] / ($stats['level'] * 1000)) * 100, 100) ?>%;"></div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">⚡ Quick Actions</h3>
                
                <div class="action-grid">
                    <button class="button quick-action" onclick="quickDungeon()">
                        <span class="icon">🏰</span>
                        <span>Enter Dungeon</span>
                    </button>
                    
                    <button class="button quick-action" onclick="openCharacter()">
                        <span class="icon">⚔️</span>
                        <span>Character</span>
                    </button>
                    
                    <button class="button quick-action" onclick="openInventory()">
                        <span class="icon">🎒</span>
                        <span>Inventory</span>
                    </button>
                    
                    <button class="button quick-action" onclick="visitSettings()">
                        <span class="icon">⚙️</span>
                        <span>Settings</span>
                    </button>
                    
                    <button class="button quick-action" onclick="openMap()">
                        <span class="icon">🗺️</span>
                        <span>World Map</span>
                    </button>
                    
                    <?php if ($canChangeClass || $canChangeJob): ?>
                        <button class="button quick-action" onclick="changeClassJob()" style="background: rgba(255, 193, 7, 0.2); border-color: rgba(255, 193, 7, 0.4);">
                            <span class="icon">🔄</span>
                            <span>Change Class/Job</span>
                        </button>
                    <?php endif; ?>
                </div>
                
                <div class="logout-section">
                    <button class="button" onclick="logout()" style="width: 100%; background: rgba(255, 100, 100, 0.2); border-color: rgba(255, 100, 100, 0.4);">
                        <span style="margin-right: 0.5rem;">🚪</span>Logout Safely
                    </button>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">📋 Recent Activity</h3>
                
                <?php if (empty($recentActivity)): ?>
                    <div class="activity-item">
                        <span>🎉 Character created!</span>
                        <span class="activity-time">Just now</span>
                    </div>
                    <div class="activity-item">
                        <span>⚔️ Ready for adventure</span>
                        <span class="activity-time">Now</span>
                    </div>
                <?php else: ?>
                    <?php foreach ($recentActivity as $activity): ?>
                        <div class="activity-item">
                            <span>
                                <?php
                                $icon = match($activity['event_type']) {
                                    'login' => '🔑',
                                    'passkey_register' => '🆕',
                                    'logout' => '🚪',
                                    'other' => '⚙️',
                                    default => '📝'
                                };
                                echo $icon . ' ' . htmlspecialchars($activity['description']);
                                ?>
                            </span>
                            <span class="activity-time"><?= date('M j, g:i A', strtotime($activity['created_at'])) ?></span>
                        </div>
                    <?php endforeach; ?>
                <?php endif; ?>
            </div>

            <!-- Game News/Updates -->
            <div class="card" style="padding: 1.5rem;">
                <h3 style="margin-top: 0;">📰 Game Updates</h3>
                <div id="dashboard-updates">
                    <div class="activity-item">
                        <span>⏳ Loading latest updates...</span>
                        <span class="activity-time">Now</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="main-footer">
            <div class="footer-links">
                <a href="/players/help.php">Help & Guide</a>
                <a href="/players/support.php">Support</a>
                <a href="/" onclick="logout(); return false;">Logout</a>
            </div>
            <div class="footer-info">
                <p>XRPG Dashboard • Character: <?= $username ?> • Level <?= $stats['level'] ?> <?= htmlspecialchars($characterDetails['race_name']) ?> <?= htmlspecialchars($characterDetails['class_name']) ?></p>
                <p>&copy; 2025 XRPG. All rights reserved.</p>
            </div>
        </footer>
    </main>

    <script>
        // Pass user preferences to JavaScript for theme system
        const userPreferences = <?= json_encode($preferences) ?>;
        const canChangeClass = <?= $canChangeClass ? 'true' : 'false' ?>;
        const canChangeJob = <?= $canChangeJob ? 'true' : 'false' ?>;
    </script>
    <script src="/assets/js/theme.js?v=4"></script>
    <script>
        // Dashboard-specific JavaScript
        
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                fetch('/auth/logout.php', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                .then(() => {
                    window.location.href = '/';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    // Force redirect even if logout request fails
                    window.location.href = '/';
                });
            }
        }
        
        function quickDungeon() {
            window.location.href = '/players/dungeon.php';
        }
        
        function openCharacter() {
            window.location.href = '/players/character.php';
        }
        
        function openInventory() {
            window.location.href = '/players/inventory.php';
        }
        
        function visitSettings() {
            window.location.href = '/players/settings.php';
        }
        
        function openMap() {
            window.location.href = '/players/map.php';
        }
        
        function changeClassJob() {
            if (canChangeClass || canChangeJob) {
                window.location.href = '/players/change-class-job.php';
            } else {
                alert('You cannot change your class or job at this time. Please wait for the cooldown period to end.');
            }
        }
        
        // Load dashboard updates
        async function loadDashboardUpdates() {
            try {
                const response = await fetch('/api/updates.php');
                if (response.ok) {
                    const data = await response.json();
                    const container = document.getElementById('dashboard-updates');
                    
                    if (data.updates && data.updates.length > 0) {
                        container.innerHTML = data.updates.slice(0, 3).map(update => `
                            <div class="activity-item">
                                <span>${update.emoji} ${update.message}</span>
                                <span class="activity-time">${update.timeAgo}</span>
                            </div>
                        `).join('');
                    } else {
                        container.innerHTML = `
                            <div class="activity-item">
                                <span>🎮 Welcome to XRPG!</span>
                                <span class="activity-time">Now</span>
                            </div>
                        `;
                    }
                }
            } catch (error) {
                console.error('Failed to load updates:', error);
                // Fallback content
                const container = document.getElementById('dashboard-updates');
                if (container) {
                    container.innerHTML = `
                        <div class="activity-item">
                            <span>🎮 Welcome to XRPG!</span>
                            <span class="activity-time">Now</span>
                        </div>
                        <div class="activity-item">
                            <span>⚙️ Customize your theme in Settings</span>
                            <span class="activity-time">Tip</span>
                        </div>
                    `;
                }
            }
        }
        
        // Load updates on page load
        loadDashboardUpdates();
        
        // Auto-refresh stats every 30 seconds (in a real game)
        setInterval(() => {
            // Could refresh user stats here
            console.log('Stats refresh would happen here');
        }, 30000);
    </script>
</body>
</html>

================
File: players/save-settings.php
================
<?php
// /players/save-settings.php - Save user preferences to database

header('Content-Type: application/json');

// Start session and check authentication
session_start();

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    http_response_code(401);
    echo json_encode(['success' => false, 'message' => 'Not authenticated']);
    exit;
}

// Only allow POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Method not allowed']);
    exit;
}

// Handle session user data (might be JSON string or array)
$user = $_SESSION['user'];
if (is_string($user)) {
    $user = json_decode($user, true);
    if (!$user) {
        http_response_code(401);
        echo json_encode(['success' => false, 'message' => 'Invalid user session data']);
        exit;
    }
}

$userId = $user['id'];

try {
    // Get JSON input
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);
    
    if (!$data) {
        throw new Exception('Invalid JSON data');
    }
    
    // Validate required fields
    $requiredFields = ['theme_mode', 'accent_color', 'accent_secondary', 'font_family', 'border_radius', 'shadow_intensity', 'ui_opacity'];
    foreach ($requiredFields as $field) {
        if (!isset($data[$field])) {
            throw new Exception("Missing required field: $field");
        }
    }
    
    // Validate theme_mode
    if (!in_array($data['theme_mode'], ['dark', 'light'])) {
        throw new Exception('Invalid theme_mode. Must be "dark" or "light"');
    }
    
    // Validate font_family
    if (!in_array($data['font_family'], ['sans', 'mono', 'game', 'display'])) {
        throw new Exception('Invalid font_family. Must be one of: sans, mono, game, display');
    }
    
    // Validate color formats (hex colors)
    if (!preg_match('/^#[0-9A-Fa-f]{6}$/', $data['accent_color'])) {
        throw new Exception('Invalid accent_color format. Must be a valid hex color');
    }
    
    if (!preg_match('/^#[0-9A-Fa-f]{6}$/', $data['accent_secondary'])) {
        throw new Exception('Invalid accent_secondary format. Must be a valid hex color');
    }
    
    // Validate numeric ranges
    $borderRadius = intval($data['border_radius']);
    if ($borderRadius < 9 || $borderRadius > 40) {
        throw new Exception('border_radius must be between 9 and 40');
    }
    
    $shadowIntensity = floatval($data['shadow_intensity']);
    if ($shadowIntensity < 0.05 || $shadowIntensity > 0.5) {
        throw new Exception('shadow_intensity must be between 0.05 and 0.5');
    }
    
    $uiOpacity = floatval($data['ui_opacity']);
    if ($uiOpacity < 0.8 || $uiOpacity > 1.0) {
        throw new Exception('ui_opacity must be between 0.8 and 1.0');
    }
    
    // Connect to database
    require_once __DIR__ . '/../config/db.php';
    
    // Check if user preferences exist
    $stmt = $pdo->prepare('SELECT id FROM user_preferences WHERE user_id = ?');
    $stmt->execute([$userId]);
    $exists = $stmt->fetch();
    
    if ($exists) {
        // Update existing preferences
        $stmt = $pdo->prepare('
            UPDATE user_preferences 
            SET theme_mode = ?, accent_color = ?, accent_secondary = ?, font_family = ?, 
                border_radius = ?, shadow_intensity = ?, ui_opacity = ?, updated_at = CURRENT_TIMESTAMP
            WHERE user_id = ?
        ');
        $result = $stmt->execute([
            $data['theme_mode'],
            $data['accent_color'],
            $data['accent_secondary'],
            $data['font_family'],
            $borderRadius,
            $shadowIntensity,
            $uiOpacity,
            $userId
        ]);
    } else {
        // Insert new preferences
        $stmt = $pdo->prepare('
            INSERT INTO user_preferences (user_id, theme_mode, accent_color, accent_secondary, font_family, border_radius, shadow_intensity, ui_opacity)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ');
        $result = $stmt->execute([
            $userId,
            $data['theme_mode'],
            $data['accent_color'],
            $data['accent_secondary'],
            $data['font_family'],
            $borderRadius,
            $shadowIntensity,
            $uiOpacity
        ]);
    }
    
    if (!$result) {
        throw new Exception('Failed to save preferences to database');
    }
    
    // Log this activity
    try {
        $stmt = $pdo->prepare('
            INSERT INTO auth_log (user_id, username, event_type, description, ip_addr, user_agent)
            VALUES (?, ?, ?, ?, ?, ?)
        ');
        $stmt->execute([
            $userId,
            isset($user['username']) ? $user['username'] : 'unknown',
            'other',
            'Updated theme preferences',
            $_SERVER['REMOTE_ADDR'] ?? null,
            $_SERVER['HTTP_USER_AGENT'] ?? null
        ]);
    } catch (Exception $e) {
        // Don't fail if logging fails
        error_log("Failed to log settings update: " . $e->getMessage());
    }
    
    // Return success response
    echo json_encode([
        'success' => true, 
        'message' => 'Settings saved successfully',
        'data' => [
            'theme_mode' => $data['theme_mode'],
            'accent_color' => $data['accent_color'],
            'accent_secondary' => $data['accent_secondary'],
            'font_family' => $data['font_family'],
            'border_radius' => $borderRadius,
            'shadow_intensity' => $shadowIntensity,
            'ui_opacity' => $uiOpacity
        ]
    ]);
    
} catch (Exception $e) {
    error_log("Settings save error: " . $e->getMessage());
    http_response_code(400);
    echo json_encode([
        'success' => false, 
        'message' => $e->getMessage()
    ]);
}

================
File: players/settings.php
================
<?php
// /players/settings.php - Player settings and theme customization

// Initialize session and environment
session_start();
require_once __DIR__ . '/../config/environment.php';

// Check if user is logged in
if (!isset($_SESSION['user']) || !$_SESSION['user']) {
    header('Location: /');
    exit;
}

// Check if user is a player (not admin)
if ($_SESSION['user']['type'] !== 'player') {
    header('Location: /');
    exit;
}

$user = $_SESSION['user'];
$username = htmlspecialchars($user['username']);
$userId = $user['id'];

// Connect to database
require_once __DIR__ . '/../config/db.php';

// Get user preferences (create if not exists)
try {
    $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
    $stmt->execute([$userId]);
    $preferences = $stmt->fetch();
    
    if (!$preferences) {
        // Create default preferences for new user
        $stmt = $pdo->prepare('
            INSERT INTO user_preferences (user_id, theme_mode, accent_color, accent_secondary, border_radius, shadow_intensity, ui_opacity, font_family) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ');
        $stmt->execute([$userId, 'dark', '#5299e0', '#81aaff', 18, 0.36, 0.96, 'sans']);
        
        // Fetch the newly created record
        $stmt = $pdo->prepare('SELECT * FROM user_preferences WHERE user_id = ?');
        $stmt->execute([$userId]);
        $preferences = $stmt->fetch();
    }
} catch (Exception $e) {
    error_log("Failed to load user preferences: " . $e->getMessage());
    // Use defaults if database fails
    $preferences = [
        'theme_mode' => 'dark',
        'accent_color' => '#5299e0',
        'accent_secondary' => '#81aaff',
        'border_radius' => 18,
        'shadow_intensity' => 0.36,
        'ui_opacity' => 0.96,
        'font_family' => 'sans'
    ];
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>XRPG - Settings</title>
    <link rel="stylesheet" href="/assets/css/theme.css">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/ico/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/ico/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/ico/favicon-16x16.png">
    <link rel="shortcut icon" href="/assets/ico/favicon.ico">
    <meta name="theme-color" content="#ffffff">
    <style>
        .settings-header {
            text-align: center;
            padding: 2rem;
            background: var(--gradient-accent);
            color: white;
            margin-bottom: 2rem;
            border-radius: var(--user-radius);
        }
        
        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }
        
        .settings-section {
            padding: 2rem;
        }
        
        .settings-section h3 {
            margin-top: 0;
            color: var(--color-accent);
            border-bottom: 2px solid var(--color-border);
            padding-bottom: 0.5rem;
        }
        
        .control-group {
            margin-bottom: 1.5rem;
        }
        
        .control-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--color-text);
        }
        
        .range-value {
            color: var(--color-accent);
            font-weight: bold;
            float: right;
        }
        
        .contrast-warning {
            background: rgba(255, 100, 100, 0.1);
            border: 1px solid rgba(255, 100, 100, 0.3);
            color: #ff6464;
            padding: 0.75rem;
            border-radius: calc(var(--user-radius) * 0.5);
            margin-top: 1rem;
            font-size: 0.875rem;
            display: none;
        }
        
        .preview-section {
            padding: 2rem;
        }
        
        .preview-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .preview-box {
            padding: 1.5rem;
        }
        
        .save-section {
            background: var(--color-surface);
            padding: 2rem;
            border-radius: var(--user-radius);
            text-align: center;
            margin-top: 2rem;
        }
        
        .save-status {
            margin: 1rem 0;
            padding: 0.75rem;
            border-radius: calc(var(--user-radius) * 0.5);
            display: none;
        }
        
        .save-status.success {
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
            color: #4caf50;
        }
        
        .save-status.error {
            background: rgba(244, 67, 54, 0.1);
            border: 1px solid rgba(244, 67, 54, 0.3);
            color: #f44336;
        }
        
        .theme-toggle-demo {
            display: inline-flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: var(--color-surface-alt);
            border-radius: calc(var(--user-radius) * 0.5);
            margin: 1rem 0;
        }
		.theme-toggle-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid rgba(128, 128, 128, 0.2);
    background: var(--color-surface);
    color: var(--color-text);
    font-size: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
}

.theme-toggle-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.theme-toggle-btn:active {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.theme-label {
    font-weight: 500;
}
    </style>
</head>
<body>
    <!-- Fixed Theme Toggle -->
    <button id="theme-toggle" class="theme-toggle-fixed" title="Toggle light/dark mode">🌞</button>

    <!-- Side Navigation -->
    <nav class="side-nav">
        <button class="side-nav-toggle" title="Toggle menu">☰</button>
        <div class="side-nav-items">
            <a href="/players/" class="side-nav-item" title="Dashboard">
                <span class="side-nav-icon">🏠</span>
                <span class="side-nav-text">Dashboard</span>
            </a>
            <a href="/players/character.php" class="side-nav-item" title="Character">
                <span class="side-nav-icon">⚔️</span>
                <span class="side-nav-text">Character</span>
            </a>
            <a href="/players/inventory.php" class="side-nav-item" title="Inventory">
                <span class="side-nav-icon">🎒</span>
                <span class="side-nav-text">Inventory</span>
            </a>
            <a href="/players/dungeon.php" class="side-nav-item" title="Dungeons">
                <span class="side-nav-icon">🏰</span>
                <span class="side-nav-text">Dungeons</span>
            </a>
            <a href="/players/guild.php" class="side-nav-item" title="Guild">
                <span class="side-nav-icon">👥</span>
                <span class="side-nav-text">Guild</span>
            </a>
            <a href="/players/settings.php" class="side-nav-item active" title="Settings">
                <span class="side-nav-icon">⚙️</span>
                <span class="side-nav-text">Settings</span>
            </a>
        </div>
    </nav>

    <!-- Main Header -->
    <header class="main-header">
        <div class="header-title">XRPG - Settings</div>
        <div class="header-actions">
            <button class="button" onclick="window.location.href='/players/'" title="Back to Dashboard">
                <span style="margin-right: 0.5rem;">🏠</span>Dashboard
            </button>
            <button class="button" onclick="logout()" title="Logout">
                <span style="margin-right: 0.5rem;">🚪</span>Logout
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Settings Header -->
        <div class="settings-header">
            <h1 style="margin: 0 0 0.5rem 0;">⚙️ Settings & Customization</h1>
            <p style="margin: 0; opacity: 0.9;">Personalize your XRPG experience, <?= $username ?>!</p>
        </div>

        <!-- Settings Grid -->
        <div class="settings-grid">
            <!-- Theme & Colors -->
            <div class="card settings-section">
                <h3>🎨 Theme & Colors</h3>
                
                <div class="control-group">
                    <label class="control-label">Theme Mode</label>
<div class="theme-toggle-demo">
    <span class="theme-label">🌙 Dark</span>
    
    <!-- Keep the original checkbox (hidden) to maintain all bindings -->
    <input type="checkbox" id="theme-mode-toggle" style="display: none;" <?= $preferences['theme_mode'] === 'light' ? 'checked' : '' ?>>
    
    <!-- New button that looks like the fixed toggle -->
    <button id="demo-theme-btn" class="theme-toggle-btn" title="Toggle light/dark mode">
        <?= $preferences['theme_mode'] === 'dark' ? '🌞' : '🌙' ?>
    </button>
    
    <span class="theme-label">🌞 Light</span>
</div>
                </div>
                
                <div class="control-group">
                    <label class="control-label" for="accent-primary">Primary Accent Color</label>
                    <input type="color" id="accent-primary" value="<?= htmlspecialchars($preferences['accent_color']) ?>" style="width: 100%; height: 50px;">
                </div>
                
                <div class="control-group">
                    <label class="control-label" for="accent-secondary">Secondary Accent Color</label>
                    <input type="color" id="accent-secondary" value="<?= htmlspecialchars($preferences['accent_secondary']) ?>" style="width: 100%; height: 50px;">
                </div>
                
                <div class="control-group">
                    <label class="control-label" for="font-select">Font Style</label>
                    <select id="font-select" style="width: 100%;">
                        <option value="sans" <?= $preferences['font_family'] === 'sans' ? 'selected' : '' ?>>Clean & Modern (Sans-serif)</option>
                        <option value="mono" <?= $preferences['font_family'] === 'mono' ? 'selected' : '' ?>>Technical (Monospace)</option>
                        <option value="game" <?= $preferences['font_family'] === 'game' ? 'selected' : '' ?>>Classic RPG (Serif)</option>
                        <option value="display" <?= $preferences['font_family'] === 'display' ? 'selected' : '' ?>>Bold & Impactful</option>
                    </select>
                </div>
                
                <div id="contrast-warning" class="contrast-warning">
                    ⚠️ Low contrast detected. This color combination might be hard to read.
                </div>
            </div>

            <!-- Visual Effects -->
            <div class="card settings-section">
                <h3>✨ Visual Effects</h3>
                
                <div class="control-group">
                    <label class="control-label">
                        Border Radius
                        <span class="range-value" id="radius-value"><?= $preferences['border_radius'] ?>px</span>
                    </label>
                    <input type="range" id="radius-slider" min="9" max="40" value="<?= $preferences['border_radius'] ?>">
                </div>
                
                <div class="control-group">
                    <label class="control-label">
                        Shadow Intensity
                        <span class="range-value" id="shadow-value"><?= $preferences['shadow_intensity'] ?></span>
                    </label>
                    <input type="range" id="shadow-slider" min="0.05" max="0.5" step="0.01" value="<?= $preferences['shadow_intensity'] ?>">
                </div>
                
                <div class="control-group">
                    <label class="control-label">
                        UI Opacity
                        <span class="range-value" id="opacity-value"><?= $preferences['ui_opacity'] ?></span>
                    </label>
                    <input type="range" id="opacity-slider" min="0.8" max="1" step="0.01" value="<?= $preferences['ui_opacity'] ?>">
                </div>
            </div>
        </div>

        <!-- Preview Section -->
        <div class="card preview-section">
            <h3>🎮 Live Preview</h3>
            <p class="text-muted">See how your theme affects different UI elements in real-time</p>
            
            <div class="preview-grid">
                <!-- Buttons -->
                <div class="surface preview-box">
                    <h4>Buttons</h4>
                    <div style="margin-bottom: 1rem;">
                        <button class="button">Primary Action</button>
                        <button class="button" disabled style="margin-left: 0.5rem;">Disabled</button>
                    </div>
                    <button class="button" style="width: 100%;">Full Width Button</button>
                </div>
                
                <!-- Input Fields -->
                <div class="surface preview-box">
                    <h4>Input Fields</h4>
                    <div style="margin-bottom: 1rem;">
                        <label>Character Name</label>
                        <input type="text" placeholder="Enter your hero name..." style="width: 100%;">
                    </div>
                    <div>
                        <label>Class Selection</label>
                        <select style="width: 100%;">
                            <option>⚔️ Warrior</option>
                            <option>🧙‍♂️ Mage</option>
                            <option>🏹 Ranger</option>
                        </select>
                    </div>
                </div>
                
                <!-- Item Cards -->
                <div class="surface preview-box">
                    <h4>Item Cards</h4>
                    <div class="surface" style="padding: 1rem; margin-bottom: 1rem;">
                        <div class="text-accent" style="font-weight: bold;">🗡️ Flaming Sword</div>
                        <div class="text-muted" style="font-size: 0.875rem;">Legendary Weapon</div>
                        <div style="margin-top: 0.5rem;">+25 Attack | +10 Fire Damage</div>
                    </div>
                    <div class="surface" style="padding: 1rem;">
                        <div class="text-accent" style="font-weight: bold;">🧪 Health Potion</div>
                        <div class="text-muted" style="font-size: 0.875rem;">Consumable</div>
                        <div style="margin-top: 0.5rem;">Restores 50 HP</div>
                    </div>
                </div>
                
                <!-- Game Stats -->
                <div class="surface preview-box">
                    <h4>Game Statistics</h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                        <div style="text-align: center;">
                            <div class="text-muted">Level</div>
                            <div class="text-accent" style="font-size: 2rem; font-weight: bold;">42</div>
                        </div>
                        <div style="text-align: center;">
                            <div class="text-muted">Gold</div>
                            <div class="text-accent" style="font-size: 2rem; font-weight: bold;">2,847</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Save Section -->
        <div class="save-section">
            <h3 style="margin-top: 0;">💾 Save Your Settings</h3>
            <p class="text-muted">Your preferences will be automatically synced across all your devices</p>
            
            <div id="save-status" class="save-status"></div>
            
            <div style="display: flex; gap: 1rem; justify-content: center; align-items: center; flex-wrap: wrap;">
                <button id="save-btn" class="button" onclick="saveSettings()">
                    <span style="margin-right: 0.5rem;">💾</span>Save Settings
                </button>
                <button class="button" onclick="resetToDefaults()" style="background: rgba(255, 100, 100, 0.2); border-color: rgba(255, 100, 100, 0.4);">
                    <span style="margin-right: 0.5rem;">🔄</span>Reset to Defaults
                </button>
            </div>
            
            <p style="font-size: 0.875rem; color: var(--color-muted); margin-top: 1rem;">
                <em>Settings are saved to your account and will persist across sessions</em>
            </p>
        </div>

        <!-- Footer -->
        <footer class="main-footer">
            <div class="footer-links">
                <a href="/players/">Dashboard</a>
                <a href="/players/help.php">Help & Guide</a>
                <a href="/players/support.php">Support</a>
            </div>
            <div class="footer-info">
                <p>XRPG Settings • Player: <?= $username ?></p>
                <p>&copy; 2025 XRPG. All rights reserved.</p>
            </div>
        </footer>
    </main>

    <script>
        // Initialize settings from PHP data
        const userPreferences = <?= json_encode($preferences) ?>;
        
        // Load theme settings from database
        function loadSettingsFromDB() {
            // Apply theme mode
            setTheme(userPreferences.theme_mode);
            
            // Apply colors
            setAccentColors(userPreferences.accent_color, userPreferences.accent_secondary);
            
            // Apply font
            setFont(userPreferences.font_family);
            
            // Apply visual effects
            setRadius(userPreferences.border_radius);
            setShadowIntensity(userPreferences.shadow_intensity);
            setOpacity(userPreferences.ui_opacity);
            
            // Update UI controls
            updateUIControls();
        }
        
        function updateUIControls() {
            // Theme toggle
            const themeToggle = document.getElementById('theme-mode-toggle');
            if (themeToggle) {
                themeToggle.checked = userPreferences.theme_mode === 'light';
            }
            
            // Update theme button
            const themeBtn = document.getElementById('theme-toggle');
            if (themeBtn) themeBtn.textContent = userPreferences.theme_mode === 'dark' ? '🌞' : '🌙';
            
            // Color pickers
            const primaryPicker = document.getElementById('accent-primary');
            if (primaryPicker) primaryPicker.value = userPreferences.accent_color;
            
            const secondaryPicker = document.getElementById('accent-secondary');
            if (secondaryPicker) secondaryPicker.value = userPreferences.accent_secondary;
            
            // Font selector
            const fontSelect = document.getElementById('font-select');
            if (fontSelect) fontSelect.value = userPreferences.font_family;
            
            // Sliders
            const radiusSlider = document.getElementById('radius-slider');
            if (radiusSlider) {
                radiusSlider.value = userPreferences.border_radius;
                document.getElementById('radius-value').textContent = userPreferences.border_radius + 'px';
            }
            
            const shadowSlider = document.getElementById('shadow-slider');
            if (shadowSlider) {
                shadowSlider.value = userPreferences.shadow_intensity;
                document.getElementById('shadow-value').textContent = userPreferences.shadow_intensity;
            }
            
            const opacitySlider = document.getElementById('opacity-slider');
            if (opacitySlider) {
                opacitySlider.value = userPreferences.ui_opacity;
                document.getElementById('opacity-value').textContent = userPreferences.ui_opacity;
            }
        }
        
        // Save settings to database
        async function saveSettings() {
            const saveBtn = document.getElementById('save-btn');
            const saveStatus = document.getElementById('save-status');
            
            // Disable save button and show loading
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span style="margin-right: 0.5rem;">⏳</span>Saving...';
            
            try {
                const settings = {
                    theme_mode: document.getElementById('theme-mode-toggle').checked ? 'light' : 'dark',
                    accent_color: document.getElementById('accent-primary').value,
                    accent_secondary: document.getElementById('accent-secondary').value,
                    font_family: document.getElementById('font-select').value,
                    border_radius: parseInt(document.getElementById('radius-slider').value),
                    shadow_intensity: parseFloat(document.getElementById('shadow-slider').value),
                    ui_opacity: parseFloat(document.getElementById('opacity-slider').value)
                };
                
                const response = await fetch('/players/save-settings.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(settings),
                    credentials: 'same-origin'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Update local preferences
                    Object.assign(userPreferences, settings);
                    
                    // Show success message
                    saveStatus.className = 'save-status success';
                    saveStatus.textContent = '✅ Settings saved successfully!';
                    saveStatus.style.display = 'block';
                    
                    // Hide success message after 3 seconds
                    setTimeout(() => {
                        saveStatus.style.display = 'none';
                    }, 3000);
                } else {
                    throw new Error(result.message || 'Failed to save settings');
                }
            } catch (error) {
                console.error('Save error:', error);
                saveStatus.className = 'save-status error';
                saveStatus.textContent = '❌ Failed to save settings: ' + error.message;
                saveStatus.style.display = 'block';
            } finally {
                // Re-enable save button
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<span style="margin-right: 0.5rem;">💾</span>Save Settings';
            }
        }
        
        // Reset to default settings
        function resetToDefaults() {
            if (!confirm('Are you sure you want to reset all settings to defaults? This cannot be undone.')) {
                return;
            }
            
            // Reset to defaults
            document.getElementById('theme-mode-toggle').checked = false;
            document.getElementById('accent-primary').value = '#5299e0';
            document.getElementById('accent-secondary').value = '#81aaff';
            document.getElementById('font-select').value = 'sans';
            document.getElementById('radius-slider').value = 18;
            document.getElementById('shadow-slider').value = 0.36;
            document.getElementById('opacity-slider').value = 0.96;
            
            // Apply the defaults
            applyCurrentSettings();
            
            // Save to database
            saveSettings();
        }
        
        // Apply current settings from form
        function applyCurrentSettings() {
            const themeMode = document.getElementById('theme-mode-toggle').checked ? 'light' : 'dark';
            const primary = document.getElementById('accent-primary').value;
            const secondary = document.getElementById('accent-secondary').value;
            const font = document.getElementById('font-select').value;
            const radius = document.getElementById('radius-slider').value;
            const shadow = document.getElementById('shadow-slider').value;
            const opacity = document.getElementById('opacity-slider').value;
            
            setTheme(themeMode);
            setAccentColors(primary, secondary);
            setFont(font);
            setRadius(radius);
            setShadowIntensity(shadow);
            setOpacity(opacity);
            
            // Update value displays
            document.getElementById('radius-value').textContent = radius + 'px';
            document.getElementById('shadow-value').textContent = shadow;
            document.getElementById('opacity-value').textContent = opacity;
            
            // Update theme toggle button
            const themeBtn = document.getElementById('theme-toggle');
            if (themeBtn) themeBtn.textContent = themeMode === 'dark' ? '🌞' : '🌙';
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', () => {
			
			 const checkbox = document.getElementById('theme-mode-toggle');
    const toggleBtn = document.getElementById('demo-theme-btn');
    
    // If we have both elements, wire up the button
    if (checkbox && toggleBtn) {
        // Initial state
        toggleBtn.textContent = checkbox.checked ? '🌙' : '🌞';
        
        // Wire up the button click to toggle the hidden checkbox
        toggleBtn.addEventListener('click', () => {
            checkbox.checked = !checkbox.checked;
            
            // Update button icon
            toggleBtn.textContent = checkbox.checked ? '🌙' : '🌞';
            
            // Trigger the change event on the checkbox
            // This ensures all existing event handlers run
            const event = new Event('change');
            checkbox.dispatchEvent(event);
        });
        
        // Also listen to checkbox changes to update button
        checkbox.addEventListener('change', () => {
            toggleBtn.textContent = checkbox.checked ? '🌙' : '🌞';
        });
    }
    
    // Hide the fixed theme toggle since we're using the demo one
    const fixedToggle = document.getElementById('theme-toggle');
    if (fixedToggle) {
        fixedToggle.style.display = 'none';
    }
            // Load settings from database
            loadSettingsFromDB();
            
            // Add event listeners for real-time preview
            document.getElementById('theme-mode-toggle').addEventListener('change', applyCurrentSettings);
            document.getElementById('accent-primary').addEventListener('input', applyCurrentSettings);
            document.getElementById('accent-secondary').addEventListener('input', applyCurrentSettings);
            document.getElementById('font-select').addEventListener('change', applyCurrentSettings);
            document.getElementById('radius-slider').addEventListener('input', applyCurrentSettings);
            document.getElementById('shadow-slider').addEventListener('input', applyCurrentSettings);
            document.getElementById('opacity-slider').addEventListener('input', applyCurrentSettings);
            
            // Fixed theme toggle button
            document.getElementById('theme-toggle').addEventListener('click', function() {
                const toggle = document.getElementById('theme-mode-toggle');
                toggle.checked = !toggle.checked;
                applyCurrentSettings();
            });
        });
        
        // Logout function
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                fetch('/auth/logout.php', {
                    method: 'POST',
                    credentials: 'same-origin'
                })
                .then(() => {
                    window.location.href = '/';
                })
                .catch(error => {
                    console.error('Logout error:', error);
                    window.location.href = '/';
                });
            }
        }
    </script>
    <script src="/assets/js/theme.js"></script>
	
	// Add this JavaScript to the bottom of settings.php before closing the </body> tag
// Replace the existing <script> block with this fixed version

<script>
    // Initialize settings from PHP data
    const userPreferences = <?= json_encode($preferences) ?>;
    
    // Load theme settings from database
    function loadSettingsFromDB() {
        // Apply theme mode (FIXED: Set data-theme attribute first)
        document.documentElement.setAttribute('data-theme', userPreferences.theme_mode);
        setTheme(userPreferences.theme_mode);
        
        // Apply colors
        setAccentColors(userPreferences.accent_color, userPreferences.accent_secondary);
        
        // Apply font
        setFont(userPreferences.font_family);
        
        // Apply visual effects (FIXED: Apply in the correct order)
        setRadius(userPreferences.border_radius);
        setShadowIntensity(userPreferences.shadow_intensity);
        setOpacity(userPreferences.ui_opacity);
        
        // Update UI controls
        updateUIControls();
    }
    
    function updateUIControls() {
        // Theme toggle (FIXED: Correct the checked state logic)
        const themeToggle = document.getElementById('theme-mode-toggle');
        if (themeToggle) {
            themeToggle.checked = userPreferences.theme_mode === 'light';
        }
        
        // Update theme button
        const themeBtn = document.getElementById('theme-toggle');
        if (themeBtn) themeBtn.textContent = userPreferences.theme_mode === 'dark' ? '🌞' : '🌙';
        
        // Color pickers
        const primaryPicker = document.getElementById('accent-primary');
        if (primaryPicker) primaryPicker.value = userPreferences.accent_color;
        
        const secondaryPicker = document.getElementById('accent-secondary');
        if (secondaryPicker) secondaryPicker.value = userPreferences.accent_secondary;
        
        // Font selector
        const fontSelect = document.getElementById('font-select');
        if (fontSelect) fontSelect.value = userPreferences.font_family;
        
        // Sliders
        const radiusSlider = document.getElementById('radius-slider');
        if (radiusSlider) {
            radiusSlider.value = userPreferences.border_radius;
            document.getElementById('radius-value').textContent = userPreferences.border_radius + 'px';
        }
        
        const shadowSlider = document.getElementById('shadow-slider');
        if (shadowSlider) {
            shadowSlider.value = userPreferences.shadow_intensity;
            document.getElementById('shadow-value').textContent = userPreferences.shadow_intensity;
        }
        
        const opacitySlider = document.getElementById('opacity-slider');
        if (opacitySlider) {
            opacitySlider.value = userPreferences.ui_opacity;
            document.getElementById('opacity-value').textContent = userPreferences.ui_opacity;
        }
        
        // Check for contrast issues
        checkContrast(userPreferences.accent_color);
    }
    
    // Save settings to database
    async function saveSettings() {
        const saveBtn = document.getElementById('save-btn');
        const saveStatus = document.getElementById('save-status');
        
        // Disable save button and show loading
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<span style="margin-right: 0.5rem;">⏳</span>Saving...';
        
        try {
            const settings = {
                theme_mode: document.getElementById('theme-mode-toggle').checked ? 'light' : 'dark',
                accent_color: document.getElementById('accent-primary').value,
                accent_secondary: document.getElementById('accent-secondary').value,
                font_family: document.getElementById('font-select').value,
                border_radius: parseInt(document.getElementById('radius-slider').value),
                shadow_intensity: parseFloat(document.getElementById('shadow-slider').value),
                ui_opacity: parseFloat(document.getElementById('opacity-slider').value)
            };
            
            const response = await fetch('/players/save-settings.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(settings),
                credentials: 'same-origin'
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Update local preferences
                Object.assign(userPreferences, settings);
                
                // Show success message
                saveStatus.className = 'save-status success';
                saveStatus.textContent = '✅ Settings saved successfully!';
                saveStatus.style.display = 'block';
                
                // Hide success message after 3 seconds
                setTimeout(() => {
                    saveStatus.style.display = 'none';
                }, 3000);
            } else {
                throw new Error(result.message || 'Failed to save settings');
            }
        } catch (error) {
            console.error('Save error:', error);
            saveStatus.className = 'save-status error';
            saveStatus.textContent = '❌ Failed to save settings: ' + error.message;
            saveStatus.style.display = 'block';
        } finally {
            // Re-enable save button
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<span style="margin-right: 0.5rem;">💾</span>Save Settings';
        }
    }
    
    // Reset to default settings
    function resetToDefaults() {
        if (!confirm('Are you sure you want to reset all settings to defaults? This cannot be undone.')) {
            return;
        }
        
        // Reset to defaults
        document.getElementById('theme-mode-toggle').checked = false;
        document.getElementById('accent-primary').value = '#5299e0';
        document.getElementById('accent-secondary').value = '#81aaff';
        document.getElementById('font-select').value = 'sans';
        document.getElementById('radius-slider').value = 18;
        document.getElementById('shadow-slider').value = 0.36;
        document.getElementById('opacity-slider').value = 0.96;
        
        // Apply the defaults
        applyCurrentSettings();
        
        // Save to database
        saveSettings();
    }
    
    // Apply current settings from form
    function applyCurrentSettings() {
        const themeMode = document.getElementById('theme-mode-toggle').checked ? 'light' : 'dark';
        const primary = document.getElementById('accent-primary').value;
        const secondary = document.getElementById('accent-secondary').value;
        const font = document.getElementById('font-select').value;
        const radius = document.getElementById('radius-slider').value;
        const shadow = document.getElementById('shadow-slider').value;
        const opacity = document.getElementById('opacity-slider').value;
        
        // FIXED: Set data-theme attribute first to ensure correct theme state
        document.documentElement.setAttribute('data-theme', themeMode);
        
        // Apply settings in the proper order
        setTheme(themeMode);
        setAccentColors(primary, secondary);
        setFont(font);
        setRadius(radius);
        setShadowIntensity(shadow);
        setOpacity(opacity);
        
        // Update value displays
        document.getElementById('radius-value').textContent = radius + 'px';
        document.getElementById('shadow-value').textContent = shadow;
        document.getElementById('opacity-value').textContent = opacity;
        
        // Update theme toggle button
        const themeBtn = document.getElementById('theme-toggle');
        if (themeBtn) themeBtn.textContent = themeMode === 'dark' ? '🌞' : '🌙';
        
        // Check for contrast issues
        checkContrast(primary);
    }
    
    // ADDED: Check color contrast for accessibility
    function checkContrast(color) {
        const hexToRgb = (hex) => {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        };
        
        const rgb = hexToRgb(color);
        if (!rgb) return;
        
        // Calculate luminance
        const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
        const contrastWarning = document.getElementById('contrast-warning');
        
        const currentTheme = document.getElementById('theme-mode-toggle').checked ? 'light' : 'dark';
        
        // Check contrast based on theme
        if ((currentTheme === 'light' && luminance > 0.7) || 
            (currentTheme === 'dark' && luminance < 0.3)) {
            contrastWarning.style.display = 'block';
        } else {
            contrastWarning.style.display = 'none';
        }
    }
    
    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
        // Load settings from database
        loadSettingsFromDB();
        
        // Add event listeners for real-time preview
        document.getElementById('theme-mode-toggle').addEventListener('change', function() {
            // FIXED: Ensure the theme toggle button state is synced correctly
            const themeMode = this.checked ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', themeMode);
            applyCurrentSettings();
        });
        
        document.getElementById('accent-primary').addEventListener('input', applyCurrentSettings);
        document.getElementById('accent-secondary').addEventListener('input', applyCurrentSettings);
        document.getElementById('font-select').addEventListener('change', applyCurrentSettings);
        document.getElementById('radius-slider').addEventListener('input', applyCurrentSettings);
        document.getElementById('shadow-slider').addEventListener('input', applyCurrentSettings);
        document.getElementById('opacity-slider').addEventListener('input', applyCurrentSettings);
        
        // Fixed theme toggle button
        document.getElementById('theme-toggle').addEventListener('click', function() {
            const toggle = document.getElementById('theme-mode-toggle');
            toggle.checked = !toggle.checked;
            
            // FIXED: Update data-theme attribute
            document.documentElement.setAttribute('data-theme', toggle.checked ? 'light' : 'dark');
            
            applyCurrentSettings();
        });
    });
    
    // Logout function
    function logout() {
        if (confirm('Are you sure you want to logout?')) {
            fetch('/auth/logout.php', {
                method: 'POST',
                credentials: 'same-origin'
            })
            .then(() => {
                window.location.href = '/';
            })
            .catch(error => {
                console.error('Logout error:', error);
                window.location.href = '/';
            });
        }
    }
</script>
</body>
</html>

================
File: thirdparty/composer.json
================
{
    "require": {
        "vlucas/phpdotenv": "^5.6",
        "web-auth/webauthn-lib": "^4.9"
    }
}

================
File: thirdparty/composer.lock
================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "23fc68c05b2be6a03f78c5d753f1c6d1",
    "packages": [
        {
            "name": "brick/math",
            "version": "0.12.3",
            "source": {
                "type": "git",
                "url": "https://github.com/brick/math.git",
                "reference": "866551da34e9a618e64a819ee1e01c20d8a588ba"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/brick/math/zipball/866551da34e9a618e64a819ee1e01c20d8a588ba",
                "reference": "866551da34e9a618e64a819ee1e01c20d8a588ba",
                "shasum": ""
            },
            "require": {
                "php": "^8.1"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.2",
                "phpunit/phpunit": "^10.1",
                "vimeo/psalm": "6.8.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Brick\\Math\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Arbitrary-precision arithmetic library",
            "keywords": [
                "Arbitrary-precision",
                "BigInteger",
                "BigRational",
                "arithmetic",
                "bigdecimal",
                "bignum",
                "bignumber",
                "brick",
                "decimal",
                "integer",
                "math",
                "mathematics",
                "rational"
            ],
            "support": {
                "issues": "https://github.com/brick/math/issues",
                "source": "https://github.com/brick/math/tree/0.12.3"
            },
            "funding": [
                {
                    "url": "https://github.com/BenMorel",
                    "type": "github"
                }
            ],
            "time": "2025-02-28T13:11:00+00:00"
        },
        {
            "name": "graham-campbell/result-type",
            "version": "v1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/GrahamCampbell/Result-Type.git",
                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/GrahamCampbell/Result-Type/zipball/3ba905c11371512af9d9bdd27d99b782216b6945",
                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0",
                "phpoption/phpoption": "^1.9.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "GrahamCampbell\\ResultType\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                }
            ],
            "description": "An Implementation Of The Result Type",
            "keywords": [
                "Graham Campbell",
                "GrahamCampbell",
                "Result Type",
                "Result-Type",
                "result"
            ],
            "support": {
                "issues": "https://github.com/GrahamCampbell/Result-Type/issues",
                "source": "https://github.com/GrahamCampbell/Result-Type/tree/v1.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/graham-campbell/result-type",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-20T21:45:45+00:00"
        },
        {
            "name": "lcobucci/clock",
            "version": "3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/lcobucci/clock.git",
                "reference": "039ef98c6b57b101d10bd11d8fdfda12cbd996dc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/lcobucci/clock/zipball/039ef98c6b57b101d10bd11d8fdfda12cbd996dc",
                "reference": "039ef98c6b57b101d10bd11d8fdfda12cbd996dc",
                "shasum": ""
            },
            "require": {
                "php": "~8.1.0 || ~8.2.0",
                "psr/clock": "^1.0"
            },
            "provide": {
                "psr/clock-implementation": "1.0"
            },
            "require-dev": {
                "infection/infection": "^0.26",
                "lcobucci/coding-standard": "^9.0",
                "phpstan/extension-installer": "^1.2",
                "phpstan/phpstan": "^1.9.4",
                "phpstan/phpstan-deprecation-rules": "^1.1.1",
                "phpstan/phpstan-phpunit": "^1.3.2",
                "phpstan/phpstan-strict-rules": "^1.4.4",
                "phpunit/phpunit": "^9.5.27"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Lcobucci\\Clock\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Luís Cobucci",
                    "email": "lcobucci@gmail.com"
                }
            ],
            "description": "Yet another clock abstraction",
            "support": {
                "issues": "https://github.com/lcobucci/clock/issues",
                "source": "https://github.com/lcobucci/clock/tree/3.0.0"
            },
            "funding": [
                {
                    "url": "https://github.com/lcobucci",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/lcobucci",
                    "type": "patreon"
                }
            ],
            "time": "2022-12-19T15:00:24+00:00"
        },
        {
            "name": "paragonie/constant_time_encoding",
            "version": "v3.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/paragonie/constant_time_encoding.git",
                "reference": "df1e7fde177501eee2037dd159cf04f5f301a512"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/paragonie/constant_time_encoding/zipball/df1e7fde177501eee2037dd159cf04f5f301a512",
                "reference": "df1e7fde177501eee2037dd159cf04f5f301a512",
                "shasum": ""
            },
            "require": {
                "php": "^8"
            },
            "require-dev": {
                "phpunit/phpunit": "^9",
                "vimeo/psalm": "^4|^5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "ParagonIE\\ConstantTime\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Paragon Initiative Enterprises",
                    "email": "security@paragonie.com",
                    "homepage": "https://paragonie.com",
                    "role": "Maintainer"
                },
                {
                    "name": "Steve 'Sc00bz' Thomas",
                    "email": "steve@tobtu.com",
                    "homepage": "https://www.tobtu.com",
                    "role": "Original Developer"
                }
            ],
            "description": "Constant-time Implementations of RFC 4648 Encoding (Base-64, Base-32, Base-16)",
            "keywords": [
                "base16",
                "base32",
                "base32_decode",
                "base32_encode",
                "base64",
                "base64_decode",
                "base64_encode",
                "bin2hex",
                "encoding",
                "hex",
                "hex2bin",
                "rfc4648"
            ],
            "support": {
                "email": "info@paragonie.com",
                "issues": "https://github.com/paragonie/constant_time_encoding/issues",
                "source": "https://github.com/paragonie/constant_time_encoding"
            },
            "time": "2024-05-08T12:36:18+00:00"
        },
        {
            "name": "phpoption/phpoption",
            "version": "1.9.3",
            "source": {
                "type": "git",
                "url": "https://github.com/schmittjoh/php-option.git",
                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/e3fac8b24f56113f7cb96af14958c0dd16330f54",
                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54",
                "shasum": ""
            },
            "require": {
                "php": "^7.2.5 || ^8.0"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "1.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpOption\\": "src/PhpOption/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "Apache-2.0"
            ],
            "authors": [
                {
                    "name": "Johannes M. Schmitt",
                    "email": "schmittjoh@gmail.com",
                    "homepage": "https://github.com/schmittjoh"
                },
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                }
            ],
            "description": "Option Type for PHP",
            "keywords": [
                "language",
                "option",
                "php",
                "type"
            ],
            "support": {
                "issues": "https://github.com/schmittjoh/php-option/issues",
                "source": "https://github.com/schmittjoh/php-option/tree/1.9.3"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpoption/phpoption",
                    "type": "tidelift"
                }
            ],
            "time": "2024-07-20T21:41:07+00:00"
        },
        {
            "name": "psr/clock",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/clock.git",
                "reference": "e41a24703d4560fd0acb709162f73b8adfc3aa0d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/clock/zipball/e41a24703d4560fd0acb709162f73b8adfc3aa0d",
                "reference": "e41a24703d4560fd0acb709162f73b8adfc3aa0d",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Psr\\Clock\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for reading the clock.",
            "homepage": "https://github.com/php-fig/clock",
            "keywords": [
                "clock",
                "now",
                "psr",
                "psr-20",
                "time"
            ],
            "support": {
                "issues": "https://github.com/php-fig/clock/issues",
                "source": "https://github.com/php-fig/clock/tree/1.0.0"
            },
            "time": "2022-11-25T14:36:26+00:00"
        },
        {
            "name": "psr/event-dispatcher",
            "version": "1.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/event-dispatcher.git",
                "reference": "dbefd12671e8a14ec7f180cab83036ed26714bb0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0",
                "reference": "dbefd12671e8a14ec7f180cab83036ed26714bb0",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\EventDispatcher\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Standard interfaces for event handling.",
            "keywords": [
                "events",
                "psr",
                "psr-14"
            ],
            "support": {
                "issues": "https://github.com/php-fig/event-dispatcher/issues",
                "source": "https://github.com/php-fig/event-dispatcher/tree/1.0.0"
            },
            "time": "2019-01-08T18:20:26+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "reference": "bb5906edc1c324c9a05aa0873d40117941e5fa90",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client"
            },
            "time": "2023-09-23T14:17:50+00:00"
        },
        {
            "name": "psr/http-factory",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-factory.git",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-factory/zipball/2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "reference": "2b4765fddfe3b508ac62f829e852b1501d3f6e8a",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/http-message": "^1.0 || ^2.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "PSR-17: Common interfaces for PSR-7 HTTP message factories",
            "keywords": [
                "factory",
                "http",
                "message",
                "psr",
                "psr-17",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-factory"
            },
            "time": "2024-04-15T12:06:14+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "reference": "402d35bcb92c70c026d1a6a9883f06b2ead23d71",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/2.0"
            },
            "time": "2023-04-04T09:54:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                "shasum": ""
            },
            "require": {
                "php": ">=8.0.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "https://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/3.0.2"
            },
            "time": "2024-09-11T13:17:53+00:00"
        },
        {
            "name": "spomky-labs/cbor-php",
            "version": "3.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/Spomky-Labs/cbor-php.git",
                "reference": "499d9bff0a6d59c4f1b813cc617fc3fd56d6dca4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Spomky-Labs/cbor-php/zipball/499d9bff0a6d59c4f1b813cc617fc3fd56d6dca4",
                "reference": "499d9bff0a6d59c4f1b813cc617fc3fd56d6dca4",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.9|^0.10|^0.11|^0.12",
                "ext-mbstring": "*",
                "php": ">=8.0"
            },
            "require-dev": {
                "ekino/phpstan-banned-code": "^1.0",
                "ext-json": "*",
                "infection/infection": "^0.29",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/extension-installer": "^1.1",
                "phpstan/phpstan": "^1.0",
                "phpstan/phpstan-beberlei-assert": "^1.0",
                "phpstan/phpstan-deprecation-rules": "^1.0",
                "phpstan/phpstan-phpunit": "^1.0",
                "phpstan/phpstan-strict-rules": "^1.0",
                "phpunit/phpunit": "^10.1|^11.0",
                "qossmic/deptrac": "^2.0",
                "rector/rector": "^1.0",
                "roave/security-advisories": "dev-latest",
                "symfony/var-dumper": "^6.0|^7.0",
                "symplify/easy-coding-standard": "^12.0"
            },
            "suggest": {
                "ext-bcmath": "GMP or BCMath extensions will drastically improve the library performance. BCMath extension needed to handle the Big Float and Decimal Fraction Tags",
                "ext-gmp": "GMP or BCMath extensions will drastically improve the library performance"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "CBOR\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Florent Morselli",
                    "homepage": "https://github.com/Spomky"
                },
                {
                    "name": "All contributors",
                    "homepage": "https://github.com/Spomky-Labs/cbor-php/contributors"
                }
            ],
            "description": "CBOR Encoder/Decoder for PHP",
            "keywords": [
                "Concise Binary Object Representation",
                "RFC7049",
                "cbor"
            ],
            "support": {
                "issues": "https://github.com/Spomky-Labs/cbor-php/issues",
                "source": "https://github.com/Spomky-Labs/cbor-php/tree/3.1.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Spomky",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/FlorentMorselli",
                    "type": "patreon"
                }
            ],
            "time": "2024-07-18T08:37:03+00:00"
        },
        {
            "name": "spomky-labs/pki-framework",
            "version": "1.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Spomky-Labs/pki-framework.git",
                "reference": "5ff1dcc21e961b60149a80e77f744fc047800b31"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Spomky-Labs/pki-framework/zipball/5ff1dcc21e961b60149a80e77f744fc047800b31",
                "reference": "5ff1dcc21e961b60149a80e77f744fc047800b31",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.10|^0.11|^0.12|^0.13",
                "ext-mbstring": "*",
                "php": ">=8.1"
            },
            "require-dev": {
                "ekino/phpstan-banned-code": "^1.0|^2.0|^3.0",
                "ext-gmp": "*",
                "ext-openssl": "*",
                "infection/infection": "^0.28|^0.29",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/extension-installer": "^1.3|^2.0",
                "phpstan/phpstan": "^1.8|^2.0",
                "phpstan/phpstan-deprecation-rules": "^1.0|^2.0",
                "phpstan/phpstan-phpunit": "^1.1|^2.0",
                "phpstan/phpstan-strict-rules": "^1.3|^2.0",
                "phpunit/phpunit": "^10.1|^11.0|^12.0",
                "rector/rector": "^1.0|^2.0",
                "roave/security-advisories": "dev-latest",
                "symfony/string": "^6.4|^7.0",
                "symfony/var-dumper": "^6.4|^7.0",
                "symplify/easy-coding-standard": "^12.0"
            },
            "suggest": {
                "ext-bcmath": "For better performance (or GMP)",
                "ext-gmp": "For better performance (or BCMath)",
                "ext-openssl": "For OpenSSL based cyphering"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "SpomkyLabs\\Pki\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Joni Eskelinen",
                    "email": "jonieske@gmail.com",
                    "role": "Original developer"
                },
                {
                    "name": "Florent Morselli",
                    "email": "florent.morselli@spomky-labs.com",
                    "role": "Spomky-Labs PKI Framework developer"
                }
            ],
            "description": "A PHP framework for managing Public Key Infrastructures. It comprises X.509 public key certificates, attribute certificates, certification requests and certification path validation.",
            "homepage": "https://github.com/spomky-labs/pki-framework",
            "keywords": [
                "DER",
                "Private Key",
                "ac",
                "algorithm identifier",
                "asn.1",
                "asn1",
                "attribute certificate",
                "certificate",
                "certification request",
                "cryptography",
                "csr",
                "decrypt",
                "ec",
                "encrypt",
                "pem",
                "pkcs",
                "public key",
                "rsa",
                "sign",
                "signature",
                "verify",
                "x.509",
                "x.690",
                "x509",
                "x690"
            ],
            "support": {
                "issues": "https://github.com/Spomky-Labs/pki-framework/issues",
                "source": "https://github.com/Spomky-Labs/pki-framework/tree/1.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Spomky",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/FlorentMorselli",
                    "type": "patreon"
                }
            ],
            "time": "2025-04-25T15:57:13+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v3.5.1",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6",
                "reference": "74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/symfony/contracts",
                    "name": "symfony/contracts"
                },
                "branch-alias": {
                    "dev-main": "3.5-dev"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.1"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:20:29+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.32.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638",
                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-ctype": "*"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/symfony/polyfill",
                    "name": "symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.32.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/polyfill-mbstring",
            "version": "v1.32.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-mbstring.git",
                "reference": "6d857f4d76bd4b343eac26d6b539585d2bc56493"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/6d857f4d76bd4b343eac26d6b539585d2bc56493",
                "reference": "6d857f4d76bd4b343eac26d6b539585d2bc56493",
                "shasum": ""
            },
            "require": {
                "ext-iconv": "*",
                "php": ">=7.2"
            },
            "provide": {
                "ext-mbstring": "*"
            },
            "suggest": {
                "ext-mbstring": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/symfony/polyfill",
                    "name": "symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Mbstring\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for the Mbstring extension",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "mbstring",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.32.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-12-23T08:48:59+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.32.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "0cc9dd0f17f61d8131e7df6b84bd344899fe2608"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/0cc9dd0f17f61d8131e7df6b84bd344899fe2608",
                "reference": "0cc9dd0f17f61d8131e7df6b84bd344899fe2608",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/symfony/polyfill",
                    "name": "symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.32.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2025-01-02T08:10:11+00:00"
        },
        {
            "name": "symfony/polyfill-uuid",
            "version": "v1.32.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-uuid.git",
                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-uuid/zipball/21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2"
            },
            "provide": {
                "ext-uuid": "*"
            },
            "suggest": {
                "ext-uuid": "For best performance"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/symfony/polyfill",
                    "name": "symfony/polyfill"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ],
                "psr-4": {
                    "Symfony\\Polyfill\\Uuid\\": ""
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Grégoire Pineau",
                    "email": "lyrixx@lyrixx.info"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for uuid functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "uuid"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-uuid/tree/v1.32.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-09T11:45:10+00:00"
        },
        {
            "name": "symfony/uid",
            "version": "v6.4.13",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/uid.git",
                "reference": "18eb207f0436a993fffbdd811b5b8fa35fa5e007"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/uid/zipball/18eb207f0436a993fffbdd811b5b8fa35fa5e007",
                "reference": "18eb207f0436a993fffbdd811b5b8fa35fa5e007",
                "shasum": ""
            },
            "require": {
                "php": ">=8.1",
                "symfony/polyfill-uuid": "^1.15"
            },
            "require-dev": {
                "symfony/console": "^5.4|^6.0|^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Uid\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Grégoire Pineau",
                    "email": "lyrixx@lyrixx.info"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Provides an object-oriented API to generate and represent UIDs",
            "homepage": "https://symfony.com",
            "keywords": [
                "UID",
                "ulid",
                "uuid"
            ],
            "support": {
                "source": "https://github.com/symfony/uid/tree/v6.4.13"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2024-09-25T14:18:03+00:00"
        },
        {
            "name": "vlucas/phpdotenv",
            "version": "v5.6.2",
            "source": {
                "type": "git",
                "url": "https://github.com/vlucas/phpdotenv.git",
                "reference": "24ac4c74f91ee2c193fa1aaa5c249cb0822809af"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/24ac4c74f91ee2c193fa1aaa5c249cb0822809af",
                "reference": "24ac4c74f91ee2c193fa1aaa5c249cb0822809af",
                "shasum": ""
            },
            "require": {
                "ext-pcre": "*",
                "graham-campbell/result-type": "^1.1.3",
                "php": "^7.2.5 || ^8.0",
                "phpoption/phpoption": "^1.9.3",
                "symfony/polyfill-ctype": "^1.24",
                "symfony/polyfill-mbstring": "^1.24",
                "symfony/polyfill-php80": "^1.24"
            },
            "require-dev": {
                "bamarni/composer-bin-plugin": "^1.8.2",
                "ext-filter": "*",
                "phpunit/phpunit": "^8.5.34 || ^9.6.13 || ^10.4.2"
            },
            "suggest": {
                "ext-filter": "Required to use the boolean validator."
            },
            "type": "library",
            "extra": {
                "bamarni-bin": {
                    "bin-links": true,
                    "forward-command": false
                },
                "branch-alias": {
                    "dev-master": "5.6-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Dotenv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Graham Campbell",
                    "email": "hello@gjcampbell.co.uk",
                    "homepage": "https://github.com/GrahamCampbell"
                },
                {
                    "name": "Vance Lucas",
                    "email": "vance@vancelucas.com",
                    "homepage": "https://github.com/vlucas"
                }
            ],
            "description": "Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.",
            "keywords": [
                "dotenv",
                "env",
                "environment"
            ],
            "support": {
                "issues": "https://github.com/vlucas/phpdotenv/issues",
                "source": "https://github.com/vlucas/phpdotenv/tree/v5.6.2"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/vlucas/phpdotenv",
                    "type": "tidelift"
                }
            ],
            "time": "2025-04-30T23:37:27+00:00"
        },
        {
            "name": "web-auth/cose-lib",
            "version": "4.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/web-auth/cose-lib.git",
                "reference": "2166016e48e0214f4f63320a7758a9386d14c92a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/web-auth/cose-lib/zipball/2166016e48e0214f4f63320a7758a9386d14c92a",
                "reference": "2166016e48e0214f4f63320a7758a9386d14c92a",
                "shasum": ""
            },
            "require": {
                "brick/math": "^0.9|^0.10|^0.11|^0.12",
                "ext-json": "*",
                "ext-openssl": "*",
                "php": ">=8.1",
                "spomky-labs/pki-framework": "^1.0"
            },
            "require-dev": {
                "ekino/phpstan-banned-code": "^1.0",
                "infection/infection": "^0.29",
                "php-parallel-lint/php-parallel-lint": "^1.3",
                "phpstan/extension-installer": "^1.3",
                "phpstan/phpstan": "^1.7",
                "phpstan/phpstan-deprecation-rules": "^1.0",
                "phpstan/phpstan-phpunit": "^1.1",
                "phpstan/phpstan-strict-rules": "^1.2",
                "phpunit/phpunit": "^10.1|^11.0",
                "qossmic/deptrac": "^2.0",
                "rector/rector": "^1.0",
                "symfony/phpunit-bridge": "^6.4|^7.0",
                "symplify/easy-coding-standard": "^12.0"
            },
            "suggest": {
                "ext-bcmath": "For better performance, please install either GMP (recommended) or BCMath extension",
                "ext-gmp": "For better performance, please install either GMP (recommended) or BCMath extension"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Cose\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Florent Morselli",
                    "homepage": "https://github.com/Spomky"
                },
                {
                    "name": "All contributors",
                    "homepage": "https://github.com/web-auth/cose/contributors"
                }
            ],
            "description": "CBOR Object Signing and Encryption (COSE) For PHP",
            "homepage": "https://github.com/web-auth",
            "keywords": [
                "COSE",
                "RFC8152"
            ],
            "support": {
                "issues": "https://github.com/web-auth/cose-lib/issues",
                "source": "https://github.com/web-auth/cose-lib/tree/4.4.0"
            },
            "funding": [
                {
                    "url": "https://github.com/Spomky",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/FlorentMorselli",
                    "type": "patreon"
                }
            ],
            "time": "2024-07-18T08:47:32+00:00"
        },
        {
            "name": "web-auth/webauthn-lib",
            "version": "4.9.2",
            "source": {
                "type": "git",
                "url": "https://github.com/web-auth/webauthn-lib.git",
                "reference": "008b25171c27cf4813420d0de31cc059bcc71f1a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/web-auth/webauthn-lib/zipball/008b25171c27cf4813420d0de31cc059bcc71f1a",
                "reference": "008b25171c27cf4813420d0de31cc059bcc71f1a",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "ext-mbstring": "*",
                "ext-openssl": "*",
                "lcobucci/clock": "^2.2|^3.0",
                "paragonie/constant_time_encoding": "^2.6|^3.0",
                "php": ">=8.1",
                "psr/clock": "^1.0",
                "psr/event-dispatcher": "^1.0",
                "psr/http-client": "^1.0",
                "psr/http-factory": "^1.0",
                "psr/log": "^1.0|^2.0|^3.0",
                "spomky-labs/cbor-php": "^3.0",
                "spomky-labs/pki-framework": "^1.0",
                "symfony/deprecation-contracts": "^3.2",
                "symfony/uid": "^6.1|^7.0",
                "web-auth/cose-lib": "^4.2.3"
            },
            "suggest": {
                "phpdocumentor/reflection-docblock": "As of 4.5.x, the phpdocumentor/reflection-docblock component will become mandatory for converting objects such as the Metadata Statement",
                "psr/clock-implementation": "As of 4.5.x, the PSR Clock implementation will replace lcobucci/clock",
                "psr/log-implementation": "Recommended to receive logs from the library",
                "symfony/event-dispatcher": "Recommended to use dispatched events",
                "symfony/property-access": "As of 4.5.x, the symfony/serializer component will become mandatory for converting objects such as the Metadata Statement",
                "symfony/property-info": "As of 4.5.x, the symfony/serializer component will become mandatory for converting objects such as the Metadata Statement",
                "symfony/serializer": "As of 4.5.x, the symfony/serializer component will become mandatory for converting objects such as the Metadata Statement",
                "web-token/jwt-library": "Mandatory for fetching Metadata Statement from distant sources"
            },
            "type": "library",
            "extra": {
                "thanks": {
                    "url": "https://github.com/web-auth/webauthn-framework",
                    "name": "web-auth/webauthn-framework"
                }
            },
            "autoload": {
                "psr-4": {
                    "Webauthn\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Florent Morselli",
                    "homepage": "https://github.com/Spomky"
                },
                {
                    "name": "All contributors",
                    "homepage": "https://github.com/web-auth/webauthn-library/contributors"
                }
            ],
            "description": "FIDO2/Webauthn Support For PHP",
            "homepage": "https://github.com/web-auth",
            "keywords": [
                "FIDO2",
                "fido",
                "webauthn"
            ],
            "support": {
                "source": "https://github.com/web-auth/webauthn-lib/tree/4.9.2"
            },
            "funding": [
                {
                    "url": "https://github.com/Spomky",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/FlorentMorselli",
                    "type": "patreon"
                }
            ],
            "time": "2025-01-04T09:47:58+00:00"
        }
    ],
    "packages-dev": [],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": [],
    "platform-dev": [],
    "plugin-api-version": "2.2.0"
}

================
File: utils/setup-preferences.php
================
<?php
// /utils/setup-preferences.php - Utility script for setting up user preferences

// This script can be run from command line or browser to:
// 1. Create default preferences for existing users
// 2. Test the preferences system
// 3. Bulk update preferences

// Security check - remove in production or add proper authentication
if (php_sapi_name() !== 'cli' && !isset($_GET['allow_web'])) {
    die('This script should only be run from command line. Add ?allow_web=1 to override.');
}

require_once __DIR__ . '/../config/db.php';

echo "XRPG User Preferences Setup Utility\n";
echo "====================================\n\n";

try {
    // Check if user_preferences table exists
    $stmt = $pdo->query("SHOW TABLES LIKE 'user_preferences'");
    if (!$stmt->fetch()) {
        echo "❌ user_preferences table not found!\n";
        echo "Please run the database schema first.\n";
        exit(1);
    }
    
    echo "✅ user_preferences table found\n";
    
    // Get all users without preferences
    $stmt = $pdo->query("
        SELECT u.id, u.username 
        FROM users u 
        LEFT JOIN user_preferences up ON u.id = up.user_id 
        WHERE up.user_id IS NULL
    ");
    $usersWithoutPrefs = $stmt->fetchAll();
    
    echo "Found " . count($usersWithoutPrefs) . " users without preferences\n\n";
    
    if (empty($usersWithoutPrefs)) {
        echo "✅ All users already have preferences set up!\n";
        
        // Show statistics
        $stmt = $pdo->query("
            SELECT 
                theme_mode,
                COUNT(*) as count,
                ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM user_preferences), 1) as percentage
            FROM user_preferences 
            GROUP BY theme_mode
        ");
        $themeStats = $stmt->fetchAll();
        
        echo "\nTheme Statistics:\n";
        foreach ($themeStats as $stat) {
            echo "  {$stat['theme_mode']}: {$stat['count']} users ({$stat['percentage']}%)\n";
        }
        
        // Show most popular colors
        $stmt = $pdo->query("
            SELECT accent_color, COUNT(*) as count 
            FROM user_preferences 
            GROUP BY accent_color 
            ORDER BY count DESC 
            LIMIT 5
        ");
        $colorStats = $stmt->fetchAll();
        
        echo "\nMost Popular Accent Colors:\n";
        foreach ($colorStats as $color) {
            echo "  {$color['accent_color']}: {$color['count']} users\n";
        }
        
    } else {
        // Create default preferences for users without them
        echo "Creating default preferences for users:\n";
        
        $defaultPrefs = [
            'theme_mode' => 'dark',
            'accent_color' => '#5299e0',
            'accent_secondary' => '#81aaff',
            'border_radius' => 18,
            'shadow_intensity' => 0.36,
            'ui_opacity' => 0.96,
            'font_family' => 'sans'
        ];
        
        $stmt = $pdo->prepare("
            INSERT INTO user_preferences 
            (user_id, theme_mode, accent_color, accent_secondary, border_radius, shadow_intensity, ui_opacity, font_family)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ");
        
        $created = 0;
        foreach ($usersWithoutPrefs as $user) {
            try {
                $stmt->execute([
                    $user['id'],
                    $defaultPrefs['theme_mode'],
                    $defaultPrefs['accent_color'],
                    $defaultPrefs['accent_secondary'],
                    $defaultPrefs['border_radius'],
                    $defaultPrefs['shadow_intensity'],
                    $defaultPrefs['ui_opacity'],
                    $defaultPrefs['font_family']
                ]);
                echo "  ✅ Created preferences for user: {$user['username']}\n";
                $created++;
            } catch (Exception $e) {
                echo "  ❌ Failed to create preferences for user: {$user['username']} - " . $e->getMessage() . "\n";
            }
        }
        
        echo "\n✅ Created preferences for {$created} users\n";
    }
    
    // Test the preferences system
    echo "\n" . str_repeat("-", 40) . "\n";
    echo "Testing Preferences System\n";
    echo str_repeat("-", 40) . "\n";
    
    // Get a random user to test with
    $stmt = $pdo->query("SELECT id, username FROM users ORDER BY RAND() LIMIT 1");
    $testUser = $stmt->fetch();
    
    if ($testUser) {
        echo "Testing with user: {$testUser['username']}\n";
        
        // Test loading preferences
        $stmt = $pdo->prepare("SELECT * FROM user_preferences WHERE user_id = ?");
        $stmt->execute([$testUser['id']]);
        $prefs = $stmt->fetch();
        
        if ($prefs) {
            echo "✅ Successfully loaded preferences\n";
            echo "  Theme: {$prefs['theme_mode']}\n";
            echo "  Primary Color: {$prefs['accent_color']}\n";
            echo "  Font: {$prefs['font_family']}\n";
            
            // Test updating preferences
            $newColor = '#ff6b6b'; // Red color for testing
            $stmt = $pdo->prepare("UPDATE user_preferences SET accent_color = ? WHERE user_id = ?");
            $stmt->execute([$newColor, $testUser['id']]);
            
            // Verify update
            $stmt = $pdo->prepare("SELECT accent_color FROM user_preferences WHERE user_id = ?");
            $stmt->execute([$testUser['id']]);
            $updatedColor = $stmt->fetchColumn();
            
            if ($updatedColor === $newColor) {
                echo "✅ Successfully updated preferences\n";
                
                // Restore original color
                $stmt = $pdo->prepare("UPDATE user_preferences SET accent_color = ? WHERE user_id = ?");
                $stmt->execute([$prefs['accent_color'], $testUser['id']]);
                echo "✅ Restored original color\n";
            } else {
                echo "❌ Failed to update preferences\n";
            }
        } else {
            echo "❌ Failed to load preferences\n";
        }
    }
    
    echo "\n✅ Setup complete!\n";
    
} catch (Exception $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
    exit(1);
}

// Additional utility functions
if (php_sapi_name() === 'cli' && isset($argv[1])) {
    switch ($argv[1]) {
        case 'stats':
            showDetailedStats($pdo);
            break;
        case 'reset':
            if (isset($argv[2])) {
                resetUserPreferences($pdo, $argv[2]);
            } else {
                echo "Usage: php setup-preferences.php reset <username>\n";
            }
            break;
        case 'export':
            exportPreferences($pdo);
            break;
        default:
            echo "Available commands:\n";
            echo "  stats - Show detailed statistics\n";
            echo "  reset <username> - Reset user preferences to defaults\n";
            echo "  export - Export all preferences to JSON\n";
    }
}

function showDetailedStats($pdo) {
    echo "\nDetailed Preferences Statistics\n";
    echo "==============================\n";
    
    // Theme distribution
    $stmt = $pdo->query("
        SELECT theme_mode, COUNT(*) as count 
        FROM user_preferences 
        GROUP BY theme_mode
    ");
    echo "\nTheme Mode Distribution:\n";
    while ($row = $stmt->fetch()) {
        echo "  {$row['theme_mode']}: {$row['count']} users\n";
    }
    
    // Font distribution
    $stmt = $pdo->query("
        SELECT font_family, COUNT(*) as count 
        FROM user_preferences 
        GROUP BY font_family 
        ORDER BY count DESC
    ");
    echo "\nFont Family Distribution:\n";
    while ($row = $stmt->fetch()) {
        echo "  {$row['font_family']}: {$row['count']} users\n";
    }
    
    // Average settings
    $stmt = $pdo->query("
        SELECT 
            AVG(border_radius) as avg_radius,
            AVG(shadow_intensity) as avg_shadow,
            AVG(ui_opacity) as avg_opacity
        FROM user_preferences
    ");
    $averages = $stmt->fetch();
    echo "\nAverage Settings:\n";
    echo "  Border Radius: " . round($averages['avg_radius'], 1) . "px\n";
    echo "  Shadow Intensity: " . round($averages['avg_shadow'], 3) . "\n";
    echo "  UI Opacity: " . round($averages['avg_opacity'], 3) . "\n";
}

function resetUserPreferences($pdo, $username) {
    $stmt = $pdo->prepare("SELECT id FROM users WHERE username = ?");
    $stmt->execute([$username]);
    $user = $stmt->fetch();
    
    if (!$user) {
        echo "❌ User '$username' not found\n";
        return;
    }
    
    $stmt = $pdo->prepare("
        UPDATE user_preferences 
        SET theme_mode = 'dark', accent_color = '#5299e0', accent_secondary = '#81aaff',
            border_radius = 18, shadow_intensity = 0.36, ui_opacity = 0.96, font_family = 'sans'
        WHERE user_id = ?
    ");
    
    if ($stmt->execute([$user['id']])) {
        echo "✅ Reset preferences for user '$username'\n";
    } else {
        echo "❌ Failed to reset preferences for user '$username'\n";
    }
}

function exportPreferences($pdo) {
    $stmt = $pdo->query("
        SELECT u.username, up.* 
        FROM user_preferences up 
        JOIN users u ON up.user_id = u.id
    ");
    $preferences = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $filename = 'preferences_export_' . date('Y-m-d_H-i-s') . '.json';
    file_put_contents($filename, json_encode($preferences, JSON_PRETTY_PRINT));
    echo "✅ Exported " . count($preferences) . " preferences to $filename\n";
}

================
File: .env.example
================
DB_HOST=localhost
DB_NAME=xrpg
DB_USER=user
DB_PASS=password
DOMAIN_URL=http://localhost/xrpg
WEBAUTHN_ORIGIN=http://localhost
RP_ID=localhost
RP_NAME=XRPG

================
File: .gitignore
================
# Environment
.env

# Node/Composer/symfony vendors
/vendor/
/node_modules/
/thirdparty/vendor/

/db/*.log
/db/*.bak

# OS
.DS_Store
Thumbs.db

# Ignore logs and other non-essential files
logs/
*.log
.env
thirdparty/vendor/
node_modules/
*.sqlite
*.bak
*.tmp
.idea/
.vscode/
*.swp
*.swo
*.pid
*.sock
*.cache
*.pyc
__pycache__/

================
File: .htaccess
================
# ───────────────────────────────────────────────────────────
# XRPG site rules
# ───────────────────────────────────────────────────────────

<IfModule mod_rewrite.c>
  RewriteEngine On

  # (Optional) Redirect HTTP→HTTPS in production
  # RewriteCond %{HTTPS} off
  # RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

  # Don’t rewrite true static assets
  RewriteCond %{REQUEST_URI} \.(css|js|png|jpe?g|gif|ico|svg|woff2?|ttf|eot)$ [NC]
  RewriteRule ^ - [L]

  # If it’s not a real file or directory, send to index.php
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule ^ index.php [QSA,L]
</IfModule>

<IfModule mod_headers.c>
  # Cache-busting for static assets
  <FilesMatch "\.(css|js|png|jpe?g|gif|ico|svg|woff2?|ttf|eot)$">
    Header set Cache-Control "no-store, no-cache, must-revalidate, max-age=0"
    Header set Pragma "no-cache"
    Header set Expires "0"
  </FilesMatch>

  # Security headers
  Header always set X-Frame-Options          "SAMEORIGIN"
  Header always set X-Content-Type-Options   "nosniff"
  Header always set X-XSS-Protection         "1; mode=block"
  Header always set Referrer-Policy          "strict-origin-when-cross-origin"
</IfModule>

# Block only sensitive server config
<Files ".env">
  Require all denied
</Files>

# Let your app handle 403/404 via index.php
ErrorDocument 403 /index.php
ErrorDocument 404 /index.php

================
File: .repomixignore
================
logs/
*.log
.DS_Store
node_modules/
thirdparty/vendor/
.env
*.sqlite
*.bak
*.tmp
.idea/
.vscode/
*.swp
*.swo
*.pid
*.sock
*.cache
*.pyc
__pycache__/
# Ignore markdown docs not needed for repomix
NAVIGATION.md
STRUCTURE.MD
UPDATES_SYSTEM.md
updates.log

================
File: index.php
================
<?php
// Show all errors, warnings, and notices
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// XRPG Universal Router - index.php
// ---------------------------------
// All site entry traffic comes through here. This handles routing based on authentication state.

session_start();
require_once __DIR__ . '/config/environment.php';

// Get the requested path
$requestUri = $_SERVER['REQUEST_URI'] ?? '/';
$path = parse_url($requestUri, PHP_URL_PATH);

// Remove trailing slash (except for root)
if ($path !== '/' && substr($path, -1) === '/') {
    $path = rtrim($path, '/');
}

// Get current user
$user = $_SESSION['user'] ?? null;

// Handle API routes first (before authentication checks)
if (str_starts_with($path, '/api/')) {
    switch ($path) {
        case '/api/updates.php':
            require __DIR__ . '/api/updates.php';
            exit;
        default:
            http_response_code(404);
            echo json_encode(['error' => 'API endpoint not found']);
            exit;
    }
}

// Handle authentication routes
if (str_starts_with($path, '/auth/')) {
    switch ($path) {
        case '/auth/logout.php':
            require __DIR__ . '/auth/logout.php';
            exit;
        case '/auth/login.php':
        case '/auth/register.php':
            require __DIR__ . '/auth/' . basename($path);
            exit;
        default:
            http_response_code(404);
            echo '404 Not Found: Auth endpoint not found';
            exit;
    }
}

// ROUTING LOGIC BASED ON AUTHENTICATION STATE
if (!$user) {
    // Not logged in: Show the landing/welcome page for all non-auth routes
    require __DIR__ . '/pages/landing.php';
    exit;
}

// User is authenticated - route based on user type and path
if ($user['type'] === 'admin') {
    // Admin user routing
    if (str_starts_with($path, '/admin/')) {
        $adminFile = __DIR__ . $path;
        if (file_exists($adminFile)) {
            require $adminFile;
        } else {
            require __DIR__ . '/admin/admin-panel.php'; // Default admin page
        }
    } else {
        // Redirect admin users to admin panel for non-admin paths
        header('Location: /admin/admin-panel.php');
    }
    exit;
}

if ($user['type'] === 'player') {
    // Player routing - handle different player pages
    
    // Root path - go to player dashboard
    if ($path === '/' || $path === '') {
        require __DIR__ . '/players/index.php';
        exit;
    }
    
    // Player-specific routes
    if (str_starts_with($path, '/players/')) {
        $playerFile = __DIR__ . $path;
        
        // Check if the specific player file exists
        if (file_exists($playerFile)) {
            require $playerFile;
            exit;
        }
        
        // Handle .php extension if not provided
        if (!str_ends_with($path, '.php')) {
            $playerFileWithExt = $playerFile . '.php';
            if (file_exists($playerFileWithExt)) {
                require $playerFileWithExt;
                exit;
            }
        }
        
        // If no specific file found, show 404 for player routes
        http_response_code(404);
        echo '404 Not Found: Player page not found';
        exit;
    }
    
    // For any other path, redirect to player dashboard
    header('Location: /players/');
    exit;
}

// If for any reason user type is not handled
http_response_code(403);
echo '403 Forbidden: Account type not recognized.';
exit;

================
File: README.md
================
test

================
File: site.webmanifest
================
{"name":"XRPG","short_name":"XRPG","icons":[{"src":"/assets/ico/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/assets/ico/android-chrome-512x512.png","sizes":"512x512","type":"image/png"},{"src":"/assets/ico/apple-touch-icon.png","sizes":"180x180","type":"image/png"},{"src":"/assets/ico/favicon-32x32.png","sizes":"32x32","type":"image/png"},{"src":"/assets/ico/favicon-16x16.png","sizes":"16x16","type":"image/png"},{"src":"/assets/ico/favicon.ico","sizes":"64x64 32x32 24x24 16x16","type":"image/x-icon"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
